
newBrigde.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001112c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  080112c0  080112c0  000122c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801189c  0801189c  000132ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801189c  0801189c  0001289c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118a4  080118a4  000132ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118a4  080118a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080118a8  080118a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  080118ac  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000132ec  2**0
                  CONTENTS
 10 .bss          00001f4c  200002ec  200002ec  000132ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20002238  20002238  000132ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000132ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fdc  00000000  00000000  0001331c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003976  00000000  00000000  0002a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff0  00000000  00000000  0002f100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e23  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b1f  00000000  00000000  00054f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd819  00000000  00000000  0006da32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013b24b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e14  00000000  00000000  0013b290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  001420a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002ec 	.word	0x200002ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080112a4 	.word	0x080112a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	080112a4 	.word	0x080112a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001004:	b4b0      	push	{r4, r5, r7}
 8001006:	b08f      	sub	sp, #60	@ 0x3c
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 800100c:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001012:	2307      	movs	r3, #7
 8001014:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001018:	2307      	movs	r3, #7
 800101a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800101e:	2301      	movs	r3, #1
 8001020:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8001024:	23ff      	movs	r3, #255	@ 0xff
 8001026:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800102a:	2364      	movs	r3, #100	@ 0x64
 800102c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8001030:	2308      	movs	r3, #8
 8001032:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	461d      	mov	r5, r3
 8001038:	f107 040c 	add.w	r4, r7, #12
 800103c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001044:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001048:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	373c      	adds	r7, #60	@ 0x3c
 8001050:	46bd      	mov	sp, r7
 8001052:	bcb0      	pop	{r4, r5, r7}
 8001054:	4770      	bx	lr

08001056 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6898      	ldr	r0, [r3, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	899b      	ldrh	r3, [r3, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	f003 ff89 	bl	8004f80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f003 fcb4 	bl	80049dc <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6898      	ldr	r0, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	899b      	ldrh	r3, [r3, #12]
 800107c:	2201      	movs	r2, #1
 800107e:	4619      	mov	r1, r3
 8001080:	f003 ff7e 	bl	8004f80 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001084:	2064      	movs	r0, #100	@ 0x64
 8001086:	f003 fca9 	bl	80049dc <HAL_Delay>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800109c:	2101      	movs	r1, #1
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 fa12 	bl	80014c8 <LoRa_read>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73bb      	strb	r3, [r7, #14]
	data = read;
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d107      	bne.n	80010c2 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	f023 0307 	bic.w	r3, r3, #7
 80010b8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
 80010c0:	e03e      	b.n	8001140 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d10c      	bne.n	80010e2 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80010c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010cc:	f023 0307 	bic.w	r3, r3, #7
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	61da      	str	r2, [r3, #28]
 80010e0:	e02e      	b.n	8001140 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d10c      	bne.n	8001102 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80010e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010ec:	f023 0307 	bic.w	r3, r3, #7
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	f043 0303 	orr.w	r3, r3, #3
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2203      	movs	r2, #3
 80010fe:	61da      	str	r2, [r3, #28]
 8001100:	e01e      	b.n	8001140 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b05      	cmp	r3, #5
 8001106:	d10c      	bne.n	8001122 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800110c:	f023 0307 	bic.w	r3, r3, #7
 8001110:	b25b      	sxtb	r3, r3
 8001112:	f043 0305 	orr.w	r3, r3, #5
 8001116:	b25b      	sxtb	r3, r3
 8001118:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2205      	movs	r2, #5
 800111e:	61da      	str	r2, [r3, #28]
 8001120:	e00e      	b.n	8001140 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b06      	cmp	r3, #6
 8001126:	d10b      	bne.n	8001140 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800112c:	f023 0307 	bic.w	r3, r3, #7
 8001130:	b25b      	sxtb	r3, r3
 8001132:	f043 0306 	orr.w	r3, r3, #6
 8001136:	b25b      	sxtb	r3, r3
 8001138:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2206      	movs	r2, #6
 800113e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	461a      	mov	r2, r3
 8001144:	2101      	movs	r1, #1
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f9d8 	bl	80014fc <LoRa_write>
	//HAL_Delay(10);
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	889b      	ldrh	r3, [r3, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	f003 ff06 	bl	8004f80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6998      	ldr	r0, [r3, #24]
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	f005 fea5 	bl	8006ece <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001184:	bf00      	nop
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4618      	mov	r0, r3
 800118c:	f006 faa5 	bl	80076da <HAL_SPI_GetState>
 8001190:	4603      	mov	r3, r0
 8001192:	2b01      	cmp	r3, #1
 8001194:	d1f7      	bne.n	8001186 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6998      	ldr	r0, [r3, #24]
 800119a:	8b3a      	ldrh	r2, [r7, #24]
 800119c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011a0:	6839      	ldr	r1, [r7, #0]
 80011a2:	f005 ffd8 	bl	8007156 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011a6:	bf00      	nop
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 fa94 	bl	80076da <HAL_SPI_GetState>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d1f7      	bne.n	80011a8 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	4619      	mov	r1, r3
 80011c4:	f003 fedc 	bl	8004f80 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	4613      	mov	r3, r2
 80011de:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	889b      	ldrh	r3, [r3, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	4619      	mov	r1, r3
 80011ec:	f003 fec8 	bl	8004f80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6998      	ldr	r0, [r3, #24]
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	f005 fe67 	bl	8006ece <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001200:	bf00      	nop
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4618      	mov	r0, r3
 8001208:	f006 fa67 	bl	80076da <HAL_SPI_GetState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d1f7      	bne.n	8001202 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6998      	ldr	r0, [r3, #24]
 8001216:	8b3a      	ldrh	r2, [r7, #24]
 8001218:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	f005 fe56 	bl	8006ece <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001222:	bf00      	nop
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4618      	mov	r0, r3
 800122a:	f006 fa56 	bl	80076da <HAL_SPI_GetState>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d1f7      	bne.n	8001224 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	4619      	mov	r1, r3
 8001240:	f003 fe9e 	bl	8004f80 <HAL_GPIO_WritePin>
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8001258:	2126      	movs	r1, #38	@ 0x26
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f934 	bl	80014c8 <LoRa_read>
 8001260:	4603      	mov	r3, r0
 8001262:	73bb      	strb	r3, [r7, #14]

	if(value)
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d004      	beq.n	8001274 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e003      	b.n	800127c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	f023 0308 	bic.w	r3, r3, #8
 800127a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	461a      	mov	r2, r3
 8001280:	2126      	movs	r1, #38	@ 0x26
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f93a 	bl	80014fc <LoRa_write>
	HAL_Delay(10);
 8001288:	200a      	movs	r0, #10
 800128a:	f003 fba7 	bl	80049dc <HAL_Delay>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001298:	b580      	push	{r7, lr}
 800129a:	b096      	sub	sp, #88	@ 0x58
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80012a0:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <LoRa_setAutoLDO+0x68>)
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4611      	mov	r1, r2
 80012a8:	2250      	movs	r2, #80	@ 0x50
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00d f82f 	bl	800e30e <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012b6:	461a      	mov	r2, r3
 80012b8:	2301      	movs	r3, #1
 80012ba:	4093      	lsls	r3, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f941 	bl	8000544 <__aeabi_i2d>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	3358      	adds	r3, #88	@ 0x58
 80012cc:	443b      	add	r3, r7
 80012ce:	3b50      	subs	r3, #80	@ 0x50
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff faca 	bl	800086c <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc4a 	bl	8000b78 <__aeabi_d2iz>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	bfcc      	ite	gt
 80012ea:	2301      	movgt	r3, #1
 80012ec:	2300      	movle	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffaa 	bl	800124c <LoRa_setLowDaraRateOptimization>
}
 80012f8:	bf00      	nop
 80012fa:	3758      	adds	r7, #88	@ 0x58
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	080112c0 	.word	0x080112c0

08001304 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	04db      	lsls	r3, r3, #19
 8001312:	115b      	asrs	r3, r3, #5
 8001314:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	0c1b      	lsrs	r3, r3, #16
 800131a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	461a      	mov	r2, r3
 8001320:	2106      	movs	r1, #6
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f8ea 	bl	80014fc <LoRa_write>
	HAL_Delay(5);
 8001328:	2005      	movs	r0, #5
 800132a:	f003 fb57 	bl	80049dc <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	461a      	mov	r2, r3
 8001338:	2107      	movs	r1, #7
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f8de 	bl	80014fc <LoRa_write>
	HAL_Delay(5);
 8001340:	2005      	movs	r0, #5
 8001342:	f003 fb4b 	bl	80049dc <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800134a:	7afb      	ldrb	r3, [r7, #11]
 800134c:	461a      	mov	r2, r3
 800134e:	2108      	movs	r1, #8
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f8d3 	bl	80014fc <LoRa_write>
	HAL_Delay(5);
 8001356:	2005      	movs	r0, #5
 8001358:	f003 fb40 	bl	80049dc <HAL_Delay>
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b0c      	cmp	r3, #12
 8001372:	dd01      	ble.n	8001378 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001374:	230c      	movs	r3, #12
 8001376:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	2b06      	cmp	r3, #6
 800137c:	dc01      	bgt.n	8001382 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800137e:	2307      	movs	r3, #7
 8001380:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001382:	211e      	movs	r1, #30
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f89f 	bl	80014c8 <LoRa_read>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800138e:	200a      	movs	r0, #10
 8001390:	f003 fb24 	bl	80049dc <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	b2da      	uxtb	r2, r3
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	461a      	mov	r2, r3
 80013ac:	211e      	movs	r1, #30
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f8a4 	bl	80014fc <LoRa_write>
	HAL_Delay(10);
 80013b4:	200a      	movs	r0, #10
 80013b6:	f003 fb11 	bl	80049dc <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ff6c 	bl	8001298 <LoRa_setAutoLDO>
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	461a      	mov	r2, r3
 80013d8:	2109      	movs	r1, #9
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f88e 	bl	80014fc <LoRa_write>
	HAL_Delay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f003 fafb 	bl	80049dc <HAL_Delay>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	2b2c      	cmp	r3, #44	@ 0x2c
 8001404:	d801      	bhi.n	800140a <LoRa_setOCP+0x1a>
		current = 45;
 8001406:	232d      	movs	r3, #45	@ 0x2d
 8001408:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	2bf0      	cmp	r3, #240	@ 0xf0
 800140e:	d901      	bls.n	8001414 <LoRa_setOCP+0x24>
		current = 240;
 8001410:	23f0      	movs	r3, #240	@ 0xf0
 8001412:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	2b78      	cmp	r3, #120	@ 0x78
 8001418:	d809      	bhi.n	800142e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	3b2d      	subs	r3, #45	@ 0x2d
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <LoRa_setOCP+0x78>)
 8001420:	fb82 1203 	smull	r1, r2, r2, r3
 8001424:	1052      	asrs	r2, r2, #1
 8001426:	17db      	asrs	r3, r3, #31
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e00b      	b.n	8001446 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	2bf0      	cmp	r3, #240	@ 0xf0
 8001432:	d808      	bhi.n	8001446 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	331e      	adds	r3, #30
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <LoRa_setOCP+0x78>)
 800143a:	fb82 1203 	smull	r1, r2, r2, r3
 800143e:	1092      	asrs	r2, r2, #2
 8001440:	17db      	asrs	r3, r3, #31
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	3320      	adds	r3, #32
 800144a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	461a      	mov	r2, r3
 8001450:	210b      	movs	r1, #11
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f852 	bl	80014fc <LoRa_write>
	HAL_Delay(10);
 8001458:	200a      	movs	r0, #10
 800145a:	f003 fabf 	bl	80049dc <HAL_Delay>
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	66666667 	.word	0x66666667

0800146c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001474:	211e      	movs	r1, #30
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f826 	bl	80014c8 <LoRa_read>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	f043 0307 	orr.w	r3, r3, #7
 8001486:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	461a      	mov	r2, r3
 800148c:	211e      	movs	r1, #30
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f834 	bl	80014fc <LoRa_write>
	HAL_Delay(10);
 8001494:	200a      	movs	r0, #10
 8001496:	f003 faa1 	bl	80049dc <HAL_Delay>
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <LoRa_setSyncWord>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSyncWord(LoRa* _LoRa, uint8_t syncword){
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegSyncWord, syncword);
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	461a      	mov	r2, r3
 80014b2:	2139      	movs	r1, #57	@ 0x39
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f821 	bl	80014fc <LoRa_write>
	HAL_Delay(10);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f003 fa8e 	bl	80049dc <HAL_Delay>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80014de:	f107 030f 	add.w	r3, r7, #15
 80014e2:	f107 010e 	add.w	r1, r7, #14
 80014e6:	2201      	movs	r2, #1
 80014e8:	9200      	str	r2, [sp, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fe31 	bl	8001154 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af02      	add	r7, sp, #8
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
 8001508:	4613      	mov	r3, r2
 800150a:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001512:	b2db      	uxtb	r3, r3
 8001514:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001516:	78bb      	ldrb	r3, [r7, #2]
 8001518:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800151a:	f107 030f 	add.w	r3, r7, #15
 800151e:	f107 010e 	add.w	r1, r7, #14
 8001522:	2201      	movs	r2, #1
 8001524:	9200      	str	r2, [sp, #0]
 8001526:	2201      	movs	r2, #1
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fe51 	bl	80011d0 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	461a      	mov	r2, r3
 8001542:	460b      	mov	r3, r1
 8001544:	72fb      	strb	r3, [r7, #11]
 8001546:	4613      	mov	r3, r2
 8001548:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800154a:	7afb      	ldrb	r3, [r7, #11]
 800154c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001550:	b2db      	uxtb	r3, r3
 8001552:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	889b      	ldrh	r3, [r3, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	4619      	mov	r1, r3
 8001560:	f003 fd0e 	bl	8004f80 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6998      	ldr	r0, [r3, #24]
 8001568:	f107 0117 	add.w	r1, r7, #23
 800156c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001570:	2201      	movs	r2, #1
 8001572:	f005 fcac 	bl	8006ece <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001576:	bf00      	nop
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4618      	mov	r0, r3
 800157e:	f006 f8ac 	bl	80076da <HAL_SPI_GetState>
 8001582:	4603      	mov	r3, r0
 8001584:	2b01      	cmp	r3, #1
 8001586:	d1f7      	bne.n	8001578 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6998      	ldr	r0, [r3, #24]
 800158c:	7abb      	ldrb	r3, [r7, #10]
 800158e:	b29a      	uxth	r2, r3
 8001590:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	f005 fc9a 	bl	8006ece <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800159a:	bf00      	nop
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f006 f89a 	bl	80076da <HAL_SPI_GetState>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d1f7      	bne.n	800159c <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	889b      	ldrh	r3, [r3, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	4619      	mov	r1, r3
 80015b8:	f003 fce2 	bl	8004f80 <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

	return 1;
 80015cc:	2301      	movs	r3, #1
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	4611      	mov	r1, r2
 80015e6:	461a      	mov	r2, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4613      	mov	r3, r2
 80015ee:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015f6:	2101      	movs	r1, #1
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff fd4a 	bl	8001092 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80015fe:	210e      	movs	r1, #14
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff ff61 	bl	80014c8 <LoRa_read>
 8001606:	4603      	mov	r3, r0
 8001608:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800160a:	7cfb      	ldrb	r3, [r7, #19]
 800160c:	461a      	mov	r2, r3
 800160e:	210d      	movs	r1, #13
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff ff73 	bl	80014fc <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	461a      	mov	r2, r3
 800161a:	2122      	movs	r1, #34	@ 0x22
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff ff6d 	bl	80014fc <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	2100      	movs	r1, #0
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff ff84 	bl	8001536 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800162e:	2103      	movs	r1, #3
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7ff fd2e 	bl	8001092 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001636:	2112      	movs	r1, #18
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7ff ff45 	bl	80014c8 <LoRa_read>
 800163e:	4603      	mov	r3, r0
 8001640:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001642:	7cfb      	ldrb	r3, [r7, #19]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00a      	beq.n	8001662 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800164c:	22ff      	movs	r2, #255	@ 0xff
 800164e:	2112      	movs	r1, #18
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff ff53 	bl	80014fc <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001656:	6979      	ldr	r1, [r7, #20]
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fd1a 	bl	8001092 <LoRa_gotoMode>
			return 1;
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	3b01      	subs	r3, #1
 8001666:	80bb      	strh	r3, [r7, #4]
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d105      	bne.n	800167a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800166e:	6979      	ldr	r1, [r7, #20]
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7ff fd0e 	bl	8001092 <LoRa_gotoMode>
				return 0;
 8001676:	2300      	movs	r3, #0
 8001678:	e003      	b.n	8001682 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800167a:	2001      	movs	r0, #1
 800167c:	f003 f9ae 	bl	80049dc <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001680:	e7d9      	b.n	8001636 <LoRa_transmit+0x5c>
	}
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001692:	2105      	movs	r1, #5
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fcfc 	bl	8001092 <LoRa_gotoMode>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80016a2:	b590      	push	{r4, r7, lr}
 80016a4:	b089      	sub	sp, #36	@ 0x24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	4613      	mov	r3, r2
 80016ae:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	e007      	b.n	80016ca <LoRa_receive+0x28>
		data[i]=0;
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	4413      	add	r3, r2
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	3301      	adds	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	dbf3      	blt.n	80016ba <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80016d2:	2101      	movs	r1, #1
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f7ff fcdc 	bl	8001092 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80016da:	2112      	movs	r1, #18
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff fef3 	bl	80014c8 <LoRa_read>
 80016e2:	4603      	mov	r3, r0
 80016e4:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80016e6:	7cfb      	ldrb	r3, [r7, #19]
 80016e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d02f      	beq.n	8001750 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80016f0:	22ff      	movs	r2, #255	@ 0xff
 80016f2:	2112      	movs	r1, #18
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff ff01 	bl	80014fc <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80016fa:	2113      	movs	r1, #19
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff fee3 	bl	80014c8 <LoRa_read>
 8001702:	4603      	mov	r3, r0
 8001704:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001706:	2110      	movs	r1, #16
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff fedd 	bl	80014c8 <LoRa_read>
 800170e:	4603      	mov	r3, r0
 8001710:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001712:	7cfb      	ldrb	r3, [r7, #19]
 8001714:	461a      	mov	r2, r3
 8001716:	210d      	movs	r1, #13
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff feef 	bl	80014fc <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800171e:	7cba      	ldrb	r2, [r7, #18]
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4293      	cmp	r3, r2
 8001724:	bf28      	it	cs
 8001726:	4613      	movcs	r3, r2
 8001728:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e00b      	b.n	8001748 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	18d4      	adds	r4, r2, r3
 8001736:	2100      	movs	r1, #0
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fec5 	bl	80014c8 <LoRa_read>
 800173e:	4603      	mov	r3, r0
 8001740:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	7ffb      	ldrb	r3, [r7, #31]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbef      	blt.n	8001730 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001750:	2105      	movs	r1, #5
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f7ff fc9d 	bl	8001092 <LoRa_gotoMode>
    return min;
 8001758:	7ffb      	ldrb	r3, [r7, #31]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	@ 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}

08001762 <LoRa_getRSSI>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Returns the RSSI value of last received packet.
\* ----------------------------------------------------------------------------- */
int LoRa_getRSSI(LoRa* _LoRa){
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	uint8_t read;
	read = LoRa_read(_LoRa, RegPktRssiValue);
 800176a:	211a      	movs	r1, #26
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff feab 	bl	80014c8 <LoRa_read>
 8001772:	4603      	mov	r3, r0
 8001774:	73fb      	strb	r3, [r7, #15]
	return -164 + read;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	3ba4      	subs	r3, #164	@ 0xa4
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff1a 	bl	80015c4 <LoRa_isvalid>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8096 	beq.w	80018c4 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001798:	2100      	movs	r1, #0
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fc79 	bl	8001092 <LoRa_gotoMode>
			HAL_Delay(10);
 80017a0:	200a      	movs	r0, #10
 80017a2:	f003 f91b 	bl	80049dc <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80017a6:	2101      	movs	r1, #1
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff fe8d 	bl	80014c8 <LoRa_read>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80017b2:	200a      	movs	r0, #10
 80017b4:	f003 f912 	bl	80049dc <HAL_Delay>
			data = read | 0x80;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017be:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80017c0:	7bbb      	ldrb	r3, [r7, #14]
 80017c2:	461a      	mov	r2, r3
 80017c4:	2101      	movs	r1, #1
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fe98 	bl	80014fc <LoRa_write>
			HAL_Delay(100);
 80017cc:	2064      	movs	r0, #100	@ 0x64
 80017ce:	f003 f905 	bl	80049dc <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fd93 	bl	8001304 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80017e4:	4619      	mov	r1, r3
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fdee 	bl	80013c8 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fdfb 	bl	80013f0 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80017fa:	2223      	movs	r2, #35	@ 0x23
 80017fc:	210c      	movs	r1, #12
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe7c 	bl	80014fc <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fe31 	bl	800146c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fda6 	bl	8001364 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001818:	22ff      	movs	r2, #255	@ 0xff
 800181a:	211f      	movs	r1, #31
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fe6d 	bl	80014fc <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	b2da      	uxtb	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	461a      	mov	r2, r3
 8001842:	211d      	movs	r1, #29
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fe59 	bl	80014fc <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fd24 	bl	8001298 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29b      	uxth	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	2120      	movs	r1, #32
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fe4c 	bl	80014fc <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	2121      	movs	r1, #33	@ 0x21
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fe44 	bl	80014fc <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001874:	2140      	movs	r1, #64	@ 0x40
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fe26 	bl	80014c8 <LoRa_read>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001886:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001888:	7bbb      	ldrb	r3, [r7, #14]
 800188a:	461a      	mov	r2, r3
 800188c:	2140      	movs	r1, #64	@ 0x40
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fe34 	bl	80014fc <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001894:	2101      	movs	r1, #1
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fbfb 	bl	8001092 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80018a2:	200a      	movs	r0, #10
 80018a4:	f003 f89a 	bl	80049dc <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80018a8:	2142      	movs	r1, #66	@ 0x42
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fe0c 	bl	80014c8 <LoRa_read>
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d101      	bne.n	80018be <LoRa_init+0x13c>
				return LORA_OK;
 80018ba:	23c8      	movs	r3, #200	@ 0xc8
 80018bc:	e004      	b.n	80018c8 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80018be:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80018c2:	e001      	b.n	80018c8 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80018c4:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <case_insensitive_strcmp+0x16>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e056      	b.n	8001998 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d10d      	bne.n	800190e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e050      	b.n	8001998 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <case_insensitive_strcmp+0x32>
        {
            return 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	e04a      	b.n	8001998 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3301      	adds	r3, #1
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	3301      	adds	r3, #1
 8001918:	4a22      	ldr	r2, [pc, #136]	@ (80019a4 <case_insensitive_strcmp+0xd4>)
 800191a:	4413      	add	r3, r2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d103      	bne.n	800192e <case_insensitive_strcmp+0x5e>
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	f103 0220 	add.w	r2, r3, #32
 800192c:	e000      	b.n	8001930 <case_insensitive_strcmp+0x60>
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	73bb      	strb	r3, [r7, #14]
 8001936:	7bbb      	ldrb	r3, [r7, #14]
 8001938:	3301      	adds	r3, #1
 800193a:	491a      	ldr	r1, [pc, #104]	@ (80019a4 <case_insensitive_strcmp+0xd4>)
 800193c:	440b      	add	r3, r1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d102      	bne.n	800194e <case_insensitive_strcmp+0x7e>
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	3320      	adds	r3, #32
 800194c:	e000      	b.n	8001950 <case_insensitive_strcmp+0x80>
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	429a      	cmp	r2, r3
 8001952:	d0d0      	beq.n	80018f6 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	737b      	strb	r3, [r7, #13]
 800195a:	7b7b      	ldrb	r3, [r7, #13]
 800195c:	3301      	adds	r3, #1
 800195e:	4a11      	ldr	r2, [pc, #68]	@ (80019a4 <case_insensitive_strcmp+0xd4>)
 8001960:	4413      	add	r3, r2
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b01      	cmp	r3, #1
 800196a:	d103      	bne.n	8001974 <case_insensitive_strcmp+0xa4>
 800196c:	7b7b      	ldrb	r3, [r7, #13]
 800196e:	f103 0220 	add.w	r2, r3, #32
 8001972:	e000      	b.n	8001976 <case_insensitive_strcmp+0xa6>
 8001974:	7b7a      	ldrb	r2, [r7, #13]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	733b      	strb	r3, [r7, #12]
 800197c:	7b3b      	ldrb	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	4908      	ldr	r1, [pc, #32]	@ (80019a4 <case_insensitive_strcmp+0xd4>)
 8001982:	440b      	add	r3, r1
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d102      	bne.n	8001994 <case_insensitive_strcmp+0xc4>
 800198e:	7b3b      	ldrb	r3, [r7, #12]
 8001990:	3320      	adds	r3, #32
 8001992:	e000      	b.n	8001996 <case_insensitive_strcmp+0xc6>
 8001994:	7b3b      	ldrb	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	08011458 	.word	0x08011458

080019a8 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <cJSON_strdup+0x1c>
    {
        return NULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e015      	b.n	80019f0 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7fe fc63 	bl	8000290 <strlen>
 80019ca:	4603      	mov	r3, r0
 80019cc:	3301      	adds	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	4798      	blx	r3
 80019d8:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <cJSON_strdup+0x3c>
    {
        return NULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e005      	b.n	80019f0 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f00c fc90 	bl	800e30e <memcpy>

    return copy;
 80019ee:	68bb      	ldr	r3, [r7, #8]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <cJSON_InitHooks>:

CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    if (hooks == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <cJSON_InitHooks+0x22>
    {
        /* Reset hooks */
        global_hooks.allocate = malloc;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a08:	4a1a      	ldr	r2, [pc, #104]	@ (8001a74 <cJSON_InitHooks+0x7c>)
 8001a0a:	601a      	str	r2, [r3, #0]
        global_hooks.deallocate = free;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001a78 <cJSON_InitHooks+0x80>)
 8001a10:	605a      	str	r2, [r3, #4]
        global_hooks.reallocate = realloc;
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a14:	4a19      	ldr	r2, [pc, #100]	@ (8001a7c <cJSON_InitHooks+0x84>)
 8001a16:	609a      	str	r2, [r3, #8]
        return;
 8001a18:	e025      	b.n	8001a66 <cJSON_InitHooks+0x6e>
    }

    global_hooks.allocate = malloc;
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a1c:	4a15      	ldr	r2, [pc, #84]	@ (8001a74 <cJSON_InitHooks+0x7c>)
 8001a1e:	601a      	str	r2, [r3, #0]
    if (hooks->malloc_fn != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <cJSON_InitHooks+0x38>
    {
        global_hooks.allocate = hooks->malloc_fn;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a10      	ldr	r2, [pc, #64]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a2e:	6013      	str	r3, [r2, #0]
    }

    global_hooks.deallocate = free;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a32:	4a11      	ldr	r2, [pc, #68]	@ (8001a78 <cJSON_InitHooks+0x80>)
 8001a34:	605a      	str	r2, [r3, #4]
    if (hooks->free_fn != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <cJSON_InitHooks+0x4e>
    {
        global_hooks.deallocate = hooks->free_fn;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a44:	6053      	str	r3, [r2, #4]
    }

    /* use realloc only if both free and malloc are used */
    global_hooks.reallocate = NULL;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a08      	ldr	r2, [pc, #32]	@ (8001a74 <cJSON_InitHooks+0x7c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d107      	bne.n	8001a66 <cJSON_InitHooks+0x6e>
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <cJSON_InitHooks+0x80>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d102      	bne.n	8001a66 <cJSON_InitHooks+0x6e>
    {
        global_hooks.reallocate = realloc;
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <cJSON_InitHooks+0x78>)
 8001a62:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <cJSON_InitHooks+0x84>)
 8001a64:	609a      	str	r2, [r3, #8]
    }
}
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	20000000 	.word	0x20000000
 8001a74:	0800c279 	.word	0x0800c279
 8001a78:	0800c289 	.word	0x0800c289
 8001a7c:	0800c3f5 	.word	0x0800c3f5

08001a80 <cJSON_New_Item>:

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2028      	movs	r0, #40	@ 0x28
 8001a8e:	4798      	blx	r3
 8001a90:	60f8      	str	r0, [r7, #12]
    if (node)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001a98:	2228      	movs	r2, #40	@ 0x28
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f00c fb38 	bl	800e112 <memset>
    }

    return node;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001ab8:	e037      	b.n	8001b2a <cJSON_Delete+0x7e>
    {
        next = item->next;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d108      	bne.n	8001ade <cJSON_Delete+0x32>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ffe7 	bl	8001aac <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <cJSON_Delete+0x52>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8001af2:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <cJSON_Delete+0x90>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6912      	ldr	r2, [r2, #16]
 8001afa:	4610      	mov	r0, r2
 8001afc:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <cJSON_Delete+0x72>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <cJSON_Delete+0x90>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6a12      	ldr	r2, [r2, #32]
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <cJSON_Delete+0x90>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4798      	blx	r3
        item = next;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1c4      	bne.n	8001aba <cJSON_Delete+0xe>
    }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000000 	.word	0x20000000

08001b40 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001b44:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b098      	sub	sp, #96	@ 0x60
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001b6a:	f7ff ffe9 	bl	8001b40 <get_decimal_point>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <parse_number+0x36>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <parse_number+0x3a>
    {
        return false;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e0a0      	b.n	8001ccc <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b8e:	e03d      	b.n	8001c0c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6899      	ldr	r1, [r3, #8]
 8001b98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b9a:	440b      	add	r3, r1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b45      	cmp	r3, #69	@ 0x45
 8001ba2:	dc17      	bgt.n	8001bd4 <parse_number+0x84>
 8001ba4:	2b2b      	cmp	r3, #43	@ 0x2b
 8001ba6:	db40      	blt.n	8001c2a <parse_number+0xda>
 8001ba8:	3b2b      	subs	r3, #43	@ 0x2b
 8001baa:	2201      	movs	r2, #1
 8001bac:	409a      	lsls	r2, r3
 8001bae:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce0 <parse_number+0x190>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf14      	ite	ne
 8001bb6:	2301      	movne	r3, #1
 8001bb8:	2300      	moveq	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10b      	bne.n	8001bd8 <parse_number+0x88>
 8001bc0:	f002 0308 	and.w	r3, r2, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d111      	bne.n	8001bf6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8001bd2:	e02a      	b.n	8001c2a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8001bd4:	2b65      	cmp	r3, #101	@ 0x65
 8001bd6:	d128      	bne.n	8001c2a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001be2:	440b      	add	r3, r1
 8001be4:	4413      	add	r3, r2
 8001be6:	7819      	ldrb	r1, [r3, #0]
 8001be8:	f107 0208 	add.w	r2, r7, #8
 8001bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bee:	4413      	add	r3, r2
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	701a      	strb	r2, [r3, #0]
                break;
 8001bf4:	e007      	b.n	8001c06 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001bf6:	f107 0208 	add.w	r2, r7, #8
 8001bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001c02:	701a      	strb	r2, [r3, #0]
                break;
 8001c04:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c08:	3301      	adds	r3, #1
 8001c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c10:	d80d      	bhi.n	8001c2e <parse_number+0xde>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <parse_number+0xde>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c1e:	441a      	add	r2, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3b3      	bcc.n	8001b90 <parse_number+0x40>
        }
    }
loop_end:
 8001c28:	e001      	b.n	8001c2e <parse_number+0xde>
                goto loop_end;
 8001c2a:	bf00      	nop
 8001c2c:	e000      	b.n	8001c30 <parse_number+0xe0>
loop_end:
 8001c2e:	bf00      	nop
    number_c_string[i] = '\0';
 8001c30:	f107 0208 	add.w	r2, r7, #8
 8001c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c36:	4413      	add	r3, r2
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001c3c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f00b fa14 	bl	800d074 <strtod>
 8001c4c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001c50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d101      	bne.n	8001c5e <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e036      	b.n	8001ccc <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c64:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001c68:	a31b      	add	r3, pc, #108	@ (adr r3, 8001cd8 <parse_number+0x188>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001c72:	f7fe ff57 	bl	8000b24 <__aeabi_dcmpge>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	e015      	b.n	8001cb2 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <parse_number+0x194>)
 8001c8c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001c90:	f7fe ff3e 	bl	8000b10 <__aeabi_dcmple>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001ca0:	615a      	str	r2, [r3, #20]
 8001ca2:	e006      	b.n	8001cb2 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001ca4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001ca8:	f7fe ff66 	bl	8000b78 <__aeabi_d2iz>
 8001cac:	4602      	mov	r2, r0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001cbe:	f107 0208 	add.w	r2, r7, #8
 8001cc2:	1a8a      	subs	r2, r1, r2
 8001cc4:	441a      	add	r2, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	609a      	str	r2, [r3, #8]
    return true;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3760      	adds	r7, #96	@ 0x60
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	ffc00000 	.word	0xffc00000
 8001cdc:	41dfffff 	.word	0x41dfffff
 8001ce0:	04007fe5 	.word	0x04007fe5
 8001ce4:	c1e00000 	.word	0xc1e00000

08001ce8 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <ensure+0x20>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <ensure+0x24>
    {
        return NULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e086      	b.n	8001e1a <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <ensure+0x3c>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d301      	bcc.n	8001d24 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e07a      	b.n	8001e1a <ensure+0x132>
    }

    if (needed > INT_MAX)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	da01      	bge.n	8001d2e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e075      	b.n	8001e1a <ensure+0x132>
    }

    needed += p->offset + 1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	3301      	adds	r3, #1
 8001d38:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d805      	bhi.n	8001d50 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	e064      	b.n	8001e1a <ensure+0x132>
    }

    if (p->noalloc) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <ensure+0x74>
        return NULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e05e      	b.n	8001e1a <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d62:	d308      	bcc.n	8001d76 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db03      	blt.n	8001d72 <ensure+0x8a>
        {
            newsize = INT_MAX;
 8001d6a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	e004      	b.n	8001d7c <ensure+0x94>
        }
        else
        {
            return NULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e051      	b.n	8001e1a <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d018      	beq.n	8001db6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4798      	blx	r3
 8001d92:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d135      	bne.n	8001e06 <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	4610      	mov	r0, r2
 8001da4:	4798      	blx	r3
            p->length = 0;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

            return NULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e031      	b.n	8001e1a <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	68b8      	ldr	r0, [r7, #8]
 8001dbc:	4798      	blx	r3
 8001dbe:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10d      	bne.n	8001de2 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4798      	blx	r3
            p->length = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]

            return NULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e01b      	b.n	8001e1a <ensure+0x132>
        }
        if (newbuffer)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <ensure+0x112>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	3301      	adds	r3, #1
 8001df2:	461a      	mov	r2, r3
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f00c fa8a 	bl	800e30e <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	4610      	mov	r0, r2
 8001e04:	4798      	blx	r3
    }
    p->length = newsize;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4413      	add	r3, r2
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001e22:	b590      	push	{r4, r7, lr}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <update_offset+0x3a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00f      	beq.n	8001e5c <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4413      	add	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689c      	ldr	r4, [r3, #8]
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7fe fa1f 	bl	8000290 <strlen>
 8001e52:	4603      	mov	r3, r0
 8001e54:	18e2      	adds	r2, r4, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	e000      	b.n	8001e5e <update_offset+0x3c>
        return;
 8001e5c:	bf00      	nop
}
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd90      	pop	{r4, r7, pc}

08001e64 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e68:	b087      	sub	sp, #28
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001e70:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001e74:	68b8      	ldr	r0, [r7, #8]
 8001e76:	68fe      	ldr	r6, [r7, #12]
 8001e78:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	687e      	ldr	r6, [r7, #4]
 8001e80:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8001e84:	f7fe fe58 	bl	8000b38 <__aeabi_dcmpgt>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <compare_double+0x34>
 8001e8e:	68bc      	ldr	r4, [r7, #8]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001e96:	e003      	b.n	8001ea0 <compare_double+0x3c>
 8001e98:	683c      	ldr	r4, [r7, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001ea0:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eac:	f7fe f9fc 	bl	80002a8 <__aeabi_dsub>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4690      	mov	r8, r2
 8001eb6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <compare_double+0x8c>)
 8001ec0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ec4:	f7fe fba8 	bl	8000618 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	2101      	movs	r1, #1
 8001ece:	460c      	mov	r4, r1
 8001ed0:	4640      	mov	r0, r8
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	f7fe fe1c 	bl	8000b10 <__aeabi_dcmple>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <compare_double+0x7e>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	461c      	mov	r4, r3
 8001ee2:	b2e3      	uxtb	r3, r4
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001eee:	bf00      	nop
 8001ef0:	3cb00000 	.word	0x3cb00000

08001ef4 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef6:	b093      	sub	sp, #76	@ 0x4c
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f08:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	f107 0318 	add.w	r3, r7, #24
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
 8001f28:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8001f2a:	f7ff fe09 	bl	8001b40 <get_decimal_point>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <print_number+0x56>
    {
        return false;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e09c      	b.n	8002084 <print_number+0x190>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8001f4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f4e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f52:	f7fe fdfb 	bl	8000b4c <__aeabi_dcmpun>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d121      	bne.n	8001fa0 <print_number+0xac>
 8001f5c:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f60:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001f64:	2301      	movs	r3, #1
 8001f66:	461e      	mov	r6, r3
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	4b47      	ldr	r3, [pc, #284]	@ (800208c <print_number+0x198>)
 8001f6e:	4620      	mov	r0, r4
 8001f70:	4629      	mov	r1, r5
 8001f72:	f7fe fdeb 	bl	8000b4c <__aeabi_dcmpun>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <print_number+0xa0>
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	4b42      	ldr	r3, [pc, #264]	@ (800208c <print_number+0x198>)
 8001f82:	4620      	mov	r0, r4
 8001f84:	4629      	mov	r1, r5
 8001f86:	f7fe fdc3 	bl	8000b10 <__aeabi_dcmple>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <print_number+0xa0>
 8001f90:	2300      	movs	r3, #0
 8001f92:	461e      	mov	r6, r3
 8001f94:	b2f3      	uxtb	r3, r6
 8001f96:	f083 0301 	eor.w	r3, r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	493a      	ldr	r1, [pc, #232]	@ (8002090 <print_number+0x19c>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f00c f824 	bl	800dff4 <siprintf>
 8001fac:	6478      	str	r0, [r7, #68]	@ 0x44
 8001fae:	e027      	b.n	8002000 <print_number+0x10c>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001fb0:	f107 0014 	add.w	r0, r7, #20
 8001fb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001fb8:	4936      	ldr	r1, [pc, #216]	@ (8002094 <print_number+0x1a0>)
 8001fba:	f00c f81b 	bl	800dff4 <siprintf>
 8001fbe:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001fc0:	f107 0208 	add.w	r2, r7, #8
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4933      	ldr	r1, [pc, #204]	@ (8002098 <print_number+0x1a4>)
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f00c f832 	bl	800e034 <siscanf>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10c      	bne.n	8001ff0 <print_number+0xfc>
 8001fd6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fda:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001fde:	eeb0 0a47 	vmov.f32	s0, s14
 8001fe2:	eef0 0a67 	vmov.f32	s1, s15
 8001fe6:	f7ff ff3d 	bl	8001e64 <compare_double>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <print_number+0x10c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001ff0:	f107 0014 	add.w	r0, r7, #20
 8001ff4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ff8:	4928      	ldr	r1, [pc, #160]	@ (800209c <print_number+0x1a8>)
 8001ffa:	f00b fffb 	bl	800dff4 <siprintf>
 8001ffe:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8002000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002002:	2b00      	cmp	r3, #0
 8002004:	db02      	blt.n	800200c <print_number+0x118>
 8002006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002008:	2b19      	cmp	r3, #25
 800200a:	dd01      	ble.n	8002010 <print_number+0x11c>
    {
        return false;
 800200c:	2300      	movs	r3, #0
 800200e:	e039      	b.n	8002084 <print_number+0x190>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8002010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002012:	3301      	adds	r3, #1
 8002014:	4619      	mov	r1, r3
 8002016:	6838      	ldr	r0, [r7, #0]
 8002018:	f7ff fe66 	bl	8001ce8 <ensure>
 800201c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800201e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <print_number+0x134>
    {
        return false;
 8002024:	2300      	movs	r3, #0
 8002026:	e02d      	b.n	8002084 <print_number+0x190>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8002028:	2300      	movs	r3, #0
 800202a:	643b      	str	r3, [r7, #64]	@ 0x40
 800202c:	e01a      	b.n	8002064 <print_number+0x170>
    {
        if (number_buffer[i] == decimal_point)
 800202e:	f107 0214 	add.w	r2, r7, #20
 8002032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800203c:	429a      	cmp	r2, r3
 800203e:	d105      	bne.n	800204c <print_number+0x158>
        {
            output_pointer[i] = '.';
 8002040:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002044:	4413      	add	r3, r2
 8002046:	222e      	movs	r2, #46	@ 0x2e
 8002048:	701a      	strb	r2, [r3, #0]
            continue;
 800204a:	e008      	b.n	800205e <print_number+0x16a>
        }

        output_pointer[i] = number_buffer[i];
 800204c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800204e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002050:	4413      	add	r3, r2
 8002052:	f107 0114 	add.w	r1, r7, #20
 8002056:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002058:	440a      	add	r2, r1
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800205e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002060:	3301      	adds	r3, #1
 8002062:	643b      	str	r3, [r7, #64]	@ 0x40
 8002064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002068:	429a      	cmp	r2, r3
 800206a:	d3e0      	bcc.n	800202e <print_number+0x13a>
    }
    output_pointer[i] = '\0';
 800206c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800206e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002070:	4413      	add	r3, r2
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207c:	441a      	add	r2, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	609a      	str	r2, [r3, #8]

    return true;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	374c      	adds	r7, #76	@ 0x4c
 8002088:	46bd      	mov	sp, r7
 800208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208c:	7fefffff 	.word	0x7fefffff
 8002090:	0801131c 	.word	0x0801131c
 8002094:	08011324 	.word	0x08011324
 8002098:	0801132c 	.word	0x0801132c
 800209c:	08011330 	.word	0x08011330

080020a0 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	e04c      	b.n	8002150 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4413      	add	r3, r2
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b2f      	cmp	r3, #47	@ 0x2f
 80020c0:	d90f      	bls.n	80020e2 <parse_hex4+0x42>
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4413      	add	r3, r2
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b39      	cmp	r3, #57	@ 0x39
 80020cc:	d809      	bhi.n	80020e2 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	3b30      	subs	r3, #48	@ 0x30
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	e02d      	b.n	800213e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b40      	cmp	r3, #64	@ 0x40
 80020ec:	d90f      	bls.n	800210e <parse_hex4+0x6e>
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b46      	cmp	r3, #70	@ 0x46
 80020f8:	d809      	bhi.n	800210e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	3b37      	subs	r3, #55	@ 0x37
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e017      	b.n	800213e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4413      	add	r3, r2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b60      	cmp	r3, #96	@ 0x60
 8002118:	d90f      	bls.n	800213a <parse_hex4+0x9a>
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4413      	add	r3, r2
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b66      	cmp	r3, #102	@ 0x66
 8002124:	d809      	bhi.n	800213a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4413      	add	r3, r2
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	3b57      	subs	r3, #87	@ 0x57
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e001      	b.n	800213e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800213a:	2300      	movs	r3, #0
 800213c:	e00c      	b.n	8002158 <parse_hex4+0xb8>
        }

        if (i < 3)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d802      	bhi.n	800214a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3301      	adds	r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b03      	cmp	r3, #3
 8002154:	d9af      	bls.n	80020b6 <parse_hex4+0x16>
        }
    }

    return h;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b05      	cmp	r3, #5
 800219c:	f340 80b7 	ble.w	800230e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	3302      	adds	r3, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff7b 	bl	80020a0 <parse_hex4>
 80021aa:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80021b2:	d304      	bcc.n	80021be <utf16_literal_to_utf8+0x5a>
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80021ba:	f0c0 80aa 	bcc.w	8002312 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80021c4:	d337      	bcc.n	8002236 <utf16_literal_to_utf8+0xd2>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80021cc:	d233      	bcs.n	8002236 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	3306      	adds	r3, #6
 80021d2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80021d8:	230c      	movs	r3, #12
 80021da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b05      	cmp	r3, #5
 80021e6:	f340 8096 	ble.w	8002316 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b5c      	cmp	r3, #92	@ 0x5c
 80021f0:	f040 8093 	bne.w	800231a <utf16_literal_to_utf8+0x1b6>
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b75      	cmp	r3, #117	@ 0x75
 80021fc:	f040 808d 	bne.w	800231a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3302      	adds	r3, #2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff4b 	bl	80020a0 <parse_hex4>
 800220a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8002212:	f0c0 8084 	bcc.w	800231e <utf16_literal_to_utf8+0x1ba>
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800221c:	d27f      	bcs.n	800231e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	029a      	lsls	r2, r3, #10
 8002222:	4b43      	ldr	r3, [pc, #268]	@ (8002330 <utf16_literal_to_utf8+0x1cc>)
 8002224:	4013      	ands	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800222c:	4313      	orrs	r3, r2
 800222e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8002234:	e004      	b.n	8002240 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8002236:	2306      	movs	r3, #6
 8002238:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	2b7f      	cmp	r3, #127	@ 0x7f
 8002244:	d803      	bhi.n	800224e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800224c:	e01f      	b.n	800228e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002254:	d206      	bcs.n	8002264 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8002256:	2302      	movs	r3, #2
 8002258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800225c:	23c0      	movs	r3, #192	@ 0xc0
 800225e:	f887 3020 	strb.w	r3, [r7, #32]
 8002262:	e014      	b.n	800228e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226a:	d206      	bcs.n	800227a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800226c:	2303      	movs	r3, #3
 800226e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8002272:	23e0      	movs	r3, #224	@ 0xe0
 8002274:	f887 3020 	strb.w	r3, [r7, #32]
 8002278:	e009      	b.n	800228e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002280:	d24f      	bcs.n	8002322 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8002282:	2304      	movs	r3, #4
 8002284:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8002288:	23f0      	movs	r3, #240	@ 0xf0
 800228a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800228e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002292:	3b01      	subs	r3, #1
 8002294:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002298:	e015      	b.n	80022c6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	b2db      	uxtb	r3, r3
 800229e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80022ac:	440b      	add	r3, r1
 80022ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	099b      	lsrs	r3, r3, #6
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80022bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80022c0:	3b01      	subs	r3, #1
 80022c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80022c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1e5      	bne.n	800229a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80022ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d909      	bls.n	80022ea <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	b2d9      	uxtb	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e007      	b.n	80022fa <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002302:	441a      	add	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8002308:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800230c:	e00b      	b.n	8002326 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800230e:	bf00      	nop
 8002310:	e008      	b.n	8002324 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8002312:	bf00      	nop
 8002314:	e006      	b.n	8002324 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8002316:	bf00      	nop
 8002318:	e004      	b.n	8002324 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800231a:	bf00      	nop
 800231c:	e002      	b.n	8002324 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800231e:	bf00      	nop
 8002320:	e000      	b.n	8002324 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8002322:	bf00      	nop

fail:
    return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3728      	adds	r7, #40	@ 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	000ffc00 	.word	0x000ffc00

08002334 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	@ 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	3301      	adds	r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	3301      	adds	r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	4413      	add	r3, r2
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b22      	cmp	r3, #34	@ 0x22
 8002370:	f040 8103 	bne.w	800257a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800237c:	e017      	b.n	80023ae <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b5c      	cmp	r3, #92	@ 0x5c
 8002384:	d110      	bne.n	80023a8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	461a      	mov	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	f080 80f1 	bcs.w	800257e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	3301      	adds	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
                input_end++;
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	3301      	adds	r3, #1
 80023a6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	3301      	adds	r3, #1
 80023ac:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a3a      	ldr	r2, [r7, #32]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d203      	bcs.n	80023c8 <parse_string+0x94>
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b22      	cmp	r3, #34	@ 0x22
 80023c6:	d1da      	bne.n	800237e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	f080 80d3 	bcs.w	8002582 <parse_string+0x24e>
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b22      	cmp	r3, #34	@ 0x22
 80023e2:	f040 80ce 	bne.w	8002582 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4413      	add	r3, r2
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	3201      	adds	r2, #1
 8002404:	4610      	mov	r0, r2
 8002406:	4798      	blx	r3
 8002408:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80ba 	beq.w	8002586 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8002416:	e094      	b.n	8002542 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b5c      	cmp	r3, #92	@ 0x5c
 800241e:	d008      	beq.n	8002432 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8002420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002422:	1c53      	adds	r3, r2, #1
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1c59      	adds	r1, r3, #1
 800242a:	60f9      	str	r1, [r7, #12]
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e087      	b.n	8002542 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8002432:	2302      	movs	r3, #2
 8002434:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8002436:	6a3a      	ldr	r2, [r7, #32]
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	f340 80a4 	ble.w	800258a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	3301      	adds	r3, #1
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b75      	cmp	r3, #117	@ 0x75
 800244a:	f300 80a0 	bgt.w	800258e <parse_string+0x25a>
 800244e:	2b5c      	cmp	r3, #92	@ 0x5c
 8002450:	da04      	bge.n	800245c <parse_string+0x128>
 8002452:	2b22      	cmp	r3, #34	@ 0x22
 8002454:	d05c      	beq.n	8002510 <parse_string+0x1dc>
 8002456:	2b2f      	cmp	r3, #47	@ 0x2f
 8002458:	d05a      	beq.n	8002510 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800245a:	e098      	b.n	800258e <parse_string+0x25a>
            switch (input_pointer[1])
 800245c:	3b5c      	subs	r3, #92	@ 0x5c
 800245e:	2b19      	cmp	r3, #25
 8002460:	f200 8095 	bhi.w	800258e <parse_string+0x25a>
 8002464:	a201      	add	r2, pc, #4	@ (adr r2, 800246c <parse_string+0x138>)
 8002466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246a:	bf00      	nop
 800246c:	08002511 	.word	0x08002511
 8002470:	0800258f 	.word	0x0800258f
 8002474:	0800258f 	.word	0x0800258f
 8002478:	0800258f 	.word	0x0800258f
 800247c:	0800258f 	.word	0x0800258f
 8002480:	0800258f 	.word	0x0800258f
 8002484:	080024d5 	.word	0x080024d5
 8002488:	0800258f 	.word	0x0800258f
 800248c:	0800258f 	.word	0x0800258f
 8002490:	0800258f 	.word	0x0800258f
 8002494:	080024e1 	.word	0x080024e1
 8002498:	0800258f 	.word	0x0800258f
 800249c:	0800258f 	.word	0x0800258f
 80024a0:	0800258f 	.word	0x0800258f
 80024a4:	0800258f 	.word	0x0800258f
 80024a8:	0800258f 	.word	0x0800258f
 80024ac:	0800258f 	.word	0x0800258f
 80024b0:	0800258f 	.word	0x0800258f
 80024b4:	080024ed 	.word	0x080024ed
 80024b8:	0800258f 	.word	0x0800258f
 80024bc:	0800258f 	.word	0x0800258f
 80024c0:	0800258f 	.word	0x0800258f
 80024c4:	080024f9 	.word	0x080024f9
 80024c8:	0800258f 	.word	0x0800258f
 80024cc:	08002505 	.word	0x08002505
 80024d0:	08002521 	.word	0x08002521
                    *output_pointer++ = '\b';
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	60fa      	str	r2, [r7, #12]
 80024da:	2208      	movs	r2, #8
 80024dc:	701a      	strb	r2, [r3, #0]
                    break;
 80024de:	e02c      	b.n	800253a <parse_string+0x206>
                    *output_pointer++ = '\f';
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60fa      	str	r2, [r7, #12]
 80024e6:	220c      	movs	r2, #12
 80024e8:	701a      	strb	r2, [r3, #0]
                    break;
 80024ea:	e026      	b.n	800253a <parse_string+0x206>
                    *output_pointer++ = '\n';
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	60fa      	str	r2, [r7, #12]
 80024f2:	220a      	movs	r2, #10
 80024f4:	701a      	strb	r2, [r3, #0]
                    break;
 80024f6:	e020      	b.n	800253a <parse_string+0x206>
                    *output_pointer++ = '\r';
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	60fa      	str	r2, [r7, #12]
 80024fe:	220d      	movs	r2, #13
 8002500:	701a      	strb	r2, [r3, #0]
                    break;
 8002502:	e01a      	b.n	800253a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	60fa      	str	r2, [r7, #12]
 800250a:	2209      	movs	r2, #9
 800250c:	701a      	strb	r2, [r3, #0]
                    break;
 800250e:	e014      	b.n	800253a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1c59      	adds	r1, r3, #1
 8002518:	60f9      	str	r1, [r7, #12]
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	701a      	strb	r2, [r3, #0]
                    break;
 800251e:	e00c      	b.n	800253a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	461a      	mov	r2, r3
 8002526:	6a39      	ldr	r1, [r7, #32]
 8002528:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800252a:	f7ff fe1b 	bl	8002164 <utf16_literal_to_utf8>
 800252e:	4603      	mov	r3, r0
 8002530:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8002532:	7dfb      	ldrb	r3, [r7, #23]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d02c      	beq.n	8002592 <parse_string+0x25e>
                    break;
 8002538:	bf00      	nop
            }
            input_pointer += sequence_length;
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800253e:	4413      	add	r3, r2
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8002542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	429a      	cmp	r2, r3
 8002548:	f4ff af66 	bcc.w	8002418 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2210      	movs	r2, #16
 8002556:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a3a      	ldr	r2, [r7, #32]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	461a      	mov	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	609a      	str	r2, [r3, #8]

    return true;
 8002576:	2301      	movs	r3, #1
 8002578:	e01e      	b.n	80025b8 <parse_string+0x284>
        goto fail;
 800257a:	bf00      	nop
 800257c:	e00a      	b.n	8002594 <parse_string+0x260>
                    goto fail;
 800257e:	bf00      	nop
 8002580:	e008      	b.n	8002594 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8002582:	bf00      	nop
 8002584:	e006      	b.n	8002594 <parse_string+0x260>
            goto fail; /* allocation failure */
 8002586:	bf00      	nop
 8002588:	e004      	b.n	8002594 <parse_string+0x260>
                goto fail;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <parse_string+0x260>
                    goto fail;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <parse_string+0x260>
                        goto fail;
 8002592:	bf00      	nop

fail:
    if (output != NULL)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	69f8      	ldr	r0, [r7, #28]
 80025a0:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	609a      	str	r2, [r3, #8]
    }

    return false;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3728      	adds	r7, #40	@ 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <print_string_ptr+0x28>
    {
        return false;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e110      	b.n	800280a <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d111      	bne.n	8002612 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80025ee:	2103      	movs	r1, #3
 80025f0:	6838      	ldr	r0, [r7, #0]
 80025f2:	f7ff fb79 	bl	8001ce8 <ensure>
 80025f6:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <print_string_ptr+0x42>
        {
            return false;
 80025fe:	2300      	movs	r3, #0
 8002600:	e103      	b.n	800280a <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4a83      	ldr	r2, [pc, #524]	@ (8002814 <print_string_ptr+0x254>)
 8002606:	8811      	ldrh	r1, [r2, #0]
 8002608:	7892      	ldrb	r2, [r2, #2]
 800260a:	8019      	strh	r1, [r3, #0]
 800260c:	709a      	strb	r2, [r3, #2]

        return true;
 800260e:	2301      	movs	r3, #1
 8002610:	e0fb      	b.n	800280a <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e024      	b.n	8002662 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b22      	cmp	r3, #34	@ 0x22
 800261e:	dc0f      	bgt.n	8002640 <print_string_ptr+0x80>
 8002620:	2b08      	cmp	r3, #8
 8002622:	db13      	blt.n	800264c <print_string_ptr+0x8c>
 8002624:	3b08      	subs	r3, #8
 8002626:	4a7c      	ldr	r2, [pc, #496]	@ (8002818 <print_string_ptr+0x258>)
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <print_string_ptr+0x84>
 800263e:	e005      	b.n	800264c <print_string_ptr+0x8c>
 8002640:	2b5c      	cmp	r3, #92	@ 0x5c
 8002642:	d103      	bne.n	800264c <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
                break;
 800264a:	e007      	b.n	800265c <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b1f      	cmp	r3, #31
 8002652:	d802      	bhi.n	800265a <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3305      	adds	r3, #5
 8002658:	617b      	str	r3, [r7, #20]
                }
                break;
 800265a:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	3301      	adds	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1d6      	bne.n	8002618 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	461a      	mov	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	4413      	add	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3303      	adds	r3, #3
 800267c:	4619      	mov	r1, r3
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	f7ff fb32 	bl	8001ce8 <ensure>
 8002684:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <print_string_ptr+0xd0>
    {
        return false;
 800268c:	2300      	movs	r3, #0
 800268e:	e0bc      	b.n	800280a <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d117      	bne.n	80026c6 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2222      	movs	r2, #34	@ 0x22
 800269a:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	3301      	adds	r3, #1
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f00b fe32 	bl	800e30e <memcpy>
        output[output_length + 1] = '\"';
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3301      	adds	r3, #1
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	2222      	movs	r2, #34	@ 0x22
 80026b4:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3302      	adds	r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]

        return true;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0a1      	b.n	800280a <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2222      	movs	r2, #34	@ 0x22
 80026ca:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	3301      	adds	r3, #1
 80026d0:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e086      	b.n	80027e6 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b1f      	cmp	r3, #31
 80026de:	d90c      	bls.n	80026fa <print_string_ptr+0x13a>
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b22      	cmp	r3, #34	@ 0x22
 80026e6:	d008      	beq.n	80026fa <print_string_ptr+0x13a>
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80026ee:	d004      	beq.n	80026fa <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e06f      	b.n	80027da <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	61ba      	str	r2, [r7, #24]
 8002700:	225c      	movs	r2, #92	@ 0x5c
 8002702:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b22      	cmp	r3, #34	@ 0x22
 800270a:	dc3d      	bgt.n	8002788 <print_string_ptr+0x1c8>
 800270c:	2b08      	cmp	r3, #8
 800270e:	db59      	blt.n	80027c4 <print_string_ptr+0x204>
 8002710:	3b08      	subs	r3, #8
 8002712:	2b1a      	cmp	r3, #26
 8002714:	d856      	bhi.n	80027c4 <print_string_ptr+0x204>
 8002716:	a201      	add	r2, pc, #4	@ (adr r2, 800271c <print_string_ptr+0x15c>)
 8002718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271c:	0800279d 	.word	0x0800279d
 8002720:	080027bd 	.word	0x080027bd
 8002724:	080027ad 	.word	0x080027ad
 8002728:	080027c5 	.word	0x080027c5
 800272c:	080027a5 	.word	0x080027a5
 8002730:	080027b5 	.word	0x080027b5
 8002734:	080027c5 	.word	0x080027c5
 8002738:	080027c5 	.word	0x080027c5
 800273c:	080027c5 	.word	0x080027c5
 8002740:	080027c5 	.word	0x080027c5
 8002744:	080027c5 	.word	0x080027c5
 8002748:	080027c5 	.word	0x080027c5
 800274c:	080027c5 	.word	0x080027c5
 8002750:	080027c5 	.word	0x080027c5
 8002754:	080027c5 	.word	0x080027c5
 8002758:	080027c5 	.word	0x080027c5
 800275c:	080027c5 	.word	0x080027c5
 8002760:	080027c5 	.word	0x080027c5
 8002764:	080027c5 	.word	0x080027c5
 8002768:	080027c5 	.word	0x080027c5
 800276c:	080027c5 	.word	0x080027c5
 8002770:	080027c5 	.word	0x080027c5
 8002774:	080027c5 	.word	0x080027c5
 8002778:	080027c5 	.word	0x080027c5
 800277c:	080027c5 	.word	0x080027c5
 8002780:	080027c5 	.word	0x080027c5
 8002784:	08002795 	.word	0x08002795
 8002788:	2b5c      	cmp	r3, #92	@ 0x5c
 800278a:	d11b      	bne.n	80027c4 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	225c      	movs	r2, #92	@ 0x5c
 8002790:	701a      	strb	r2, [r3, #0]
                    break;
 8002792:	e022      	b.n	80027da <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2222      	movs	r2, #34	@ 0x22
 8002798:	701a      	strb	r2, [r3, #0]
                    break;
 800279a:	e01e      	b.n	80027da <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2262      	movs	r2, #98	@ 0x62
 80027a0:	701a      	strb	r2, [r3, #0]
                    break;
 80027a2:	e01a      	b.n	80027da <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2266      	movs	r2, #102	@ 0x66
 80027a8:	701a      	strb	r2, [r3, #0]
                    break;
 80027aa:	e016      	b.n	80027da <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	226e      	movs	r2, #110	@ 0x6e
 80027b0:	701a      	strb	r2, [r3, #0]
                    break;
 80027b2:	e012      	b.n	80027da <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2272      	movs	r2, #114	@ 0x72
 80027b8:	701a      	strb	r2, [r3, #0]
                    break;
 80027ba:	e00e      	b.n	80027da <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2274      	movs	r2, #116	@ 0x74
 80027c0:	701a      	strb	r2, [r3, #0]
                    break;
 80027c2:	e00a      	b.n	80027da <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4914      	ldr	r1, [pc, #80]	@ (800281c <print_string_ptr+0x25c>)
 80027cc:	69b8      	ldr	r0, [r7, #24]
 80027ce:	f00b fc11 	bl	800dff4 <siprintf>
                    output_pointer += 4;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	3304      	adds	r3, #4
 80027d6:	61bb      	str	r3, [r7, #24]
                    break;
 80027d8:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	3301      	adds	r3, #1
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f47f af74 	bne.w	80026d8 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3301      	adds	r3, #1
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	2222      	movs	r2, #34	@ 0x22
 80027fa:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	3302      	adds	r3, #2
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]

    return true;
 8002808:	2301      	movs	r3, #1
}
 800280a:	4618      	mov	r0, r3
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	08011338 	.word	0x08011338
 8002818:	04000037 	.word	0x04000037
 800281c:	0801133c 	.word	0x0801133c

08002820 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fec5 	bl	80025c0 <print_string_ptr>
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <buffer_skip_whitespace+0x16>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	e02c      	b.n	80028b4 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <buffer_skip_whitespace+0x2c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	d306      	bcc.n	800287a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	e021      	b.n	80028b4 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <buffer_skip_whitespace+0x5c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	d207      	bcs.n	800289c <buffer_skip_whitespace+0x5c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4413      	add	r3, r2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b20      	cmp	r3, #32
 800289a:	d9e9      	bls.n	8002870 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d104      	bne.n	80028b2 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	1e5a      	subs	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80028b2:	687b      	ldr	r3, [r7, #4]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <skip_utf8_bom+0x1e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <skip_utf8_bom+0x1e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <skip_utf8_bom+0x22>
    {
        return NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	e01c      	b.n	800291c <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d018      	beq.n	800291a <skip_utf8_bom+0x5a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	1d1a      	adds	r2, r3, #4
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d211      	bcs.n	800291a <skip_utf8_bom+0x5a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4413      	add	r3, r2
 8002900:	2203      	movs	r2, #3
 8002902:	4908      	ldr	r1, [pc, #32]	@ (8002924 <skip_utf8_bom+0x64>)
 8002904:	4618      	mov	r0, r3
 8002906:	f00b fc0c 	bl	800e122 <strncmp>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	1cda      	adds	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800291a:	687b      	ldr	r3, [r7, #4]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	08011344 	.word	0x08011344

08002928 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	e00c      	b.n	8002958 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7fd fca6 	bl	8000290 <strlen>
 8002944:	4603      	mov	r3, r0
 8002946:	3301      	adds	r3, #1
 8002948:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	6979      	ldr	r1, [r7, #20]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f805 	bl	8002960 <cJSON_ParseWithLengthOpts>
 8002956:	4603      	mov	r3, r0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08e      	sub	sp, #56	@ 0x38
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800296e:	f107 0318 	add.w	r3, r7, #24
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	60da      	str	r2, [r3, #12]
 800297c:	611a      	str	r2, [r3, #16]
 800297e:	615a      	str	r2, [r3, #20]
 8002980:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8002986:	4b41      	ldr	r3, [pc, #260]	@ (8002a8c <cJSON_ParseWithLengthOpts+0x12c>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800298c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a8c <cJSON_ParseWithLengthOpts+0x12c>)
 800298e:	2200      	movs	r2, #0
 8002990:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d042      	beq.n	8002a1e <cJSON_ParseWithLengthOpts+0xbe>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03f      	beq.n	8002a1e <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80029aa:	4a39      	ldr	r2, [pc, #228]	@ (8002a90 <cJSON_ParseWithLengthOpts+0x130>)
 80029ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80029b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80029b6:	4836      	ldr	r0, [pc, #216]	@ (8002a90 <cJSON_ParseWithLengthOpts+0x130>)
 80029b8:	f7ff f862 	bl	8001a80 <cJSON_New_Item>
 80029bc:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 80029be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02e      	beq.n	8002a22 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80029c4:	f107 0318 	add.w	r3, r7, #24
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff79 	bl	80028c0 <skip_utf8_bom>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff35 	bl	8002840 <buffer_skip_whitespace>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4619      	mov	r1, r3
 80029da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80029dc:	f000 f8fc 	bl	8002bd8 <parse_value>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01f      	beq.n	8002a26 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00e      	beq.n	8002a0a <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80029ec:	f107 0318 	add.w	r3, r7, #24
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff25 	bl	8002840 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80029f6:	6a3a      	ldr	r2, [r7, #32]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d215      	bcs.n	8002a2a <cJSON_ParseWithLengthOpts+0xca>
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	4413      	add	r3, r2
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	441a      	add	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a1c:	e031      	b.n	8002a82 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002a1e:	bf00      	nop
 8002a20:	e004      	b.n	8002a2c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002a22:	bf00      	nop
 8002a24:	e002      	b.n	8002a2c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002a2a:	bf00      	nop

fail:
    if (item != NULL)
 8002a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002a32:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a34:	f7ff f83a 	bl	8001aac <cJSON_Delete>
    }

    if (value != NULL)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d020      	beq.n	8002a80 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8002a46:	6a3a      	ldr	r2, [r7, #32]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d202      	bcs.n	8002a54 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e005      	b.n	8002a60 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	441a      	add	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <cJSON_ParseWithLengthOpts+0x12c>)
 8002a72:	461a      	mov	r2, r3
 8002a74:	f107 0310 	add.w	r3, r7, #16
 8002a78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a7c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3738      	adds	r7, #56	@ 0x38
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000308 	.word	0x20000308
 8002a90:	20000000 	.word	0x20000000

08002a94 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ff41 	bl	8002928 <cJSON_ParseWithOpts>
 8002aa6:	4603      	mov	r3, r0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08e      	sub	sp, #56	@ 0x38
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 8002ac0:	f107 0310 	add.w	r3, r7, #16
 8002ac4:	2224      	movs	r2, #36	@ 0x24
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f00b fb22 	bl	800e112 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a38      	ldr	r2, [pc, #224]	@ (8002bb4 <print+0x104>)
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4798      	blx	r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8002ade:	4b35      	ldr	r3, [pc, #212]	@ (8002bb4 <print+0x104>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aee:	ca07      	ldmia	r2, {r0, r1, r2}
 8002af0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d040      	beq.n	8002b7c <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	4619      	mov	r1, r3
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f955 	bl	8002db0 <print_value>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d039      	beq.n	8002b80 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff f986 	bl	8001e22 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	6938      	ldr	r0, [r7, #16]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	3201      	adds	r2, #1
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4798      	blx	r3
 8002b2c:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d027      	beq.n	8002b84 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	e01e      	b.n	8002b78 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	3201      	adds	r2, #1
 8002b42:	4610      	mov	r0, r2
 8002b44:	4798      	blx	r3
 8002b46:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 8002b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01c      	beq.n	8002b88 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8002b4e:	6939      	ldr	r1, [r7, #16]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	4293      	cmp	r3, r2
 8002b58:	bf28      	it	cs
 8002b5a:	4613      	movcs	r3, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002b60:	f00b fbd5 	bl	800e30e <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b68:	4413      	add	r3, r2
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4610      	mov	r0, r2
 8002b76:	4798      	blx	r3
    }

    return printed;
 8002b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7a:	e016      	b.n	8002baa <print+0xfa>
        goto fail;
 8002b7c:	bf00      	nop
 8002b7e:	e004      	b.n	8002b8a <print+0xda>
        goto fail;
 8002b80:	bf00      	nop
 8002b82:	e002      	b.n	8002b8a <print+0xda>
            goto fail;
 8002b84:	bf00      	nop
 8002b86:	e000      	b.n	8002b8a <print+0xda>
            goto fail;
 8002b88:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4610      	mov	r0, r2
 8002b98:	4798      	blx	r3
    }

    if (printed != NULL)
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <print+0xf8>
    {
        hooks->deallocate(printed);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002ba6:	4798      	blx	r3
    }

    return NULL;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3738      	adds	r7, #56	@ 0x38
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	080113e4 	.word	0x080113e4

08002bb8 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8002bc0:	4a04      	ldr	r2, [pc, #16]	@ (8002bd4 <cJSON_PrintUnformatted+0x1c>)
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ff73 	bl	8002ab0 <print>
 8002bca:	4603      	mov	r3, r0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000000 	.word	0x20000000

08002bd8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <parse_value+0x18>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <parse_value+0x1c>
    {
        return false; /* no input */
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e0d2      	b.n	8002d9a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01d      	beq.n	8002c36 <parse_value+0x5e>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	1d1a      	adds	r2, r3, #4
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d816      	bhi.n	8002c36 <parse_value+0x5e>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4413      	add	r3, r2
 8002c12:	2204      	movs	r2, #4
 8002c14:	4963      	ldr	r1, [pc, #396]	@ (8002da4 <parse_value+0x1cc>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f00b fa83 	bl	800e122 <strncmp>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2204      	movs	r2, #4
 8002c26:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	1d1a      	adds	r2, r3, #4
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	609a      	str	r2, [r3, #8]
        return true;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0b1      	b.n	8002d9a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01d      	beq.n	8002c78 <parse_value+0xa0>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	1d5a      	adds	r2, r3, #5
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d816      	bhi.n	8002c78 <parse_value+0xa0>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4413      	add	r3, r2
 8002c54:	2205      	movs	r2, #5
 8002c56:	4954      	ldr	r1, [pc, #336]	@ (8002da8 <parse_value+0x1d0>)
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f00b fa62 	bl	800e122 <strncmp>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d109      	bne.n	8002c78 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	1d5a      	adds	r2, r3, #5
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	609a      	str	r2, [r3, #8]
        return true;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e090      	b.n	8002d9a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d020      	beq.n	8002cc0 <parse_value+0xe8>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	1d1a      	adds	r2, r3, #4
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d819      	bhi.n	8002cc0 <parse_value+0xe8>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4413      	add	r3, r2
 8002c96:	2204      	movs	r2, #4
 8002c98:	4944      	ldr	r1, [pc, #272]	@ (8002dac <parse_value+0x1d4>)
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f00b fa41 	bl	800e122 <strncmp>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10c      	bne.n	8002cc0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	1d1a      	adds	r2, r3, #4
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	609a      	str	r2, [r3, #8]
        return true;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e06c      	b.n	8002d9a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d013      	beq.n	8002cee <parse_value+0x116>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d20d      	bcs.n	8002cee <parse_value+0x116>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b22      	cmp	r3, #34	@ 0x22
 8002ce0:	d105      	bne.n	8002cee <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002ce2:	6839      	ldr	r1, [r7, #0]
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff fb25 	bl	8002334 <parse_string>
 8002cea:	4603      	mov	r3, r0
 8002cec:	e055      	b.n	8002d9a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d023      	beq.n	8002d3c <parse_value+0x164>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d21d      	bcs.n	8002d3c <parse_value+0x164>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4413      	add	r3, r2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b2d      	cmp	r3, #45	@ 0x2d
 8002d0e:	d00f      	beq.n	8002d30 <parse_value+0x158>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8002d1e:	d90d      	bls.n	8002d3c <parse_value+0x164>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4413      	add	r3, r2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b39      	cmp	r3, #57	@ 0x39
 8002d2e:	d805      	bhi.n	8002d3c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002d30:	6839      	ldr	r1, [r7, #0]
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe ff0c 	bl	8001b50 <parse_number>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	e02e      	b.n	8002d9a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d013      	beq.n	8002d6a <parse_value+0x192>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d20d      	bcs.n	8002d6a <parse_value+0x192>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	4413      	add	r3, r2
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b5b      	cmp	r3, #91	@ 0x5b
 8002d5c:	d105      	bne.n	8002d6a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f909 	bl	8002f78 <parse_array>
 8002d66:	4603      	mov	r3, r0
 8002d68:	e017      	b.n	8002d9a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <parse_value+0x1c0>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d20d      	bcs.n	8002d98 <parse_value+0x1c0>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4413      	add	r3, r2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b7b      	cmp	r3, #123	@ 0x7b
 8002d8a:	d105      	bne.n	8002d98 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002d8c:	6839      	ldr	r1, [r7, #0]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa3c 	bl	800320c <parse_object>
 8002d94:	4603      	mov	r3, r0
 8002d96:	e000      	b.n	8002d9a <parse_value+0x1c2>
    }

    return false;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	0801131c 	.word	0x0801131c
 8002da8:	08011348 	.word	0x08011348
 8002dac:	08011350 	.word	0x08011350

08002db0 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <print_value+0x1a>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <print_value+0x1e>
    {
        return false;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e0c9      	b.n	8002f62 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b80      	cmp	r3, #128	@ 0x80
 8002dd6:	f000 808e 	beq.w	8002ef6 <print_value+0x146>
 8002dda:	2b80      	cmp	r3, #128	@ 0x80
 8002ddc:	f300 80c0 	bgt.w	8002f60 <print_value+0x1b0>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	dc49      	bgt.n	8002e78 <print_value+0xc8>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f340 80bb 	ble.w	8002f60 <print_value+0x1b0>
 8002dea:	3b01      	subs	r3, #1
 8002dec:	2b1f      	cmp	r3, #31
 8002dee:	f200 80b7 	bhi.w	8002f60 <print_value+0x1b0>
 8002df2:	a201      	add	r2, pc, #4	@ (adr r2, 8002df8 <print_value+0x48>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002ea3 	.word	0x08002ea3
 8002dfc:	08002ec7 	.word	0x08002ec7
 8002e00:	08002f61 	.word	0x08002f61
 8002e04:	08002e7f 	.word	0x08002e7f
 8002e08:	08002f61 	.word	0x08002f61
 8002e0c:	08002f61 	.word	0x08002f61
 8002e10:	08002f61 	.word	0x08002f61
 8002e14:	08002eeb 	.word	0x08002eeb
 8002e18:	08002f61 	.word	0x08002f61
 8002e1c:	08002f61 	.word	0x08002f61
 8002e20:	08002f61 	.word	0x08002f61
 8002e24:	08002f61 	.word	0x08002f61
 8002e28:	08002f61 	.word	0x08002f61
 8002e2c:	08002f61 	.word	0x08002f61
 8002e30:	08002f61 	.word	0x08002f61
 8002e34:	08002f3d 	.word	0x08002f3d
 8002e38:	08002f61 	.word	0x08002f61
 8002e3c:	08002f61 	.word	0x08002f61
 8002e40:	08002f61 	.word	0x08002f61
 8002e44:	08002f61 	.word	0x08002f61
 8002e48:	08002f61 	.word	0x08002f61
 8002e4c:	08002f61 	.word	0x08002f61
 8002e50:	08002f61 	.word	0x08002f61
 8002e54:	08002f61 	.word	0x08002f61
 8002e58:	08002f61 	.word	0x08002f61
 8002e5c:	08002f61 	.word	0x08002f61
 8002e60:	08002f61 	.word	0x08002f61
 8002e64:	08002f61 	.word	0x08002f61
 8002e68:	08002f61 	.word	0x08002f61
 8002e6c:	08002f61 	.word	0x08002f61
 8002e70:	08002f61 	.word	0x08002f61
 8002e74:	08002f49 	.word	0x08002f49
 8002e78:	2b40      	cmp	r3, #64	@ 0x40
 8002e7a:	d06b      	beq.n	8002f54 <print_value+0x1a4>
 8002e7c:	e070      	b.n	8002f60 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8002e7e:	2105      	movs	r1, #5
 8002e80:	6838      	ldr	r0, [r7, #0]
 8002e82:	f7fe ff31 	bl	8001ce8 <ensure>
 8002e86:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <print_value+0xe2>
            {
                return false;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e067      	b.n	8002f62 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a35      	ldr	r2, [pc, #212]	@ (8002f6c <print_value+0x1bc>)
 8002e96:	6810      	ldr	r0, [r2, #0]
 8002e98:	6018      	str	r0, [r3, #0]
 8002e9a:	7912      	ldrb	r2, [r2, #4]
 8002e9c:	711a      	strb	r2, [r3, #4]
            return true;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e05f      	b.n	8002f62 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8002ea2:	2106      	movs	r1, #6
 8002ea4:	6838      	ldr	r0, [r7, #0]
 8002ea6:	f7fe ff1f 	bl	8001ce8 <ensure>
 8002eaa:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <print_value+0x106>
            {
                return false;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e055      	b.n	8002f62 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002f70 <print_value+0x1c0>)
 8002eba:	6810      	ldr	r0, [r2, #0]
 8002ebc:	6018      	str	r0, [r3, #0]
 8002ebe:	8892      	ldrh	r2, [r2, #4]
 8002ec0:	809a      	strh	r2, [r3, #4]
            return true;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e04d      	b.n	8002f62 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8002ec6:	2105      	movs	r1, #5
 8002ec8:	6838      	ldr	r0, [r7, #0]
 8002eca:	f7fe ff0d 	bl	8001ce8 <ensure>
 8002ece:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <print_value+0x12a>
            {
                return false;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e043      	b.n	8002f62 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a25      	ldr	r2, [pc, #148]	@ (8002f74 <print_value+0x1c4>)
 8002ede:	6810      	ldr	r0, [r2, #0]
 8002ee0:	6018      	str	r0, [r3, #0]
 8002ee2:	7912      	ldrb	r2, [r2, #4]
 8002ee4:	711a      	strb	r2, [r3, #4]
            return true;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e03b      	b.n	8002f62 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8002eea:	6839      	ldr	r1, [r7, #0]
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff f801 	bl	8001ef4 <print_number>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	e035      	b.n	8002f62 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <print_value+0x156>
            {
                return false;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e02d      	b.n	8002f62 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd f9c0 	bl	8000290 <strlen>
 8002f10:	4603      	mov	r3, r0
 8002f12:	3301      	adds	r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	6838      	ldr	r0, [r7, #0]
 8002f1a:	f7fe fee5 	bl	8001ce8 <ensure>
 8002f1e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <print_value+0x17a>
            {
                return false;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e01b      	b.n	8002f62 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4619      	mov	r1, r3
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f00b f9eb 	bl	800e30e <memcpy>
            return true;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e012      	b.n	8002f62 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fc6e 	bl	8002820 <print_string>
 8002f44:	4603      	mov	r3, r0
 8002f46:	e00c      	b.n	8002f62 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8002f48:	6839      	ldr	r1, [r7, #0]
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8d8 	bl	8003100 <print_array>
 8002f50:	4603      	mov	r3, r0
 8002f52:	e006      	b.n	8002f62 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8002f54:	6839      	ldr	r1, [r7, #0]
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fa57 	bl	800340a <print_object>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	e000      	b.n	8002f62 <print_value+0x1b2>

        default:
            return false;
 8002f60:	2300      	movs	r3, #0
    }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	0801131c 	.word	0x0801131c
 8002f70:	08011348 	.word	0x08011348
 8002f74:	08011350 	.word	0x08011350

08002f78 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f92:	d301      	bcc.n	8002f98 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002f94:	2300      	movs	r3, #0
 8002f96:	e0af      	b.n	80030f8 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4413      	add	r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b5b      	cmp	r3, #91	@ 0x5b
 8002fb0:	f040 8094 	bne.w	80030dc <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002fbe:	6838      	ldr	r0, [r7, #0]
 8002fc0:	f7ff fc3e 	bl	8002840 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <parse_array+0x6e>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d207      	bcs.n	8002fe6 <parse_array+0x6e>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b5d      	cmp	r3, #93	@ 0x5d
 8002fe4:	d061      	beq.n	80030aa <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <parse_array+0x80>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d305      	bcc.n	8003004 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	609a      	str	r2, [r3, #8]
        goto fail;
 8003002:	e072      	b.n	80030ea <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	1e5a      	subs	r2, r3, #1
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	3310      	adds	r3, #16
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fd34 	bl	8001a80 <cJSON_New_Item>
 8003018:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d05f      	beq.n	80030e0 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	e007      	b.n	8003040 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800304a:	6838      	ldr	r0, [r7, #0]
 800304c:	f7ff fbf8 	bl	8002840 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	6938      	ldr	r0, [r7, #16]
 8003054:	f7ff fdc0 	bl	8002bd8 <parse_value>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d042      	beq.n	80030e4 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800305e:	6838      	ldr	r0, [r7, #0]
 8003060:	f7ff fbee 	bl	8002840 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <parse_array+0x10e>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d207      	bcs.n	8003086 <parse_array+0x10e>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4413      	add	r3, r2
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b2c      	cmp	r3, #44	@ 0x2c
 8003084:	d0c3      	beq.n	800300e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d02d      	beq.n	80030e8 <parse_array+0x170>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d227      	bcs.n	80030e8 <parse_array+0x170>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4413      	add	r3, r2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b5d      	cmp	r3, #93	@ 0x5d
 80030a6:	d11f      	bne.n	80030e8 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80030a8:	e000      	b.n	80030ac <parse_array+0x134>
        goto success;
 80030aa:	bf00      	nop
    input_buffer->depth--;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	1e5a      	subs	r2, r3, #1
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <parse_array+0x14a>
        head->prev = current_item;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	60da      	str	r2, [r3, #12]
    item->child = head;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	609a      	str	r2, [r3, #8]

    return true;
 80030d8:	2301      	movs	r3, #1
 80030da:	e00d      	b.n	80030f8 <parse_array+0x180>
        goto fail;
 80030dc:	bf00      	nop
 80030de:	e004      	b.n	80030ea <parse_array+0x172>
            goto fail; /* allocation failure */
 80030e0:	bf00      	nop
 80030e2:	e002      	b.n	80030ea <parse_array+0x172>
            goto fail; /* failed to parse value */
 80030e4:	bf00      	nop
 80030e6:	e000      	b.n	80030ea <parse_array+0x172>
        goto fail; /* expected end of array */
 80030e8:	bf00      	nop

fail:
    if (head != NULL)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80030f0:	6978      	ldr	r0, [r7, #20]
 80030f2:	f7fe fcdb 	bl	8001aac <cJSON_Delete>
    }

    return false;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <print_array+0x22>
    {
        return false;
 800311e:	2300      	movs	r3, #0
 8003120:	e070      	b.n	8003204 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8003122:	2101      	movs	r1, #1
 8003124:	6838      	ldr	r0, [r7, #0]
 8003126:	f7fe fddf 	bl	8001ce8 <ensure>
 800312a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <print_array+0x36>
    {
        return false;
 8003132:	2300      	movs	r3, #0
 8003134:	e066      	b.n	8003204 <print_array+0x104>
    }

    *output_pointer = '[';
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	225b      	movs	r2, #91	@ 0x5b
 800313a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8003150:	e03d      	b.n	80031ce <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8003152:	6839      	ldr	r1, [r7, #0]
 8003154:	6938      	ldr	r0, [r7, #16]
 8003156:	f7ff fe2b 	bl	8002db0 <print_value>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <print_array+0x64>
        {
            return false;
 8003160:	2300      	movs	r3, #0
 8003162:	e04f      	b.n	8003204 <print_array+0x104>
        }
        update_offset(output_buffer);
 8003164:	6838      	ldr	r0, [r7, #0]
 8003166:	f7fe fe5c 	bl	8001e22 <update_offset>
        if (current_element->next)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d02a      	beq.n	80031c8 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <print_array+0x7e>
 800317a:	2302      	movs	r3, #2
 800317c:	e000      	b.n	8003180 <print_array+0x80>
 800317e:	2301      	movs	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3301      	adds	r3, #1
 8003186:	4619      	mov	r1, r3
 8003188:	6838      	ldr	r0, [r7, #0]
 800318a:	f7fe fdad 	bl	8001ce8 <ensure>
 800318e:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <print_array+0x9a>
            {
                return false;
 8003196:	2300      	movs	r3, #0
 8003198:	e034      	b.n	8003204 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	617a      	str	r2, [r7, #20]
 80031a0:	222c      	movs	r2, #44	@ 0x2c
 80031a2:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d004      	beq.n	80031b6 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	617a      	str	r2, [r7, #20]
 80031b2:	2220      	movs	r2, #32
 80031b4:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	441a      	add	r2, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1be      	bne.n	8003152 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80031d4:	2102      	movs	r1, #2
 80031d6:	6838      	ldr	r0, [r7, #0]
 80031d8:	f7fe fd86 	bl	8001ce8 <ensure>
 80031dc:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <print_array+0xe8>
    {
        return false;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e00d      	b.n	8003204 <print_array+0x104>
    }
    *output_pointer++ = ']';
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	617a      	str	r2, [r7, #20]
 80031ee:	225d      	movs	r2, #93	@ 0x5d
 80031f0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	1e5a      	subs	r2, r3, #1
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	60da      	str	r2, [r3, #12]

    return true;
 8003202:	2301      	movs	r3, #1
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003226:	d301      	bcc.n	800322c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8003228:	2300      	movs	r3, #0
 800322a:	e0ea      	b.n	8003402 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80d0 	beq.w	80033de <parse_object+0x1d2>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	f080 80c9 	bcs.w	80033de <parse_object+0x1d2>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4413      	add	r3, r2
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b7b      	cmp	r3, #123	@ 0x7b
 800325a:	f040 80c0 	bne.w	80033de <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8003268:	6838      	ldr	r0, [r7, #0]
 800326a:	f7ff fae9 	bl	8002840 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00e      	beq.n	8003292 <parse_object+0x86>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d208      	bcs.n	8003292 <parse_object+0x86>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4413      	add	r3, r2
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b7d      	cmp	r3, #125	@ 0x7d
 800328e:	f000 808d 	beq.w	80033ac <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <parse_object+0x98>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d305      	bcc.n	80032b0 <parse_object+0xa4>
    {
        input_buffer->offset--;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	1e5a      	subs	r2, r3, #1
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	609a      	str	r2, [r3, #8]
        goto fail;
 80032ae:	e0a1      	b.n	80033f4 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	1e5a      	subs	r2, r3, #1
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	3310      	adds	r3, #16
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fbde 	bl	8001a80 <cJSON_New_Item>
 80032c4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 808a 	beq.w	80033e2 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	e007      	b.n	80032ee <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80032f8:	6838      	ldr	r0, [r7, #0]
 80032fa:	f7ff faa1 	bl	8002840 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80032fe:	6839      	ldr	r1, [r7, #0]
 8003300:	6938      	ldr	r0, [r7, #16]
 8003302:	f7ff f817 	bl	8002334 <parse_string>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d06c      	beq.n	80033e6 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800330c:	6838      	ldr	r0, [r7, #0]
 800330e:	f7ff fa97 	bl	8002840 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d061      	beq.n	80033ea <parse_object+0x1de>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	429a      	cmp	r2, r3
 8003330:	d25b      	bcs.n	80033ea <parse_object+0x1de>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	4413      	add	r3, r2
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b3a      	cmp	r3, #58	@ 0x3a
 8003340:	d153      	bne.n	80033ea <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800334c:	6838      	ldr	r0, [r7, #0]
 800334e:	f7ff fa77 	bl	8002840 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8003352:	6839      	ldr	r1, [r7, #0]
 8003354:	6938      	ldr	r0, [r7, #16]
 8003356:	f7ff fc3f 	bl	8002bd8 <parse_value>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d046      	beq.n	80033ee <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8003360:	6838      	ldr	r0, [r7, #0]
 8003362:	f7ff fa6d 	bl	8002840 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <parse_object+0x17c>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d207      	bcs.n	8003388 <parse_object+0x17c>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4413      	add	r3, r2
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b2c      	cmp	r3, #44	@ 0x2c
 8003386:	d098      	beq.n	80032ba <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d031      	beq.n	80033f2 <parse_object+0x1e6>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	d22b      	bcs.n	80033f2 <parse_object+0x1e6>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	4413      	add	r3, r2
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b7d      	cmp	r3, #125	@ 0x7d
 80033a8:	d123      	bne.n	80033f2 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 80033aa:	e000      	b.n	80033ae <parse_object+0x1a2>
        goto success; /* empty object */
 80033ac:	bf00      	nop
    input_buffer->depth--;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	1e5a      	subs	r2, r3, #1
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <parse_object+0x1b8>
        head->prev = current_item;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2240      	movs	r2, #64	@ 0x40
 80033c8:	60da      	str	r2, [r3, #12]
    item->child = head;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	609a      	str	r2, [r3, #8]
    return true;
 80033da:	2301      	movs	r3, #1
 80033dc:	e011      	b.n	8003402 <parse_object+0x1f6>
        goto fail; /* not an object */
 80033de:	bf00      	nop
 80033e0:	e008      	b.n	80033f4 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 80033e2:	bf00      	nop
 80033e4:	e006      	b.n	80033f4 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 80033e6:	bf00      	nop
 80033e8:	e004      	b.n	80033f4 <parse_object+0x1e8>
            goto fail; /* invalid object */
 80033ea:	bf00      	nop
 80033ec:	e002      	b.n	80033f4 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 80033f2:	bf00      	nop

fail:
    if (head != NULL)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7fe fb56 	bl	8001aac <cJSON_Delete>
    }

    return false;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b088      	sub	sp, #32
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <print_object+0x22>
    {
        return false;
 8003428:	2300      	movs	r3, #0
 800342a:	e108      	b.n	800363e <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <print_object+0x2e>
 8003434:	2302      	movs	r3, #2
 8003436:	e000      	b.n	800343a <print_object+0x30>
 8003438:	2301      	movs	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3301      	adds	r3, #1
 8003440:	4619      	mov	r1, r3
 8003442:	6838      	ldr	r0, [r7, #0]
 8003444:	f7fe fc50 	bl	8001ce8 <ensure>
 8003448:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <print_object+0x4a>
    {
        return false;
 8003450:	2300      	movs	r3, #0
 8003452:	e0f4      	b.n	800363e <print_object+0x234>
    }

    *output_pointer++ = '{';
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	61fa      	str	r2, [r7, #28]
 800345a:	227b      	movs	r2, #123	@ 0x7b
 800345c:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	61fa      	str	r2, [r7, #28]
 8003476:	220a      	movs	r2, #10
 8003478:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	441a      	add	r2, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	609a      	str	r2, [r3, #8]

    while (current_item)
 8003486:	e0a0      	b.n	80035ca <print_object+0x1c0>
    {
        if (output_buffer->format)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d022      	beq.n	80034d6 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4619      	mov	r1, r3
 8003496:	6838      	ldr	r0, [r7, #0]
 8003498:	f7fe fc26 	bl	8001ce8 <ensure>
 800349c:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <print_object+0x9e>
            {
                return false;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e0ca      	b.n	800363e <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e007      	b.n	80034be <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	61fa      	str	r2, [r7, #28]
 80034b4:	2209      	movs	r2, #9
 80034b6:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3301      	adds	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3f2      	bcc.n	80034ae <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	441a      	add	r2, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff f86f 	bl	80025c0 <print_string_ptr>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <print_object+0xe2>
        {
            return false;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e0a8      	b.n	800363e <print_object+0x234>
        }
        update_offset(output_buffer);
 80034ec:	6838      	ldr	r0, [r7, #0]
 80034ee:	f7fe fc98 	bl	8001e22 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <print_object+0xf4>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e000      	b.n	8003500 <print_object+0xf6>
 80034fe:	2301      	movs	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	6838      	ldr	r0, [r7, #0]
 8003506:	f7fe fbef 	bl	8001ce8 <ensure>
 800350a:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <print_object+0x10c>
        {
            return false;
 8003512:	2300      	movs	r3, #0
 8003514:	e093      	b.n	800363e <print_object+0x234>
        }
        *output_pointer++ = ':';
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	61fa      	str	r2, [r7, #28]
 800351c:	223a      	movs	r2, #58	@ 0x3a
 800351e:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d004      	beq.n	8003532 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	61fa      	str	r2, [r7, #28]
 800352e:	2209      	movs	r2, #9
 8003530:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	441a      	add	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800353e:	6839      	ldr	r1, [r7, #0]
 8003540:	69b8      	ldr	r0, [r7, #24]
 8003542:	f7ff fc35 	bl	8002db0 <print_value>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <print_object+0x146>
        {
            return false;
 800354c:	2300      	movs	r3, #0
 800354e:	e076      	b.n	800363e <print_object+0x234>
        }
        update_offset(output_buffer);
 8003550:	6838      	ldr	r0, [r7, #0]
 8003552:	f7fe fc66 	bl	8001e22 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <print_object+0x158>
 800355e:	2201      	movs	r2, #1
 8003560:	e000      	b.n	8003564 <print_object+0x15a>
 8003562:	2200      	movs	r2, #0
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <print_object+0x166>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <print_object+0x168>
 8003570:	2300      	movs	r3, #0
 8003572:	4413      	add	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3301      	adds	r3, #1
 800357a:	4619      	mov	r1, r3
 800357c:	6838      	ldr	r0, [r7, #0]
 800357e:	f7fe fbb3 	bl	8001ce8 <ensure>
 8003582:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <print_object+0x184>
        {
            return false;
 800358a:	2300      	movs	r3, #0
 800358c:	e057      	b.n	800363e <print_object+0x234>
        }
        if (current_item->next)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	61fa      	str	r2, [r7, #28]
 800359c:	222c      	movs	r2, #44	@ 0x2c
 800359e:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	61fa      	str	r2, [r7, #28]
 80035ae:	220a      	movs	r2, #10
 80035b0:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	441a      	add	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f47f af5b 	bne.w	8003488 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <print_object+0x1d8>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	3301      	adds	r3, #1
 80035e0:	e000      	b.n	80035e4 <print_object+0x1da>
 80035e2:	2302      	movs	r3, #2
 80035e4:	4619      	mov	r1, r3
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f7fe fb7e 	bl	8001ce8 <ensure>
 80035ec:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <print_object+0x1ee>
    {
        return false;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e022      	b.n	800363e <print_object+0x234>
    }
    if (output_buffer->format)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d010      	beq.n	8003622 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	e007      	b.n	8003616 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	61fa      	str	r2, [r7, #28]
 800360c:	2209      	movs	r2, #9
 800360e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	3301      	adds	r3, #1
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	3b01      	subs	r3, #1
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	429a      	cmp	r2, r3
 8003620:	d3f1      	bcc.n	8003606 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	61fa      	str	r2, [r7, #28]
 8003628:	227d      	movs	r2, #125	@ 0x7d
 800362a:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	1e5a      	subs	r2, r3, #1
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	60da      	str	r2, [r3, #12]

    return true;
 800363c:	2301      	movs	r3, #1
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <cJSON_GetArraySize>:

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <cJSON_GetArraySize+0x1a>
    {
        return 0;
 800365c:	2300      	movs	r3, #0
 800365e:	e00d      	b.n	800367c <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 8003666:	e005      	b.n	8003674 <cJSON_GetArraySize+0x2e>
    {
        size++;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	3301      	adds	r3, #1
 800366c:	60bb      	str	r3, [r7, #8]
        child = child->next;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f6      	bne.n	8003668 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 800367a:	68bb      	ldr	r3, [r7, #8]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <get_array_item+0x18>
    {
        return NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	e010      	b.n	80036c2 <get_array_item+0x3a>
    }

    current_child = array->child;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80036a6:	e005      	b.n	80036b4 <get_array_item+0x2c>
    {
        index--;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <get_array_item+0x38>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f3      	bne.n	80036a8 <get_array_item+0x20>
    }

    return current_child;
 80036c0:	68fb      	ldr	r3, [r7, #12]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
    if (index < 0)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	da01      	bge.n	80036e2 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	e005      	b.n	80036ee <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ffce 	bl	8003688 <get_array_item>
 80036ec:	4603      	mov	r3, r0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <get_object_item+0x1c>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <get_object_item+0x20>
    {
        return NULL;
 8003712:	2300      	movs	r3, #0
 8003714:	e033      	b.n	800377e <get_object_item+0x88>
    }

    current_element = object->child;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d017      	beq.n	8003752 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003722:	e002      	b.n	800372a <get_object_item+0x34>
        {
            current_element = current_element->next;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01c      	beq.n	800376a <get_object_item+0x74>
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d018      	beq.n	800376a <get_object_item+0x74>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4619      	mov	r1, r3
 800373e:	68b8      	ldr	r0, [r7, #8]
 8003740:	f7fc fd46 	bl	80001d0 <strcmp>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1ec      	bne.n	8003724 <get_object_item+0x2e>
 800374a:	e00e      	b.n	800376a <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <get_object_item+0x74>
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4619      	mov	r1, r3
 800375e:	68b8      	ldr	r0, [r7, #8]
 8003760:	f7fe f8b6 	bl	80018d0 <case_insensitive_strcmp>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <get_object_item+0x82>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <get_object_item+0x86>
        return NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <get_object_item+0x88>
    }

    return current_element;
 800377c:	697b      	ldr	r3, [r7, #20]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8003790:	2200      	movs	r2, #0
 8003792:	6839      	ldr	r1, [r7, #0]
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ffae 	bl	80036f6 <get_object_item>
 800379a:	4603      	mov	r3, r0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	605a      	str	r2, [r3, #4]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <add_item_to_array+0x22>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <add_item_to_array+0x22>
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d101      	bne.n	80037ec <add_item_to_array+0x26>
    {
        return false;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e01e      	b.n	800382a <add_item_to_array+0x64>
    }

    child = array->child;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	609a      	str	r2, [r3, #8]
        item->prev = item;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00d      	b.n	8003828 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	6839      	ldr	r1, [r7, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff ffc2 	bl	80037a4 <suffix_object>
            array->child->prev = item;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8003828:	2301      	movs	r3, #1
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 800383c:	6839      	ldr	r1, [r7, #0]
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ffc1 	bl	80037c6 <add_item_to_array>
 8003844:	4603      	mov	r3, r0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8003856:	687b      	ldr	r3, [r7, #4]
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d009      	beq.n	8003894 <add_item_to_object+0x30>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <add_item_to_object+0x30>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <add_item_to_object+0x30>
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d101      	bne.n	8003898 <add_item_to_object+0x34>
    {
        return false;
 8003894:	2300      	movs	r3, #0
 8003896:	e036      	b.n	8003906 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800389e:	68b8      	ldr	r0, [r7, #8]
 80038a0:	f7ff ffd5 	bl	800384e <cast_away_const>
 80038a4:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	e00e      	b.n	80038d0 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80038b2:	6839      	ldr	r1, [r7, #0]
 80038b4:	68b8      	ldr	r0, [r7, #8]
 80038b6:	f7fe f877 	bl	80019a8 <cJSON_strdup>
 80038ba:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <add_item_to_object+0x62>
        {
            return false;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e01f      	b.n	8003906 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038ce:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <add_item_to_object+0x8c>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6a12      	ldr	r2, [r2, #32]
 80038ec:	4610      	mov	r0, r2
 80038ee:	4798      	blx	r3
    }

    item->string = new_key;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff ff61 	bl	80037c6 <add_item_to_array>
 8003904:	4603      	mov	r3, r0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 800391c:	2300      	movs	r3, #0
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <cJSON_AddItemToObject+0x28>)
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff ff9c 	bl	8003864 <add_item_to_object>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000000 	.word	0x20000000
 800393c:	00000000 	.word	0x00000000

08003940 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800394a:	481f      	ldr	r0, [pc, #124]	@ (80039c8 <cJSON_CreateNumber+0x88>)
 800394c:	f7fe f898 	bl	8001a80 <cJSON_New_Item>
 8003950:	60f8      	str	r0, [r7, #12]
    if(item)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02c      	beq.n	80039b2 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2208      	movs	r2, #8
 800395c:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003964:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8003968:	a315      	add	r3, pc, #84	@ (adr r3, 80039c0 <cJSON_CreateNumber+0x80>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003972:	f7fd f8d7 	bl	8000b24 <__aeabi_dcmpge>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8003982:	615a      	str	r2, [r3, #20]
 8003984:	e015      	b.n	80039b2 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	4b10      	ldr	r3, [pc, #64]	@ (80039cc <cJSON_CreateNumber+0x8c>)
 800398c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003990:	f7fd f8be 	bl	8000b10 <__aeabi_dcmple>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80039a0:	615a      	str	r2, [r3, #20]
 80039a2:	e006      	b.n	80039b2 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 80039a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039a8:	f7fd f8e6 	bl	8000b78 <__aeabi_d2iz>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 80039b2:	68fb      	ldr	r3, [r7, #12]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	f3af 8000 	nop.w
 80039c0:	ffc00000 	.word	0xffc00000
 80039c4:	41dfffff 	.word	0x41dfffff
 80039c8:	20000000 	.word	0x20000000
 80039cc:	c1e00000 	.word	0xc1e00000

080039d0 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80039d6:	4807      	ldr	r0, [pc, #28]	@ (80039f4 <cJSON_CreateArray+0x24>)
 80039d8:	f7fe f852 	bl	8001a80 <cJSON_New_Item>
 80039dc:	6078      	str	r0, [r7, #4]
    if(item)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	60da      	str	r2, [r3, #12]
    }

    return item;
 80039ea:	687b      	ldr	r3, [r7, #4]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000000 	.word	0x20000000

080039f8 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80039fe:	4807      	ldr	r0, [pc, #28]	@ (8003a1c <cJSON_CreateObject+0x24>)
 8003a00:	f7fe f83e 	bl	8001a80 <cJSON_New_Item>
 8003a04:	6078      	str	r0, [r7, #4]
    if (item)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2240      	movs	r2, #64	@ 0x40
 8003a10:	60da      	str	r2, [r3, #12]
    }

    return item;
 8003a12:	687b      	ldr	r3, [r7, #4]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000000 	.word	0x20000000

08003a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b0aa      	sub	sp, #168	@ 0xa8
 8003a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a26:	f000 ff67 	bl	80048f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a2a:	f000 fabd 	bl	8003fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a2e:	f000 fb83 	bl	8004138 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8003a32:	f007 fed5 	bl	800b7e0 <MX_USB_DEVICE_Init>
  MX_UART5_Init();
 8003a36:	f000 fb55 	bl	80040e4 <MX_UART5_Init>
  MX_SPI2_Init();
 8003a3a:	f000 fb1d 	bl	8004078 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // MODULE SETTINGS ----------------------------------------------
  	myLoRa = newLoRa();
 8003a3e:	4c23      	ldr	r4, [pc, #140]	@ (8003acc <main+0xac>)
 8003a40:	463b      	mov	r3, r7
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd fade 	bl	8001004 <newLoRa>
 8003a48:	4625      	mov	r5, r4
 8003a4a:	463c      	mov	r4, r7
 8003a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003a58:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  	myLoRa.hSPIx                 = &hspi2;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <main+0xac>)
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad0 <main+0xb0>)
 8003a60:	619a      	str	r2, [r3, #24]
  	myLoRa.CS_port               = LoRa_NSS_GPIO_Port;
 8003a62:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <main+0xac>)
 8003a64:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad4 <main+0xb4>)
 8003a66:	601a      	str	r2, [r3, #0]
  	myLoRa.CS_pin                = LoRa_NSS_Pin;
 8003a68:	4b18      	ldr	r3, [pc, #96]	@ (8003acc <main+0xac>)
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	809a      	strh	r2, [r3, #4]
  	myLoRa.reset_port            = LoRa_RS_GPIO_Port;
 8003a6e:	4b17      	ldr	r3, [pc, #92]	@ (8003acc <main+0xac>)
 8003a70:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <main+0xb4>)
 8003a72:	609a      	str	r2, [r3, #8]
  	myLoRa.reset_pin             = LoRa_RS_Pin;
 8003a74:	4b15      	ldr	r3, [pc, #84]	@ (8003acc <main+0xac>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	819a      	strh	r2, [r3, #12]
  	myLoRa.DIO0_port			 = LoRa_DIO0_GPIO_Port;
 8003a7a:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <main+0xac>)
 8003a7c:	4a16      	ldr	r2, [pc, #88]	@ (8003ad8 <main+0xb8>)
 8003a7e:	611a      	str	r2, [r3, #16]
  	myLoRa.DIO0_pin				 = LoRa_DIO0_Pin;
 8003a80:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <main+0xac>)
 8003a82:	2210      	movs	r2, #16
 8003a84:	829a      	strh	r2, [r3, #20]

  	myLoRa.frequency             = 433;		     			// default = 433 MHz
 8003a86:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <main+0xac>)
 8003a88:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8003a8c:	621a      	str	r2, [r3, #32]
  	myLoRa.spredingFactor        = SF_7;					// default = SF_7
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <main+0xac>)
 8003a90:	2207      	movs	r2, #7
 8003a92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  	myLoRa.bandWidth			 = BW_125KHz;			    // default = BW_125KHz
 8003a96:	4b0d      	ldr	r3, [pc, #52]	@ (8003acc <main+0xac>)
 8003a98:	2207      	movs	r2, #7
 8003a9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  	myLoRa.crcRate				 = CR_4_5;					// default = CR_4_5
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <main+0xac>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  	myLoRa.power			     = POWER_17db;				// default = 20db
 8003aa6:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <main+0xac>)
 8003aa8:	22fc      	movs	r2, #252	@ 0xfc
 8003aaa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  	myLoRa.overCurrentProtection = 120; 					// default = 100 mA
 8003aae:	4b07      	ldr	r3, [pc, #28]	@ (8003acc <main+0xac>)
 8003ab0:	2278      	movs	r2, #120	@ 0x78
 8003ab2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  	myLoRa.preamble				 = 10;		  				// default = 8;
 8003ab6:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <main+0xac>)
 8003ab8:	220a      	movs	r2, #10
 8003aba:	851a      	strh	r2, [r3, #40]	@ 0x28

  	LoRa_setSyncWord(&myLoRa, 0x23);
 8003abc:	2123      	movs	r1, #35	@ 0x23
 8003abe:	4803      	ldr	r0, [pc, #12]	@ (8003acc <main+0xac>)
 8003ac0:	f7fd fcef 	bl	80014a2 <LoRa_setSyncWord>
  	LoRa_reset(&myLoRa);
 8003ac4:	4801      	ldr	r0, [pc, #4]	@ (8003acc <main+0xac>)
 8003ac6:	f7fd fac6 	bl	8001056 <LoRa_reset>
  	while(LoRa_init(&myLoRa) != LORA_OK){
 8003aca:	e00f      	b.n	8003aec <main+0xcc>
 8003acc:	200003b0 	.word	0x200003b0
 8003ad0:	20000310 	.word	0x20000310
 8003ad4:	40020400 	.word	0x40020400
 8003ad8:	40020800 	.word	0x40020800
  		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8003adc:	2120      	movs	r1, #32
 8003ade:	48e0      	ldr	r0, [pc, #896]	@ (8003e60 <main+0x440>)
 8003ae0:	f001 fa67 	bl	8004fb2 <HAL_GPIO_TogglePin>
  		CDC_Transmit_FS(waitBuf, sizeof(waitBuf));
 8003ae4:	211a      	movs	r1, #26
 8003ae6:	48df      	ldr	r0, [pc, #892]	@ (8003e64 <main+0x444>)
 8003ae8:	f007 ff66 	bl	800b9b8 <CDC_Transmit_FS>
  	while(LoRa_init(&myLoRa) != LORA_OK){
 8003aec:	48de      	ldr	r0, [pc, #888]	@ (8003e68 <main+0x448>)
 8003aee:	f7fd fe48 	bl	8001782 <LoRa_init>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2bc8      	cmp	r3, #200	@ 0xc8
 8003af6:	d1f1      	bne.n	8003adc <main+0xbc>
  	}

  	// START CONTINUOUS RECEIVING -----------------------------------
  	LoRa_startReceiving(&myLoRa);
 8003af8:	48db      	ldr	r0, [pc, #876]	@ (8003e68 <main+0x448>)
 8003afa:	f7fd fdc6 	bl	800168a <LoRa_startReceiving>

	//-----------------Initialize JSON------------------------------------
	cJSON_Hooks hooks = {mymalloc,free};
 8003afe:	4adb      	ldr	r2, [pc, #876]	@ (8003e6c <main+0x44c>)
 8003b00:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b08:	e883 0003 	stmia.w	r3, {r0, r1}
	cJSON_InitHooks(&hooks);
 8003b0c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd ff71 	bl	80019f8 <cJSON_InitHooks>
	//--------------------------------------------------------------------
	HAL_Delay(10000);
 8003b16:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003b1a:	f000 ff5f 	bl	80049dc <HAL_Delay>

	uint32_t current = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  packet data;

	  CLEAR(read_data_bluetooth);
 8003b24:	2280      	movs	r2, #128	@ 0x80
 8003b26:	2100      	movs	r1, #0
 8003b28:	48d1      	ldr	r0, [pc, #836]	@ (8003e70 <main+0x450>)
 8003b2a:	f00a faf2 	bl	800e112 <memset>
	  CLEAR(read_data_lora);
 8003b2e:	2280      	movs	r2, #128	@ 0x80
 8003b30:	2100      	movs	r1, #0
 8003b32:	48d0      	ldr	r0, [pc, #832]	@ (8003e74 <main+0x454>)
 8003b34:	f00a faed 	bl	800e112 <memset>

	  if(check == 0){
 8003b38:	4bcf      	ldr	r3, [pc, #828]	@ (8003e78 <main+0x458>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f040 81f8 	bne.w	8003f32 <main+0x512>
		  // LORA RECEIVING DATA - - - - - - - - - - - - - - - - - - - - - - - -
		  	  if(LoRa_receive(&myLoRa, read_data_lora, 128) > 0){
 8003b42:	2280      	movs	r2, #128	@ 0x80
 8003b44:	49cb      	ldr	r1, [pc, #812]	@ (8003e74 <main+0x454>)
 8003b46:	48c8      	ldr	r0, [pc, #800]	@ (8003e68 <main+0x448>)
 8003b48:	f7fd fdab 	bl	80016a2 <LoRa_receive>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <main+0x14a>
		  		  RSSI_lora = LoRa_getRSSI(&myLoRa);
 8003b52:	48c5      	ldr	r0, [pc, #788]	@ (8003e68 <main+0x448>)
 8003b54:	f7fd fe05 	bl	8001762 <LoRa_getRSSI>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4ac8      	ldr	r2, [pc, #800]	@ (8003e7c <main+0x45c>)
 8003b5c:	6013      	str	r3, [r2, #0]
		  		  parseJS((char*)read_data_lora, &data);
 8003b5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003b62:	4619      	mov	r1, r3
 8003b64:	48c3      	ldr	r0, [pc, #780]	@ (8003e74 <main+0x454>)
 8003b66:	f000 fb89 	bl	800427c <parseJS>
		  	  }

		  	  if(HAL_UART_Receive(&huart5, read_data_bluetooth, 20, 1000) == HAL_OK){
 8003b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b6e:	2214      	movs	r2, #20
 8003b70:	49bf      	ldr	r1, [pc, #764]	@ (8003e70 <main+0x450>)
 8003b72:	48c3      	ldr	r0, [pc, #780]	@ (8003e80 <main+0x460>)
 8003b74:	f003 ff52 	bl	8007a1c <HAL_UART_Receive>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d15b      	bne.n	8003c36 <main+0x216>
		  		  if (strlen((char*)read_data_bluetooth) > 0){
 8003b7e:	4bbc      	ldr	r3, [pc, #752]	@ (8003e70 <main+0x450>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d046      	beq.n	8003c14 <main+0x1f4>
		  			  char *token = strtok((char*)read_data_bluetooth, ",");
 8003b86:	49bf      	ldr	r1, [pc, #764]	@ (8003e84 <main+0x464>)
 8003b88:	48b9      	ldr	r0, [pc, #740]	@ (8003e70 <main+0x450>)
 8003b8a:	f00a fadd 	bl	800e148 <strtok>
 8003b8e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		  			  if (token != NULL) data.nodeBluetooth.timeBLT = atoi(token);
 8003b92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <main+0x186>
 8003b9a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003b9e:	f008 fb67 	bl	800c270 <atoi>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	663b      	str	r3, [r7, #96]	@ 0x60
		  			  token = strtok(NULL, ",");
 8003ba6:	49b7      	ldr	r1, [pc, #732]	@ (8003e84 <main+0x464>)
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f00a facd 	bl	800e148 <strtok>
 8003bae:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		  			  if (token != NULL) data.nodeBluetooth.energyBLT = strtod(token, NULL);
 8003bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <main+0x1b0>
 8003bba:	2100      	movs	r1, #0
 8003bbc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003bc0:	f009 fa58 	bl	800d074 <strtod>
 8003bc4:	eeb0 7a40 	vmov.f32	s14, s0
 8003bc8:	eef0 7a60 	vmov.f32	s15, s1
 8003bcc:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
		  			  token = strtok(NULL, ",");
 8003bd0:	49ac      	ldr	r1, [pc, #688]	@ (8003e84 <main+0x464>)
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f00a fab8 	bl	800e148 <strtok>
 8003bd8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		  			  if (token != NULL) data.nodeBluetooth.disData = atoi(token);
 8003bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <main+0x1d4>
 8003be4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003be8:	f008 fb42 	bl	800c270 <atoi>
 8003bec:	4603      	mov	r3, r0
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		  			  token = strtok(NULL, ",");
 8003bf4:	49a3      	ldr	r1, [pc, #652]	@ (8003e84 <main+0x464>)
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f00a faa6 	bl	800e148 <strtok>
 8003bfc:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		  			  if (token != NULL) data.nodeBluetooth.RSSI_bluet = atoi(token);
 8003c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <main+0x1f4>
 8003c08:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003c0c:	f008 fb30 	bl	800c270 <atoi>
 8003c10:	4603      	mov	r3, r0
 8003c12:	677b      	str	r3, [r7, #116]	@ 0x74
		  		  }
		  		  if (!isdigit(data.nodeBluetooth.timeBLT)) CLEAR(data.nodeBluetooth);
 8003c14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c16:	3301      	adds	r3, #1
 8003c18:	4a9b      	ldr	r2, [pc, #620]	@ (8003e88 <main+0x468>)
 8003c1a:	4413      	add	r3, r2
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <main+0x216>
 8003c26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c2a:	3330      	adds	r3, #48	@ 0x30
 8003c2c:	2218      	movs	r2, #24
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4618      	mov	r0, r3
 8003c32:	f00a fa6e 	bl	800e112 <memset>
		  	  }

		  	if (HAL_GetTick() - current >= 1000){
 8003c36:	f000 fec5 	bl	80049c4 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c46:	f0c0 819c 	bcc.w	8003f82 <main+0x562>
		  	  cJSON *root = cJSON_CreateObject(); /*create JSON string root*/
 8003c4a:	f7ff fed5 	bl	80039f8 <cJSON_CreateObject>
 8003c4e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
		  	  	  cJSON *rootNode = cJSON_CreateArray();
 8003c52:	f7ff febd 	bl	80039d0 <cJSON_CreateArray>
 8003c56:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		  	  	  cJSON_AddItemToObject(root, "root", rootNode);
 8003c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c5e:	498b      	ldr	r1, [pc, #556]	@ (8003e8c <main+0x46c>)
 8003c60:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003c64:	f7ff fe54 	bl	8003910 <cJSON_AddItemToObject>
		  	  	  cJSON_AddItemToArray(rootNode, cJSON_CreateNumber(data.energyRoot));
 8003c68:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8003c70:	eef0 0a67 	vmov.f32	s1, s15
 8003c74:	f7ff fe64 	bl	8003940 <cJSON_CreateNumber>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003c80:	f7ff fdd7 	bl	8003832 <cJSON_AddItemToArray>
		  	  	  cJSON_AddItemToArray(rootNode, cJSON_CreateNumber(data.timeRoot));
 8003c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fc5c 	bl	8000544 <__aeabi_i2d>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	ec43 2b10 	vmov	d0, r2, r3
 8003c94:	f7ff fe54 	bl	8003940 <cJSON_CreateNumber>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003ca0:	f7ff fdc7 	bl	8003832 <cJSON_AddItemToArray>
		  	  	  cJSON_AddItemToArray(rootNode, cJSON_CreateNumber(RSSI_lora));
 8003ca4:	4b75      	ldr	r3, [pc, #468]	@ (8003e7c <main+0x45c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fc4b 	bl	8000544 <__aeabi_i2d>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	ec43 2b10 	vmov	d0, r2, r3
 8003cb6:	f7ff fe43 	bl	8003940 <cJSON_CreateNumber>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003cc2:	f7ff fdb6 	bl	8003832 <cJSON_AddItemToArray>

		  	  	  cJSON *defaultNode = cJSON_CreateArray();
 8003cc6:	f7ff fe83 	bl	80039d0 <cJSON_CreateArray>
 8003cca:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		  	  	  cJSON_AddItemToObject(root, "node2", defaultNode);
 8003cce:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003cd2:	496f      	ldr	r1, [pc, #444]	@ (8003e90 <main+0x470>)
 8003cd4:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003cd8:	f7ff fe1a 	bl	8003910 <cJSON_AddItemToObject>
		  	  	  cJSON_AddItemToArray(defaultNode, cJSON_CreateNumber(data.node2.motor2));
 8003cdc:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc fc1f 	bl	8000524 <__aeabi_ui2d>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	ec43 2b10 	vmov	d0, r2, r3
 8003cee:	f7ff fe27 	bl	8003940 <cJSON_CreateNumber>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003cfa:	f7ff fd9a 	bl	8003832 <cJSON_AddItemToArray>
		  	  	  cJSON_AddItemToArray(defaultNode, cJSON_CreateNumber(data.node2.obs2));
 8003cfe:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fc0e 	bl	8000524 <__aeabi_ui2d>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	ec43 2b10 	vmov	d0, r2, r3
 8003d10:	f7ff fe16 	bl	8003940 <cJSON_CreateNumber>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4619      	mov	r1, r3
 8003d18:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003d1c:	f7ff fd89 	bl	8003832 <cJSON_AddItemToArray>
		  	  	  cJSON_AddItemToArray(defaultNode, cJSON_CreateNumber(data.node2.time2));
 8003d20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fc0e 	bl	8000544 <__aeabi_i2d>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	ec43 2b10 	vmov	d0, r2, r3
 8003d30:	f7ff fe06 	bl	8003940 <cJSON_CreateNumber>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4619      	mov	r1, r3
 8003d38:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003d3c:	f7ff fd79 	bl	8003832 <cJSON_AddItemToArray>
		  	  	  cJSON_AddItemToArray(defaultNode, cJSON_CreateNumber(data.node2.ack2));
 8003d40:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fc fbed 	bl	8000524 <__aeabi_ui2d>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	ec43 2b10 	vmov	d0, r2, r3
 8003d52:	f7ff fdf5 	bl	8003940 <cJSON_CreateNumber>
 8003d56:	4603      	mov	r3, r0
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003d5e:	f7ff fd68 	bl	8003832 <cJSON_AddItemToArray>

		  	  	  cJSON *sendOnlyNode = cJSON_CreateArray();
 8003d62:	f7ff fe35 	bl	80039d0 <cJSON_CreateArray>
 8003d66:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
		  	  	  cJSON_AddItemToObject(root, "node1", sendOnlyNode);
 8003d6a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003d6e:	4949      	ldr	r1, [pc, #292]	@ (8003e94 <main+0x474>)
 8003d70:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003d74:	f7ff fdcc 	bl	8003910 <cJSON_AddItemToObject>
		  	  	  cJSON_AddItemToArray(sendOnlyNode, cJSON_CreateNumber(data.node1.temp1));
 8003d78:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8003d7c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d80:	eef0 0a67 	vmov.f32	s1, s15
 8003d84:	f7ff fddc 	bl	8003940 <cJSON_CreateNumber>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003d90:	f7ff fd4f 	bl	8003832 <cJSON_AddItemToArray>
		  	  	  cJSON_AddItemToArray(sendOnlyNode, cJSON_CreateNumber(data.node1.hum1));
 8003d94:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003d98:	eeb0 0a47 	vmov.f32	s0, s14
 8003d9c:	eef0 0a67 	vmov.f32	s1, s15
 8003da0:	f7ff fdce 	bl	8003940 <cJSON_CreateNumber>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4619      	mov	r1, r3
 8003da8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003dac:	f7ff fd41 	bl	8003832 <cJSON_AddItemToArray>
		  	  	  cJSON_AddItemToArray(sendOnlyNode, cJSON_CreateNumber(data.node1.time1));
 8003db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fbc6 	bl	8000544 <__aeabi_i2d>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	ec43 2b10 	vmov	d0, r2, r3
 8003dc0:	f7ff fdbe 	bl	8003940 <cJSON_CreateNumber>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003dcc:	f7ff fd31 	bl	8003832 <cJSON_AddItemToArray>
		  	  	  cJSON_AddItemToArray(sendOnlyNode, cJSON_CreateNumber(data.node1.ack1));
 8003dd0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fc fba5 	bl	8000524 <__aeabi_ui2d>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	ec43 2b10 	vmov	d0, r2, r3
 8003de2:	f7ff fdad 	bl	8003940 <cJSON_CreateNumber>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4619      	mov	r1, r3
 8003dea:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003dee:	f7ff fd20 	bl	8003832 <cJSON_AddItemToArray>

		  	  	  cJSON *bluetoothNode = cJSON_CreateArray();
 8003df2:	f7ff fded 	bl	80039d0 <cJSON_CreateArray>
 8003df6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		  	  	  cJSON_AddItemToObject(root, "bltN", bluetoothNode);
 8003dfa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003dfe:	4926      	ldr	r1, [pc, #152]	@ (8003e98 <main+0x478>)
 8003e00:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003e04:	f7ff fd84 	bl	8003910 <cJSON_AddItemToObject>
		  	  	  cJSON_AddItemToArray(bluetoothNode,cJSON_CreateNumber(data.nodeBluetooth.energyBLT));
 8003e08:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8003e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8003e10:	eef0 0a67 	vmov.f32	s1, s15
 8003e14:	f7ff fd94 	bl	8003940 <cJSON_CreateNumber>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003e20:	f7ff fd07 	bl	8003832 <cJSON_AddItemToArray>
		  	      cJSON_AddItemToArray(bluetoothNode,cJSON_CreateNumber(data.nodeBluetooth.timeBLT));
 8003e24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc fb8c 	bl	8000544 <__aeabi_i2d>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	ec43 2b10 	vmov	d0, r2, r3
 8003e34:	f7ff fd84 	bl	8003940 <cJSON_CreateNumber>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003e40:	f7ff fcf7 	bl	8003832 <cJSON_AddItemToArray>
		  	      cJSON_AddItemToArray(bluetoothNode,cJSON_CreateNumber(data.nodeBluetooth.disData));
 8003e44:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fc fb6b 	bl	8000524 <__aeabi_ui2d>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	ec43 2b10 	vmov	d0, r2, r3
 8003e56:	f7ff fd73 	bl	8003940 <cJSON_CreateNumber>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	e01d      	b.n	8003e9c <main+0x47c>
 8003e60:	40020800 	.word	0x40020800
 8003e64:	2000000c 	.word	0x2000000c
 8003e68:	200003b0 	.word	0x200003b0
 8003e6c:	08011380 	.word	0x08011380
 8003e70:	2000045c 	.word	0x2000045c
 8003e74:	200003dc 	.word	0x200003dc
 8003e78:	200017e4 	.word	0x200017e4
 8003e7c:	200004dc 	.word	0x200004dc
 8003e80:	20000368 	.word	0x20000368
 8003e84:	08011358 	.word	0x08011358
 8003e88:	08011458 	.word	0x08011458
 8003e8c:	0801135c 	.word	0x0801135c
 8003e90:	08011364 	.word	0x08011364
 8003e94:	0801136c 	.word	0x0801136c
 8003e98:	08011374 	.word	0x08011374
 8003e9c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003ea0:	f7ff fcc7 	bl	8003832 <cJSON_AddItemToArray>
		  	      cJSON_AddItemToArray(bluetoothNode,cJSON_CreateNumber(data.nodeBluetooth.RSSI_bluet));
 8003ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc fb4c 	bl	8000544 <__aeabi_i2d>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	ec43 2b10 	vmov	d0, r2, r3
 8003eb4:	f7ff fd44 	bl	8003940 <cJSON_CreateNumber>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003ec0:	f7ff fcb7 	bl	8003832 <cJSON_AddItemToArray>

			  char *ret = cJSON_PrintUnformatted(root);
 8003ec4:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003ec8:	f7fe fe76 	bl	8002bb8 <cJSON_PrintUnformatted>
 8003ecc:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			  strcat(ret, "\r\n");
 8003ed0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003ed4:	f7fc f9dc 	bl	8000290 <strlen>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ee0:	4413      	add	r3, r2
 8003ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f8c <main+0x56c>)
 8003ee4:	8811      	ldrh	r1, [r2, #0]
 8003ee6:	7892      	ldrb	r2, [r2, #2]
 8003ee8:	8019      	strh	r1, [r3, #0]
 8003eea:	709a      	strb	r2, [r3, #2]
			  uint8_t result = CDC_Transmit_FS((uint8_t*)ret, strlen(ret));
 8003eec:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003ef0:	f7fc f9ce 	bl	8000290 <strlen>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	4619      	mov	r1, r3
 8003efa:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003efe:	f007 fd5b 	bl	800b9b8 <CDC_Transmit_FS>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			  if(result == USBD_OK) HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8003f08:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <main+0x4f8>
 8003f10:	2104      	movs	r1, #4
 8003f12:	481f      	ldr	r0, [pc, #124]	@ (8003f90 <main+0x570>)
 8003f14:	f001 f84d 	bl	8004fb2 <HAL_GPIO_TogglePin>
			  cJSON_Delete(root);
 8003f18:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003f1c:	f7fd fdc6 	bl	8001aac <cJSON_Delete>
			  free(ret);
 8003f20:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003f24:	f008 f9b0 	bl	800c288 <free>

			  current = HAL_GetTick();
 8003f28:	f000 fd4c 	bl	80049c4 <HAL_GetTick>
 8003f2c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 8003f30:	e027      	b.n	8003f82 <main+0x562>
		  }
	  } else if (check == 1) {
 8003f32:	4b18      	ldr	r3, [pc, #96]	@ (8003f94 <main+0x574>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d123      	bne.n	8003f82 <main+0x562>
		    LoRa_transmit(&myLoRa, (uint8_t*)ReceivedData, dataSize, 100);
 8003f3a:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <main+0x578>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	2364      	movs	r3, #100	@ 0x64
 8003f42:	4916      	ldr	r1, [pc, #88]	@ (8003f9c <main+0x57c>)
 8003f44:	4816      	ldr	r0, [pc, #88]	@ (8003fa0 <main+0x580>)
 8003f46:	f7fd fb48 	bl	80015da <LoRa_transmit>
//		  	HAL_UART_Transmit(&huart5, (uint8_t*)ReceivedData, dataSize, 100);
		  	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8003f4a:	2120      	movs	r1, #32
 8003f4c:	4815      	ldr	r0, [pc, #84]	@ (8003fa4 <main+0x584>)
 8003f4e:	f001 f830 	bl	8004fb2 <HAL_GPIO_TogglePin>

		  	for(int i = 0; i < dataSize; i++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f58:	e00a      	b.n	8003f70 <main+0x550>
			{
				ReceivedData[i] = 0;
 8003f5a:	4a10      	ldr	r2, [pc, #64]	@ (8003f9c <main+0x57c>)
 8003f5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f60:	4413      	add	r3, r2
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
		  	for(int i = 0; i < dataSize; i++)
 8003f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f70:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003f74:	4b08      	ldr	r3, [pc, #32]	@ (8003f98 <main+0x578>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d3ee      	bcc.n	8003f5a <main+0x53a>
			}
			check = 0;
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <main+0x574>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(200);
 8003f82:	20c8      	movs	r0, #200	@ 0xc8
 8003f84:	f000 fd2a 	bl	80049dc <HAL_Delay>
  {
 8003f88:	e5cc      	b.n	8003b24 <main+0x104>
 8003f8a:	bf00      	nop
 8003f8c:	0801137c 	.word	0x0801137c
 8003f90:	40020400 	.word	0x40020400
 8003f94:	200017e4 	.word	0x200017e4
 8003f98:	200017e0 	.word	0x200017e0
 8003f9c:	200017c8 	.word	0x200017c8
 8003fa0:	200003b0 	.word	0x200003b0
 8003fa4:	40020800 	.word	0x40020800

08003fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b094      	sub	sp, #80	@ 0x50
 8003fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fae:	f107 0320 	add.w	r3, r7, #32
 8003fb2:	2230      	movs	r2, #48	@ 0x30
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f00a f8ab 	bl	800e112 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fbc:	f107 030c 	add.w	r3, r7, #12
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	4b27      	ldr	r3, [pc, #156]	@ (8004070 <SystemClock_Config+0xc8>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	4a26      	ldr	r2, [pc, #152]	@ (8004070 <SystemClock_Config+0xc8>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fdc:	4b24      	ldr	r3, [pc, #144]	@ (8004070 <SystemClock_Config+0xc8>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	4b21      	ldr	r3, [pc, #132]	@ (8004074 <SystemClock_Config+0xcc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a20      	ldr	r2, [pc, #128]	@ (8004074 <SystemClock_Config+0xcc>)
 8003ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8004074 <SystemClock_Config+0xcc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004004:	2301      	movs	r3, #1
 8004006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004008:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800400e:	2302      	movs	r3, #2
 8004010:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004012:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004018:	2304      	movs	r3, #4
 800401a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800401c:	2348      	movs	r3, #72	@ 0x48
 800401e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004020:	2302      	movs	r3, #2
 8004022:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004024:	2303      	movs	r3, #3
 8004026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004028:	f107 0320 	add.w	r3, r7, #32
 800402c:	4618      	mov	r0, r3
 800402e:	f002 fa2d 	bl	800648c <HAL_RCC_OscConfig>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004038:	f000 fa24 	bl	8004484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800403c:	230f      	movs	r3, #15
 800403e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004040:	2302      	movs	r3, #2
 8004042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800404c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004052:	f107 030c 	add.w	r3, r7, #12
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f002 fc8f 	bl	800697c <HAL_RCC_ClockConfig>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004064:	f000 fa0e 	bl	8004484 <Error_Handler>
  }
}
 8004068:	bf00      	nop
 800406a:	3750      	adds	r7, #80	@ 0x50
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40023800 	.word	0x40023800
 8004074:	40007000 	.word	0x40007000

08004078 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800407c:	4b17      	ldr	r3, [pc, #92]	@ (80040dc <MX_SPI2_Init+0x64>)
 800407e:	4a18      	ldr	r2, [pc, #96]	@ (80040e0 <MX_SPI2_Init+0x68>)
 8004080:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004082:	4b16      	ldr	r3, [pc, #88]	@ (80040dc <MX_SPI2_Init+0x64>)
 8004084:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004088:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800408a:	4b14      	ldr	r3, [pc, #80]	@ (80040dc <MX_SPI2_Init+0x64>)
 800408c:	2200      	movs	r2, #0
 800408e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004090:	4b12      	ldr	r3, [pc, #72]	@ (80040dc <MX_SPI2_Init+0x64>)
 8004092:	2200      	movs	r2, #0
 8004094:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004096:	4b11      	ldr	r3, [pc, #68]	@ (80040dc <MX_SPI2_Init+0x64>)
 8004098:	2200      	movs	r2, #0
 800409a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800409c:	4b0f      	ldr	r3, [pc, #60]	@ (80040dc <MX_SPI2_Init+0x64>)
 800409e:	2200      	movs	r2, #0
 80040a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040a2:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <MX_SPI2_Init+0x64>)
 80040a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80040aa:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <MX_SPI2_Init+0x64>)
 80040ac:	2208      	movs	r2, #8
 80040ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040b0:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <MX_SPI2_Init+0x64>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040b6:	4b09      	ldr	r3, [pc, #36]	@ (80040dc <MX_SPI2_Init+0x64>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040bc:	4b07      	ldr	r3, [pc, #28]	@ (80040dc <MX_SPI2_Init+0x64>)
 80040be:	2200      	movs	r2, #0
 80040c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80040c2:	4b06      	ldr	r3, [pc, #24]	@ (80040dc <MX_SPI2_Init+0x64>)
 80040c4:	220a      	movs	r2, #10
 80040c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040c8:	4804      	ldr	r0, [pc, #16]	@ (80040dc <MX_SPI2_Init+0x64>)
 80040ca:	f002 fe77 	bl	8006dbc <HAL_SPI_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80040d4:	f000 f9d6 	bl	8004484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000310 	.word	0x20000310
 80040e0:	40003800 	.word	0x40003800

080040e4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80040e8:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <MX_UART5_Init+0x4c>)
 80040ea:	4a12      	ldr	r2, [pc, #72]	@ (8004134 <MX_UART5_Init+0x50>)
 80040ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <MX_UART5_Init+0x4c>)
 80040f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80040f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80040f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004130 <MX_UART5_Init+0x4c>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80040fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <MX_UART5_Init+0x4c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004102:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <MX_UART5_Init+0x4c>)
 8004104:	2200      	movs	r2, #0
 8004106:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004108:	4b09      	ldr	r3, [pc, #36]	@ (8004130 <MX_UART5_Init+0x4c>)
 800410a:	220c      	movs	r2, #12
 800410c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800410e:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <MX_UART5_Init+0x4c>)
 8004110:	2200      	movs	r2, #0
 8004112:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004114:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <MX_UART5_Init+0x4c>)
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800411a:	4805      	ldr	r0, [pc, #20]	@ (8004130 <MX_UART5_Init+0x4c>)
 800411c:	f003 fc2e 	bl	800797c <HAL_UART_Init>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004126:	f000 f9ad 	bl	8004484 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000368 	.word	0x20000368
 8004134:	40005000 	.word	0x40005000

08004138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	@ 0x28
 800413c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	4b46      	ldr	r3, [pc, #280]	@ (800426c <MX_GPIO_Init+0x134>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	4a45      	ldr	r2, [pc, #276]	@ (800426c <MX_GPIO_Init+0x134>)
 8004158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800415c:	6313      	str	r3, [r2, #48]	@ 0x30
 800415e:	4b43      	ldr	r3, [pc, #268]	@ (800426c <MX_GPIO_Init+0x134>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b3f      	ldr	r3, [pc, #252]	@ (800426c <MX_GPIO_Init+0x134>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	4a3e      	ldr	r2, [pc, #248]	@ (800426c <MX_GPIO_Init+0x134>)
 8004174:	f043 0304 	orr.w	r3, r3, #4
 8004178:	6313      	str	r3, [r2, #48]	@ 0x30
 800417a:	4b3c      	ldr	r3, [pc, #240]	@ (800426c <MX_GPIO_Init+0x134>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	4b38      	ldr	r3, [pc, #224]	@ (800426c <MX_GPIO_Init+0x134>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	4a37      	ldr	r2, [pc, #220]	@ (800426c <MX_GPIO_Init+0x134>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6313      	str	r3, [r2, #48]	@ 0x30
 8004196:	4b35      	ldr	r3, [pc, #212]	@ (800426c <MX_GPIO_Init+0x134>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	4b31      	ldr	r3, [pc, #196]	@ (800426c <MX_GPIO_Init+0x134>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	4a30      	ldr	r2, [pc, #192]	@ (800426c <MX_GPIO_Init+0x134>)
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b2:	4b2e      	ldr	r3, [pc, #184]	@ (800426c <MX_GPIO_Init+0x134>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4b2a      	ldr	r3, [pc, #168]	@ (800426c <MX_GPIO_Init+0x134>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	4a29      	ldr	r2, [pc, #164]	@ (800426c <MX_GPIO_Init+0x134>)
 80041c8:	f043 0308 	orr.w	r3, r3, #8
 80041cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ce:	4b27      	ldr	r3, [pc, #156]	@ (800426c <MX_GPIO_Init+0x134>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80041da:	2200      	movs	r2, #0
 80041dc:	2120      	movs	r1, #32
 80041de:	4824      	ldr	r0, [pc, #144]	@ (8004270 <MX_GPIO_Init+0x138>)
 80041e0:	f000 fece 	bl	8004f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LoRa_RS_Pin|LoRa_NSS_Pin, GPIO_PIN_SET);
 80041e4:	2201      	movs	r2, #1
 80041e6:	2103      	movs	r1, #3
 80041e8:	4822      	ldr	r0, [pc, #136]	@ (8004274 <MX_GPIO_Init+0x13c>)
 80041ea:	f000 fec9 	bl	8004f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80041ee:	2200      	movs	r2, #0
 80041f0:	2104      	movs	r1, #4
 80041f2:	4820      	ldr	r0, [pc, #128]	@ (8004274 <MX_GPIO_Init+0x13c>)
 80041f4:	f000 fec4 	bl	8004f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY2_Pin KEY3_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY3_Pin;
 80041f8:	2307      	movs	r3, #7
 80041fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	4619      	mov	r1, r3
 800420a:	481b      	ldr	r0, [pc, #108]	@ (8004278 <MX_GPIO_Init+0x140>)
 800420c:	f000 fd1c 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRa_DIO0_Pin */
  GPIO_InitStruct.Pin = LoRa_DIO0_Pin;
 8004210:	2310      	movs	r3, #16
 8004212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004214:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LoRa_DIO0_GPIO_Port, &GPIO_InitStruct);
 800421e:	f107 0314 	add.w	r3, r7, #20
 8004222:	4619      	mov	r1, r3
 8004224:	4812      	ldr	r0, [pc, #72]	@ (8004270 <MX_GPIO_Init+0x138>)
 8004226:	f000 fd0f 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800422a:	2320      	movs	r3, #32
 800422c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800422e:	2301      	movs	r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004236:	2300      	movs	r3, #0
 8004238:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800423a:	f107 0314 	add.w	r3, r7, #20
 800423e:	4619      	mov	r1, r3
 8004240:	480b      	ldr	r0, [pc, #44]	@ (8004270 <MX_GPIO_Init+0x138>)
 8004242:	f000 fd01 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_RS_Pin LoRa_NSS_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = LoRa_RS_Pin|LoRa_NSS_Pin|BLUE_LED_Pin;
 8004246:	2307      	movs	r3, #7
 8004248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800424a:	2301      	movs	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004252:	2300      	movs	r3, #0
 8004254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004256:	f107 0314 	add.w	r3, r7, #20
 800425a:	4619      	mov	r1, r3
 800425c:	4805      	ldr	r0, [pc, #20]	@ (8004274 <MX_GPIO_Init+0x13c>)
 800425e:	f000 fcf3 	bl	8004c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004262:	bf00      	nop
 8004264:	3728      	adds	r7, #40	@ 0x28
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800
 8004270:	40020800 	.word	0x40020800
 8004274:	40020400 	.word	0x40020400
 8004278:	40020000 	.word	0x40020000

0800427c <parseJS>:

/* USER CODE BEGIN 4 */

void parseJS(char *jsonString, packet *data)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08e      	sub	sp, #56	@ 0x38
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
	cJSON *root = cJSON_Parse(jsonString);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fe fc04 	bl	8002a94 <cJSON_Parse>
 800428c:	6338      	str	r0, [r7, #48]	@ 0x30

	cJSON *name = cJSON_GetObjectItem(root,"name");
 800428e:	4973      	ldr	r1, [pc, #460]	@ (800445c <parseJS+0x1e0>)
 8004290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004292:	f7ff fa78 	bl	8003786 <cJSON_GetObjectItem>
 8004296:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if(!name) return;
 8004298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80da 	beq.w	8004454 <parseJS+0x1d8>

	//get data RootNode
	cJSON *rootData = cJSON_GetObjectItem(root, "root");
 80042a0:	496f      	ldr	r1, [pc, #444]	@ (8004460 <parseJS+0x1e4>)
 80042a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042a4:	f7ff fa6f 	bl	8003786 <cJSON_GetObjectItem>
 80042a8:	62b8      	str	r0, [r7, #40]	@ 0x28
	if(rootData->type == cJSON_Array){
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d12e      	bne.n	8004310 <parseJS+0x94>
		uint8_t i,size = cJSON_GetArraySize(rootData);
 80042b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042b4:	f7ff f9c7 	bl	8003646 <cJSON_GetArraySize>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		for(i=0;i<size;i++){
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80042c4:	e01e      	b.n	8004304 <parseJS+0x88>
			cJSON *dat = cJSON_GetArrayItem(rootData,i);
 80042c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80042ca:	4619      	mov	r1, r3
 80042cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042ce:	f7ff f9fe 	bl	80036ce <cJSON_GetArrayItem>
 80042d2:	6238      	str	r0, [r7, #32]
			switch(i){
 80042d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <parseJS+0x66>
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d005      	beq.n	80042ec <parseJS+0x70>
			default: break;
 80042e0:	e00b      	b.n	80042fa <parseJS+0x7e>
			case 0:
				data->timeRoot = dat->valueint;
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	609a      	str	r2, [r3, #8]
				break;
 80042ea:	e006      	b.n	80042fa <parseJS+0x7e>
			case 1:
				data->energyRoot = dat->valuedouble;
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 80042f8:	bf00      	nop
		for(i=0;i<size;i++){
 80042fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80042fe:	3301      	adds	r3, #1
 8004300:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004304:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8004308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800430c:	429a      	cmp	r2, r3
 800430e:	d3da      	bcc.n	80042c6 <parseJS+0x4a>
			}
		}
	}

	//get data node1
	cJSON *node1 = cJSON_GetObjectItem(root, "node1");
 8004310:	4954      	ldr	r1, [pc, #336]	@ (8004464 <parseJS+0x1e8>)
 8004312:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004314:	f7ff fa37 	bl	8003786 <cJSON_GetObjectItem>
 8004318:	61f8      	str	r0, [r7, #28]
	if(node1->type == cJSON_Array){
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2b20      	cmp	r3, #32
 8004320:	d143      	bne.n	80043aa <parseJS+0x12e>
		uint8_t i,size = cJSON_GetArraySize(node1);
 8004322:	69f8      	ldr	r0, [r7, #28]
 8004324:	f7ff f98f 	bl	8003646 <cJSON_GetArraySize>
 8004328:	4603      	mov	r3, r0
 800432a:	76fb      	strb	r3, [r7, #27]
		for(i=0;i<size;i++){
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8004332:	e035      	b.n	80043a0 <parseJS+0x124>
			cJSON *dat = cJSON_GetArrayItem(node1,i);
 8004334:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004338:	4619      	mov	r1, r3
 800433a:	69f8      	ldr	r0, [r7, #28]
 800433c:	f7ff f9c7 	bl	80036ce <cJSON_GetArrayItem>
 8004340:	6178      	str	r0, [r7, #20]
			switch(i){
 8004342:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004346:	2b03      	cmp	r3, #3
 8004348:	d824      	bhi.n	8004394 <parseJS+0x118>
 800434a:	a201      	add	r2, pc, #4	@ (adr r2, 8004350 <parseJS+0xd4>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	08004361 	.word	0x08004361
 8004354:	0800436f 	.word	0x0800436f
 8004358:	0800437d 	.word	0x0800437d
 800435c:	08004387 	.word	0x08004387
			default: break;
			case 0:
				data->node1.hum1 = dat->valuedouble;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004366:	6839      	ldr	r1, [r7, #0]
 8004368:	e9c1 2306 	strd	r2, r3, [r1, #24]
				break;
 800436c:	e013      	b.n	8004396 <parseJS+0x11a>
			case 1:
				data->node1.temp1 = dat->valuedouble;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	e9c1 2304 	strd	r2, r3, [r1, #16]
				break;
 800437a:	e00c      	b.n	8004396 <parseJS+0x11a>
			case 2:
				data->node1.time1 = dat->valueint;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	625a      	str	r2, [r3, #36]	@ 0x24
				break;
 8004384:	e007      	b.n	8004396 <parseJS+0x11a>
			case 3:
				data->node1.ack1 = dat->valueint;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f883 2020 	strb.w	r2, [r3, #32]
				break;
 8004392:	e000      	b.n	8004396 <parseJS+0x11a>
			default: break;
 8004394:	bf00      	nop
		for(i=0;i<size;i++){
 8004396:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800439a:	3301      	adds	r3, #1
 800439c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80043a0:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80043a4:	7efb      	ldrb	r3, [r7, #27]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d3c4      	bcc.n	8004334 <parseJS+0xb8>
			}
		}
	}

	//get data node2
	cJSON *node2 = cJSON_GetObjectItem(root, "node2");
 80043aa:	492f      	ldr	r1, [pc, #188]	@ (8004468 <parseJS+0x1ec>)
 80043ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043ae:	f7ff f9ea 	bl	8003786 <cJSON_GetObjectItem>
 80043b2:	6138      	str	r0, [r7, #16]
	if(node2->type == cJSON_Array){
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d144      	bne.n	8004446 <parseJS+0x1ca>
		uint8_t i,size = cJSON_GetArraySize(node2);
 80043bc:	6938      	ldr	r0, [r7, #16]
 80043be:	f7ff f942 	bl	8003646 <cJSON_GetArraySize>
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]
		for(i=0;i<size;i++){
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80043cc:	e036      	b.n	800443c <parseJS+0x1c0>
			cJSON *dat = cJSON_GetArrayItem(node2,i);
 80043ce:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80043d2:	4619      	mov	r1, r3
 80043d4:	6938      	ldr	r0, [r7, #16]
 80043d6:	f7ff f97a 	bl	80036ce <cJSON_GetArrayItem>
 80043da:	60b8      	str	r0, [r7, #8]
			switch (i){
 80043dc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d825      	bhi.n	8004430 <parseJS+0x1b4>
 80043e4:	a201      	add	r2, pc, #4	@ (adr r2, 80043ec <parseJS+0x170>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	08004423 	.word	0x08004423
 80043f4:	08004419 	.word	0x08004419
 80043f8:	0800440b 	.word	0x0800440b
				default: break;
				case 0:
					data->node2.motor2 = dat->valueint;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004408:	e013      	b.n	8004432 <parseJS+0x1b6>
				case 3:
					data->node2.ack2 = dat->valueint;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
					break;
 8004416:	e00c      	b.n	8004432 <parseJS+0x1b6>
				case 2:
					data->node2.time2 = dat->valueint;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	62da      	str	r2, [r3, #44]	@ 0x2c
					break;
 8004420:	e007      	b.n	8004432 <parseJS+0x1b6>
				case 1:
					data->node2.obs2 = dat->valueint;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800442e:	e000      	b.n	8004432 <parseJS+0x1b6>
				default: break;
 8004430:	bf00      	nop
		for(i=0;i<size;i++){
 8004432:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004436:	3301      	adds	r3, #1
 8004438:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800443c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	429a      	cmp	r2, r3
 8004444:	d3c3      	bcc.n	80043ce <parseJS+0x152>
			}
		}
	}

	if(!root) cJSON_Delete(root);
 8004446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <parseJS+0x1da>
 800444c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800444e:	f7fd fb2d 	bl	8001aac <cJSON_Delete>
 8004452:	e000      	b.n	8004456 <parseJS+0x1da>
	if(!name) return;
 8004454:	bf00      	nop
}
 8004456:	3738      	adds	r7, #56	@ 0x38
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	08011388 	.word	0x08011388
 8004460:	0801135c 	.word	0x0801135c
 8004464:	0801136c 	.word	0x0801136c
 8004468:	08011364 	.word	0x08011364

0800446c <mymalloc>:

void *mymalloc(unsigned int size)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	return malloc(size);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f007 feff 	bl	800c278 <malloc>
 800447a:	4603      	mov	r3, r0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004488:	b672      	cpsid	i
}
 800448a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <Error_Handler+0x8>

08004490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	4b10      	ldr	r3, [pc, #64]	@ (80044dc <HAL_MspInit+0x4c>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	4a0f      	ldr	r2, [pc, #60]	@ (80044dc <HAL_MspInit+0x4c>)
 80044a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044a6:	4b0d      	ldr	r3, [pc, #52]	@ (80044dc <HAL_MspInit+0x4c>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	4b09      	ldr	r3, [pc, #36]	@ (80044dc <HAL_MspInit+0x4c>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	4a08      	ldr	r2, [pc, #32]	@ (80044dc <HAL_MspInit+0x4c>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <HAL_MspInit+0x4c>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800

080044e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	@ 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e8:	f107 0314 	add.w	r3, r7, #20
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	60da      	str	r2, [r3, #12]
 80044f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a28      	ldr	r2, [pc, #160]	@ (80045a0 <HAL_SPI_MspInit+0xc0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d14a      	bne.n	8004598 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	4b27      	ldr	r3, [pc, #156]	@ (80045a4 <HAL_SPI_MspInit+0xc4>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	4a26      	ldr	r2, [pc, #152]	@ (80045a4 <HAL_SPI_MspInit+0xc4>)
 800450c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004510:	6413      	str	r3, [r2, #64]	@ 0x40
 8004512:	4b24      	ldr	r3, [pc, #144]	@ (80045a4 <HAL_SPI_MspInit+0xc4>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	4b20      	ldr	r3, [pc, #128]	@ (80045a4 <HAL_SPI_MspInit+0xc4>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	4a1f      	ldr	r2, [pc, #124]	@ (80045a4 <HAL_SPI_MspInit+0xc4>)
 8004528:	f043 0304 	orr.w	r3, r3, #4
 800452c:	6313      	str	r3, [r2, #48]	@ 0x30
 800452e:	4b1d      	ldr	r3, [pc, #116]	@ (80045a4 <HAL_SPI_MspInit+0xc4>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	4b19      	ldr	r3, [pc, #100]	@ (80045a4 <HAL_SPI_MspInit+0xc4>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	4a18      	ldr	r2, [pc, #96]	@ (80045a4 <HAL_SPI_MspInit+0xc4>)
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	6313      	str	r3, [r2, #48]	@ 0x30
 800454a:	4b16      	ldr	r3, [pc, #88]	@ (80045a4 <HAL_SPI_MspInit+0xc4>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004556:	230c      	movs	r3, #12
 8004558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455a:	2302      	movs	r3, #2
 800455c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004562:	2302      	movs	r3, #2
 8004564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004566:	2305      	movs	r3, #5
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800456a:	f107 0314 	add.w	r3, r7, #20
 800456e:	4619      	mov	r1, r3
 8004570:	480d      	ldr	r0, [pc, #52]	@ (80045a8 <HAL_SPI_MspInit+0xc8>)
 8004572:	f000 fb69 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800457a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457c:	2302      	movs	r3, #2
 800457e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004584:	2302      	movs	r3, #2
 8004586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004588:	2305      	movs	r3, #5
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800458c:	f107 0314 	add.w	r3, r7, #20
 8004590:	4619      	mov	r1, r3
 8004592:	4806      	ldr	r0, [pc, #24]	@ (80045ac <HAL_SPI_MspInit+0xcc>)
 8004594:	f000 fb58 	bl	8004c48 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004598:	bf00      	nop
 800459a:	3728      	adds	r7, #40	@ 0x28
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40003800 	.word	0x40003800
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40020800 	.word	0x40020800
 80045ac:	40020400 	.word	0x40020400

080045b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	@ 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a28      	ldr	r2, [pc, #160]	@ (8004670 <HAL_UART_MspInit+0xc0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d14a      	bne.n	8004668 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <HAL_UART_MspInit+0xc4>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	4a26      	ldr	r2, [pc, #152]	@ (8004674 <HAL_UART_MspInit+0xc4>)
 80045dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045e2:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <HAL_UART_MspInit+0xc4>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <HAL_UART_MspInit+0xc4>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004674 <HAL_UART_MspInit+0xc4>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80045fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004674 <HAL_UART_MspInit+0xc4>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	4b19      	ldr	r3, [pc, #100]	@ (8004674 <HAL_UART_MspInit+0xc4>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	4a18      	ldr	r2, [pc, #96]	@ (8004674 <HAL_UART_MspInit+0xc4>)
 8004614:	f043 0308 	orr.w	r3, r3, #8
 8004618:	6313      	str	r3, [r2, #48]	@ 0x30
 800461a:	4b16      	ldr	r3, [pc, #88]	@ (8004674 <HAL_UART_MspInit+0xc4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800462a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462c:	2302      	movs	r3, #2
 800462e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004634:	2303      	movs	r3, #3
 8004636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004638:	2308      	movs	r3, #8
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800463c:	f107 0314 	add.w	r3, r7, #20
 8004640:	4619      	mov	r1, r3
 8004642:	480d      	ldr	r0, [pc, #52]	@ (8004678 <HAL_UART_MspInit+0xc8>)
 8004644:	f000 fb00 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004648:	2304      	movs	r3, #4
 800464a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464c:	2302      	movs	r3, #2
 800464e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004654:	2303      	movs	r3, #3
 8004656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004658:	2308      	movs	r3, #8
 800465a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	4619      	mov	r1, r3
 8004662:	4806      	ldr	r0, [pc, #24]	@ (800467c <HAL_UART_MspInit+0xcc>)
 8004664:	f000 faf0 	bl	8004c48 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8004668:	bf00      	nop
 800466a:	3728      	adds	r7, #40	@ 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40005000 	.word	0x40005000
 8004674:	40023800 	.word	0x40023800
 8004678:	40020800 	.word	0x40020800
 800467c:	40020c00 	.word	0x40020c00

08004680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004684:	bf00      	nop
 8004686:	e7fd      	b.n	8004684 <NMI_Handler+0x4>

08004688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800468c:	bf00      	nop
 800468e:	e7fd      	b.n	800468c <HardFault_Handler+0x4>

08004690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <MemManage_Handler+0x4>

08004698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <BusFault_Handler+0x4>

080046a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <UsageFault_Handler+0x4>

080046a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046c8:	bf00      	nop
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046d6:	f000 f961 	bl	800499c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80046e4:	4802      	ldr	r0, [pc, #8]	@ (80046f0 <OTG_FS_IRQHandler+0x10>)
 80046e6:	f000 fdc2 	bl	800526e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200019e8 	.word	0x200019e8

080046f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return 1;
 80046f8:	2301      	movs	r3, #1
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <_kill>:

int _kill(int pid, int sig)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800470e:	f009 fdd1 	bl	800e2b4 <__errno>
 8004712:	4603      	mov	r3, r0
 8004714:	2216      	movs	r2, #22
 8004716:	601a      	str	r2, [r3, #0]
  return -1;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <_exit>:

void _exit (int status)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800472c:	f04f 31ff 	mov.w	r1, #4294967295
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff ffe7 	bl	8004704 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <_exit+0x12>

0800473a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b086      	sub	sp, #24
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e00a      	b.n	8004762 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800474c:	f3af 8000 	nop.w
 8004750:	4601      	mov	r1, r0
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	60ba      	str	r2, [r7, #8]
 8004758:	b2ca      	uxtb	r2, r1
 800475a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3301      	adds	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	dbf0      	blt.n	800474c <_read+0x12>
  }

  return len;
 800476a:	687b      	ldr	r3, [r7, #4]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e009      	b.n	800479a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	60ba      	str	r2, [r7, #8]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3301      	adds	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	429a      	cmp	r2, r3
 80047a0:	dbf1      	blt.n	8004786 <_write+0x12>
  }
  return len;
 80047a2:	687b      	ldr	r3, [r7, #4]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <_close>:

int _close(int file)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047d4:	605a      	str	r2, [r3, #4]
  return 0;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <_isatty>:

int _isatty(int file)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047ec:	2301      	movs	r3, #1
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800481c:	4a14      	ldr	r2, [pc, #80]	@ (8004870 <_sbrk+0x5c>)
 800481e:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <_sbrk+0x60>)
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004828:	4b13      	ldr	r3, [pc, #76]	@ (8004878 <_sbrk+0x64>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004830:	4b11      	ldr	r3, [pc, #68]	@ (8004878 <_sbrk+0x64>)
 8004832:	4a12      	ldr	r2, [pc, #72]	@ (800487c <_sbrk+0x68>)
 8004834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004836:	4b10      	ldr	r3, [pc, #64]	@ (8004878 <_sbrk+0x64>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	d207      	bcs.n	8004854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004844:	f009 fd36 	bl	800e2b4 <__errno>
 8004848:	4603      	mov	r3, r0
 800484a:	220c      	movs	r2, #12
 800484c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800484e:	f04f 33ff 	mov.w	r3, #4294967295
 8004852:	e009      	b.n	8004868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004854:	4b08      	ldr	r3, [pc, #32]	@ (8004878 <_sbrk+0x64>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800485a:	4b07      	ldr	r3, [pc, #28]	@ (8004878 <_sbrk+0x64>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4413      	add	r3, r2
 8004862:	4a05      	ldr	r2, [pc, #20]	@ (8004878 <_sbrk+0x64>)
 8004864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004866:	68fb      	ldr	r3, [r7, #12]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20020000 	.word	0x20020000
 8004874:	00000400 	.word	0x00000400
 8004878:	200004e0 	.word	0x200004e0
 800487c:	20002238 	.word	0x20002238

08004880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004884:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <SystemInit+0x20>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	4a05      	ldr	r2, [pc, #20]	@ (80048a0 <SystemInit+0x20>)
 800488c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80048dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80048a8:	f7ff ffea 	bl	8004880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048ac:	480c      	ldr	r0, [pc, #48]	@ (80048e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048ae:	490d      	ldr	r1, [pc, #52]	@ (80048e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048b0:	4a0d      	ldr	r2, [pc, #52]	@ (80048e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048b4:	e002      	b.n	80048bc <LoopCopyDataInit>

080048b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ba:	3304      	adds	r3, #4

080048bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048c0:	d3f9      	bcc.n	80048b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048c2:	4a0a      	ldr	r2, [pc, #40]	@ (80048ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048c4:	4c0a      	ldr	r4, [pc, #40]	@ (80048f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80048c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048c8:	e001      	b.n	80048ce <LoopFillZerobss>

080048ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048cc:	3204      	adds	r2, #4

080048ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048d0:	d3fb      	bcc.n	80048ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048d2:	f009 fcf5 	bl	800e2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048d6:	f7ff f8a3 	bl	8003a20 <main>
  bx  lr    
 80048da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80048dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048e4:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 80048e8:	080118ac 	.word	0x080118ac
  ldr r2, =_sbss
 80048ec:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 80048f0:	20002238 	.word	0x20002238

080048f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048f4:	e7fe      	b.n	80048f4 <ADC_IRQHandler>
	...

080048f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004938 <HAL_Init+0x40>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0d      	ldr	r2, [pc, #52]	@ (8004938 <HAL_Init+0x40>)
 8004902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004908:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <HAL_Init+0x40>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a0a      	ldr	r2, [pc, #40]	@ (8004938 <HAL_Init+0x40>)
 800490e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004914:	4b08      	ldr	r3, [pc, #32]	@ (8004938 <HAL_Init+0x40>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a07      	ldr	r2, [pc, #28]	@ (8004938 <HAL_Init+0x40>)
 800491a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800491e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004920:	2003      	movs	r0, #3
 8004922:	f000 f94f 	bl	8004bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004926:	200f      	movs	r0, #15
 8004928:	f000 f808 	bl	800493c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800492c:	f7ff fdb0 	bl	8004490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023c00 	.word	0x40023c00

0800493c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004944:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <HAL_InitTick+0x54>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b12      	ldr	r3, [pc, #72]	@ (8004994 <HAL_InitTick+0x58>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	4619      	mov	r1, r3
 800494e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004952:	fbb3 f3f1 	udiv	r3, r3, r1
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f967 	bl	8004c2e <HAL_SYSTICK_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e00e      	b.n	8004988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b0f      	cmp	r3, #15
 800496e:	d80a      	bhi.n	8004986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004970:	2200      	movs	r2, #0
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	f000 f92f 	bl	8004bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800497c:	4a06      	ldr	r2, [pc, #24]	@ (8004998 <HAL_InitTick+0x5c>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000028 	.word	0x20000028
 8004994:	20000030 	.word	0x20000030
 8004998:	2000002c 	.word	0x2000002c

0800499c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049a0:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <HAL_IncTick+0x20>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <HAL_IncTick+0x24>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4413      	add	r3, r2
 80049ac:	4a04      	ldr	r2, [pc, #16]	@ (80049c0 <HAL_IncTick+0x24>)
 80049ae:	6013      	str	r3, [r2, #0]
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000030 	.word	0x20000030
 80049c0:	200004e4 	.word	0x200004e4

080049c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  return uwTick;
 80049c8:	4b03      	ldr	r3, [pc, #12]	@ (80049d8 <HAL_GetTick+0x14>)
 80049ca:	681b      	ldr	r3, [r3, #0]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	200004e4 	.word	0x200004e4

080049dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049e4:	f7ff ffee 	bl	80049c4 <HAL_GetTick>
 80049e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f4:	d005      	beq.n	8004a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <HAL_Delay+0x44>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a02:	bf00      	nop
 8004a04:	f7ff ffde 	bl	80049c4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d8f7      	bhi.n	8004a04 <HAL_Delay+0x28>
  {
  }
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000030 	.word	0x20000030

08004a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <__NVIC_SetPriorityGrouping+0x44>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a40:	4013      	ands	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a56:	4a04      	ldr	r2, [pc, #16]	@ (8004a68 <__NVIC_SetPriorityGrouping+0x44>)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	60d3      	str	r3, [r2, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a70:	4b04      	ldr	r3, [pc, #16]	@ (8004a84 <__NVIC_GetPriorityGrouping+0x18>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	f003 0307 	and.w	r3, r3, #7
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	e000ed00 	.word	0xe000ed00

08004a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	db0b      	blt.n	8004ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	f003 021f 	and.w	r2, r3, #31
 8004aa0:	4907      	ldr	r1, [pc, #28]	@ (8004ac0 <__NVIC_EnableIRQ+0x38>)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8004aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000e100 	.word	0xe000e100

08004ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	6039      	str	r1, [r7, #0]
 8004ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	db0a      	blt.n	8004aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	490c      	ldr	r1, [pc, #48]	@ (8004b10 <__NVIC_SetPriority+0x4c>)
 8004ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aec:	e00a      	b.n	8004b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	4908      	ldr	r1, [pc, #32]	@ (8004b14 <__NVIC_SetPriority+0x50>)
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	3b04      	subs	r3, #4
 8004afc:	0112      	lsls	r2, r2, #4
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	440b      	add	r3, r1
 8004b02:	761a      	strb	r2, [r3, #24]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	e000e100 	.word	0xe000e100
 8004b14:	e000ed00 	.word	0xe000ed00

08004b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b089      	sub	sp, #36	@ 0x24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f1c3 0307 	rsb	r3, r3, #7
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	bf28      	it	cs
 8004b36:	2304      	movcs	r3, #4
 8004b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	2b06      	cmp	r3, #6
 8004b40:	d902      	bls.n	8004b48 <NVIC_EncodePriority+0x30>
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	3b03      	subs	r3, #3
 8004b46:	e000      	b.n	8004b4a <NVIC_EncodePriority+0x32>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43da      	mvns	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b60:	f04f 31ff 	mov.w	r1, #4294967295
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6a:	43d9      	mvns	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b70:	4313      	orrs	r3, r2
         );
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3724      	adds	r7, #36	@ 0x24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b90:	d301      	bcc.n	8004b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b92:	2301      	movs	r3, #1
 8004b94:	e00f      	b.n	8004bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b96:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc0 <SysTick_Config+0x40>)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b9e:	210f      	movs	r1, #15
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	f7ff ff8e 	bl	8004ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ba8:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <SysTick_Config+0x40>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bae:	4b04      	ldr	r3, [pc, #16]	@ (8004bc0 <SysTick_Config+0x40>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	e000e010 	.word	0xe000e010

08004bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff29 	bl	8004a24 <__NVIC_SetPriorityGrouping>
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	4603      	mov	r3, r0
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bec:	f7ff ff3e 	bl	8004a6c <__NVIC_GetPriorityGrouping>
 8004bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	6978      	ldr	r0, [r7, #20]
 8004bf8:	f7ff ff8e 	bl	8004b18 <NVIC_EncodePriority>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff ff5d 	bl	8004ac4 <__NVIC_SetPriority>
}
 8004c0a:	bf00      	nop
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	4603      	mov	r3, r0
 8004c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff ff31 	bl	8004a88 <__NVIC_EnableIRQ>
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff ffa2 	bl	8004b80 <SysTick_Config>
 8004c3c:	4603      	mov	r3, r0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b089      	sub	sp, #36	@ 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	e16b      	b.n	8004f3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c64:	2201      	movs	r2, #1
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4013      	ands	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	f040 815a 	bne.w	8004f36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d005      	beq.n	8004c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d130      	bne.n	8004cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	f003 0201 	and.w	r2, r3, #1
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d017      	beq.n	8004d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	2203      	movs	r2, #3
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d123      	bne.n	8004d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	08da      	lsrs	r2, r3, #3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3208      	adds	r2, #8
 8004d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	220f      	movs	r2, #15
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	08da      	lsrs	r2, r3, #3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3208      	adds	r2, #8
 8004d86:	69b9      	ldr	r1, [r7, #24]
 8004d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	2203      	movs	r2, #3
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 0203 	and.w	r2, r3, #3
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80b4 	beq.w	8004f36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	4b60      	ldr	r3, [pc, #384]	@ (8004f54 <HAL_GPIO_Init+0x30c>)
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd6:	4a5f      	ldr	r2, [pc, #380]	@ (8004f54 <HAL_GPIO_Init+0x30c>)
 8004dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dde:	4b5d      	ldr	r3, [pc, #372]	@ (8004f54 <HAL_GPIO_Init+0x30c>)
 8004de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dea:	4a5b      	ldr	r2, [pc, #364]	@ (8004f58 <HAL_GPIO_Init+0x310>)
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	089b      	lsrs	r3, r3, #2
 8004df0:	3302      	adds	r3, #2
 8004df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	220f      	movs	r2, #15
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a52      	ldr	r2, [pc, #328]	@ (8004f5c <HAL_GPIO_Init+0x314>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02b      	beq.n	8004e6e <HAL_GPIO_Init+0x226>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a51      	ldr	r2, [pc, #324]	@ (8004f60 <HAL_GPIO_Init+0x318>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d025      	beq.n	8004e6a <HAL_GPIO_Init+0x222>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a50      	ldr	r2, [pc, #320]	@ (8004f64 <HAL_GPIO_Init+0x31c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01f      	beq.n	8004e66 <HAL_GPIO_Init+0x21e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a4f      	ldr	r2, [pc, #316]	@ (8004f68 <HAL_GPIO_Init+0x320>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d019      	beq.n	8004e62 <HAL_GPIO_Init+0x21a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a4e      	ldr	r2, [pc, #312]	@ (8004f6c <HAL_GPIO_Init+0x324>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_GPIO_Init+0x216>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a4d      	ldr	r2, [pc, #308]	@ (8004f70 <HAL_GPIO_Init+0x328>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00d      	beq.n	8004e5a <HAL_GPIO_Init+0x212>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a4c      	ldr	r2, [pc, #304]	@ (8004f74 <HAL_GPIO_Init+0x32c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <HAL_GPIO_Init+0x20e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a4b      	ldr	r2, [pc, #300]	@ (8004f78 <HAL_GPIO_Init+0x330>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d101      	bne.n	8004e52 <HAL_GPIO_Init+0x20a>
 8004e4e:	2307      	movs	r3, #7
 8004e50:	e00e      	b.n	8004e70 <HAL_GPIO_Init+0x228>
 8004e52:	2308      	movs	r3, #8
 8004e54:	e00c      	b.n	8004e70 <HAL_GPIO_Init+0x228>
 8004e56:	2306      	movs	r3, #6
 8004e58:	e00a      	b.n	8004e70 <HAL_GPIO_Init+0x228>
 8004e5a:	2305      	movs	r3, #5
 8004e5c:	e008      	b.n	8004e70 <HAL_GPIO_Init+0x228>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	e006      	b.n	8004e70 <HAL_GPIO_Init+0x228>
 8004e62:	2303      	movs	r3, #3
 8004e64:	e004      	b.n	8004e70 <HAL_GPIO_Init+0x228>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e002      	b.n	8004e70 <HAL_GPIO_Init+0x228>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <HAL_GPIO_Init+0x228>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	f002 0203 	and.w	r2, r2, #3
 8004e76:	0092      	lsls	r2, r2, #2
 8004e78:	4093      	lsls	r3, r2
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e80:	4935      	ldr	r1, [pc, #212]	@ (8004f58 <HAL_GPIO_Init+0x310>)
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	3302      	adds	r3, #2
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f7c <HAL_GPIO_Init+0x334>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	43db      	mvns	r3, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eb2:	4a32      	ldr	r2, [pc, #200]	@ (8004f7c <HAL_GPIO_Init+0x334>)
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eb8:	4b30      	ldr	r3, [pc, #192]	@ (8004f7c <HAL_GPIO_Init+0x334>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004edc:	4a27      	ldr	r2, [pc, #156]	@ (8004f7c <HAL_GPIO_Init+0x334>)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ee2:	4b26      	ldr	r3, [pc, #152]	@ (8004f7c <HAL_GPIO_Init+0x334>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f06:	4a1d      	ldr	r2, [pc, #116]	@ (8004f7c <HAL_GPIO_Init+0x334>)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f7c <HAL_GPIO_Init+0x334>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f30:	4a12      	ldr	r2, [pc, #72]	@ (8004f7c <HAL_GPIO_Init+0x334>)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b0f      	cmp	r3, #15
 8004f40:	f67f ae90 	bls.w	8004c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	3724      	adds	r7, #36	@ 0x24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40013800 	.word	0x40013800
 8004f5c:	40020000 	.word	0x40020000
 8004f60:	40020400 	.word	0x40020400
 8004f64:	40020800 	.word	0x40020800
 8004f68:	40020c00 	.word	0x40020c00
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40021400 	.word	0x40021400
 8004f74:	40021800 	.word	0x40021800
 8004f78:	40021c00 	.word	0x40021c00
 8004f7c:	40013c00 	.word	0x40013c00

08004f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	807b      	strh	r3, [r7, #2]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f90:	787b      	ldrb	r3, [r7, #1]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f96:	887a      	ldrh	r2, [r7, #2]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f9c:	e003      	b.n	8004fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f9e:	887b      	ldrh	r3, [r7, #2]
 8004fa0:	041a      	lsls	r2, r3, #16
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	619a      	str	r2, [r3, #24]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fc4:	887a      	ldrh	r2, [r7, #2]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	041a      	lsls	r2, r3, #16
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	43d9      	mvns	r1, r3
 8004fd0:	887b      	ldrh	r3, [r7, #2]
 8004fd2:	400b      	ands	r3, r1
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	619a      	str	r2, [r3, #24]
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b086      	sub	sp, #24
 8004fea:	af02      	add	r7, sp, #8
 8004fec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e101      	b.n	80051fc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f006 fe18 	bl	800bc48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2203      	movs	r2, #3
 800501c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005026:	d102      	bne.n	800502e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f003 f9d1 	bl	80083da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	7c1a      	ldrb	r2, [r3, #16]
 8005040:	f88d 2000 	strb.w	r2, [sp]
 8005044:	3304      	adds	r3, #4
 8005046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005048:	f003 f8b0 	bl	80081ac <USB_CoreInit>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0ce      	b.n	80051fc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2100      	movs	r1, #0
 8005064:	4618      	mov	r0, r3
 8005066:	f003 f9c9 	bl	80083fc <USB_SetCurrentMode>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0bf      	b.n	80051fc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800507c:	2300      	movs	r3, #0
 800507e:	73fb      	strb	r3, [r7, #15]
 8005080:	e04a      	b.n	8005118 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	3315      	adds	r3, #21
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005096:	7bfa      	ldrb	r2, [r7, #15]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	3314      	adds	r3, #20
 80050a6:	7bfa      	ldrb	r2, [r7, #15]
 80050a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050aa:	7bfa      	ldrb	r2, [r7, #15]
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	b298      	uxth	r0, r3
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	332e      	adds	r3, #46	@ 0x2e
 80050be:	4602      	mov	r2, r0
 80050c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050c2:	7bfa      	ldrb	r2, [r7, #15]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	3318      	adds	r3, #24
 80050d2:	2200      	movs	r2, #0
 80050d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050d6:	7bfa      	ldrb	r2, [r7, #15]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	331c      	adds	r3, #28
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	3320      	adds	r3, #32
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050fe:	7bfa      	ldrb	r2, [r7, #15]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	3324      	adds	r3, #36	@ 0x24
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	3301      	adds	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	791b      	ldrb	r3, [r3, #4]
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	429a      	cmp	r2, r3
 8005120:	d3af      	bcc.n	8005082 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]
 8005126:	e044      	b.n	80051b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005128:	7bfa      	ldrb	r2, [r7, #15]
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800513e:	7bfa      	ldrb	r2, [r7, #15]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005150:	7bfa      	ldrb	r2, [r7, #15]
 8005152:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005154:	7bfa      	ldrb	r2, [r7, #15]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005166:	2200      	movs	r2, #0
 8005168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800516a:	7bfa      	ldrb	r2, [r7, #15]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005196:	7bfa      	ldrb	r2, [r7, #15]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	3301      	adds	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	791b      	ldrb	r3, [r3, #4]
 80051b6:	7bfa      	ldrb	r2, [r7, #15]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d3b5      	bcc.n	8005128 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	7c1a      	ldrb	r2, [r3, #16]
 80051c4:	f88d 2000 	strb.w	r2, [sp]
 80051c8:	3304      	adds	r3, #4
 80051ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051cc:	f003 f962 	bl	8008494 <USB_DevInit>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e00c      	b.n	80051fc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f004 f9ac 	bl	8009552 <USB_DevDisconnect>

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_PCD_Start+0x1c>
 800521c:	2302      	movs	r3, #2
 800521e:	e022      	b.n	8005266 <HAL_PCD_Start+0x62>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d009      	beq.n	8005248 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005238:	2b01      	cmp	r3, #1
 800523a:	d105      	bne.n	8005248 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f003 f8b3 	bl	80083b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f004 f95a 	bl	8009510 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800526e:	b590      	push	{r4, r7, lr}
 8005270:	b08d      	sub	sp, #52	@ 0x34
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f004 fa18 	bl	80096ba <USB_GetMode>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 848c 	bne.w	8005baa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f004 f97c 	bl	8009594 <USB_ReadInterrupts>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8482 	beq.w	8005ba8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	0a1b      	lsrs	r3, r3, #8
 80052ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f004 f969 	bl	8009594 <USB_ReadInterrupts>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d107      	bne.n	80052dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695a      	ldr	r2, [r3, #20]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f002 0202 	and.w	r2, r2, #2
 80052da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f004 f957 	bl	8009594 <USB_ReadInterrupts>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d161      	bne.n	80053b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0210 	bic.w	r2, r2, #16
 80052fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f003 020f 	and.w	r2, r3, #15
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	3304      	adds	r3, #4
 800531e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	0c5b      	lsrs	r3, r3, #17
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	2b02      	cmp	r3, #2
 800532a:	d124      	bne.n	8005376 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d035      	beq.n	80053a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	091b      	lsrs	r3, r3, #4
 8005340:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005346:	b29b      	uxth	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	6a38      	ldr	r0, [r7, #32]
 800534c:	f003 ff8e 	bl	800926c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	091b      	lsrs	r3, r3, #4
 8005358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800535c:	441a      	add	r2, r3
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800536e:	441a      	add	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	615a      	str	r2, [r3, #20]
 8005374:	e016      	b.n	80053a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	0c5b      	lsrs	r3, r3, #17
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	2b06      	cmp	r3, #6
 8005380:	d110      	bne.n	80053a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005388:	2208      	movs	r2, #8
 800538a:	4619      	mov	r1, r3
 800538c:	6a38      	ldr	r0, [r7, #32]
 800538e:	f003 ff6d 	bl	800926c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	091b      	lsrs	r3, r3, #4
 800539a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800539e:	441a      	add	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0210 	orr.w	r2, r2, #16
 80053b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f004 f8eb 	bl	8009594 <USB_ReadInterrupts>
 80053be:	4603      	mov	r3, r0
 80053c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053c8:	f040 80a7 	bne.w	800551a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f004 f8f0 	bl	80095ba <USB_ReadDevAllOutEpInterrupt>
 80053da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80053dc:	e099      	b.n	8005512 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 808e 	beq.w	8005506 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	4611      	mov	r1, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f004 f914 	bl	8009622 <USB_ReadDevOutEPInterrupt>
 80053fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005412:	461a      	mov	r2, r3
 8005414:	2301      	movs	r3, #1
 8005416:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005418:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fea4 	bl	8006168 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00c      	beq.n	8005444 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005436:	461a      	mov	r2, r3
 8005438:	2308      	movs	r3, #8
 800543a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800543c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 ff7a 	bl	8006338 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d008      	beq.n	8005460 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800545a:	461a      	mov	r2, r3
 800545c:	2310      	movs	r3, #16
 800545e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d030      	beq.n	80054cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005472:	2b80      	cmp	r3, #128	@ 0x80
 8005474:	d109      	bne.n	800548a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005484:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005488:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800548a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800548c:	4613      	mov	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	4413      	add	r3, r2
 800549c:	3304      	adds	r3, #4
 800549e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	78db      	ldrb	r3, [r3, #3]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d108      	bne.n	80054ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2200      	movs	r2, #0
 80054ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f006 fccd 	bl	800be54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c6:	461a      	mov	r2, r3
 80054c8:	2302      	movs	r3, #2
 80054ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	2320      	movs	r3, #32
 80054e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fe:	461a      	mov	r2, r3
 8005500:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005504:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	3301      	adds	r3, #1
 800550a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005514:	2b00      	cmp	r3, #0
 8005516:	f47f af62 	bne.w	80053de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f004 f838 	bl	8009594 <USB_ReadInterrupts>
 8005524:	4603      	mov	r3, r0
 8005526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800552a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800552e:	f040 80db 	bne.w	80056e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f004 f859 	bl	80095ee <USB_ReadDevAllInEpInterrupt>
 800553c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005542:	e0cd      	b.n	80056e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 80c2 	beq.w	80056d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f004 f87f 	bl	800965e <USB_ReadDevInEPInterrupt>
 8005560:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d057      	beq.n	800561c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	2201      	movs	r2, #1
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	43db      	mvns	r3, r3
 8005586:	69f9      	ldr	r1, [r7, #28]
 8005588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800558c:	4013      	ands	r3, r2
 800558e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559c:	461a      	mov	r2, r3
 800559e:	2301      	movs	r3, #1
 80055a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	799b      	ldrb	r3, [r3, #6]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d132      	bne.n	8005610 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ae:	4613      	mov	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3320      	adds	r3, #32
 80055ba:	6819      	ldr	r1, [r3, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c0:	4613      	mov	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4403      	add	r3, r0
 80055ca:	331c      	adds	r3, #28
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4419      	add	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4403      	add	r3, r0
 80055de:	3320      	adds	r3, #32
 80055e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d113      	bne.n	8005610 <HAL_PCD_IRQHandler+0x3a2>
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	3324      	adds	r3, #36	@ 0x24
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d108      	bne.n	8005610 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005608:	461a      	mov	r2, r3
 800560a:	2101      	movs	r1, #1
 800560c:	f004 f886 	bl	800971c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	b2db      	uxtb	r3, r3
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f006 fb97 	bl	800bd4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d008      	beq.n	8005638 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005632:	461a      	mov	r2, r3
 8005634:	2308      	movs	r3, #8
 8005636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2b00      	cmp	r3, #0
 8005640:	d008      	beq.n	8005654 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800564e:	461a      	mov	r2, r3
 8005650:	2310      	movs	r3, #16
 8005652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800566a:	461a      	mov	r2, r3
 800566c:	2340      	movs	r3, #64	@ 0x40
 800566e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d023      	beq.n	80056c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800567a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800567c:	6a38      	ldr	r0, [r7, #32]
 800567e:	f003 f86d 	bl	800875c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005684:	4613      	mov	r3, r2
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	3310      	adds	r3, #16
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4413      	add	r3, r2
 8005692:	3304      	adds	r3, #4
 8005694:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	78db      	ldrb	r3, [r3, #3]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d108      	bne.n	80056b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2200      	movs	r2, #0
 80056a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	4619      	mov	r1, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f006 fbe4 	bl	800be78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056bc:	461a      	mov	r2, r3
 80056be:	2302      	movs	r3, #2
 80056c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80056cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fcbd 	bl	800604e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	3301      	adds	r3, #1
 80056d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80056da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f47f af2e 	bne.w	8005544 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f003 ff51 	bl	8009594 <USB_ReadInterrupts>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056fc:	d122      	bne.n	8005744 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005718:	2b01      	cmp	r3, #1
 800571a:	d108      	bne.n	800572e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005724:	2100      	movs	r1, #0
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fea4 	bl	8006474 <HAL_PCDEx_LPM_Callback>
 800572c:	e002      	b.n	8005734 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f006 fb82 	bl	800be38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695a      	ldr	r2, [r3, #20]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f003 ff23 	bl	8009594 <USB_ReadInterrupts>
 800574e:	4603      	mov	r3, r0
 8005750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005758:	d112      	bne.n	8005780 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d102      	bne.n	8005770 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f006 fb3e 	bl	800bdec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800577e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4618      	mov	r0, r3
 8005786:	f003 ff05 	bl	8009594 <USB_ReadInterrupts>
 800578a:	4603      	mov	r3, r0
 800578c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005794:	f040 80b7 	bne.w	8005906 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2110      	movs	r1, #16
 80057b2:	4618      	mov	r0, r3
 80057b4:	f002 ffd2 	bl	800875c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057b8:	2300      	movs	r3, #0
 80057ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057bc:	e046      	b.n	800584c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80057be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ca:	461a      	mov	r2, r3
 80057cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80057f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057fe:	461a      	mov	r2, r3
 8005800:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005804:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005820:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005836:	0151      	lsls	r1, r2, #5
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	440a      	add	r2, r1
 800583c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005840:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005844:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005848:	3301      	adds	r3, #1
 800584a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	791b      	ldrb	r3, [r3, #4]
 8005850:	461a      	mov	r2, r3
 8005852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005854:	4293      	cmp	r3, r2
 8005856:	d3b2      	bcc.n	80057be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005866:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800586a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	7bdb      	ldrb	r3, [r3, #15]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d016      	beq.n	80058a2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800587a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005884:	f043 030b 	orr.w	r3, r3, #11
 8005888:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800589a:	f043 030b 	orr.w	r3, r3, #11
 800589e:	6453      	str	r3, [r2, #68]	@ 0x44
 80058a0:	e015      	b.n	80058ce <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058b4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80058b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058c8:	f043 030b 	orr.w	r3, r3, #11
 80058cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058dc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80058e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80058f0:	461a      	mov	r2, r3
 80058f2:	f003 ff13 	bl	800971c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695a      	ldr	r2, [r3, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f003 fe42 	bl	8009594 <USB_ReadInterrupts>
 8005910:	4603      	mov	r3, r0
 8005912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800591a:	d123      	bne.n	8005964 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f003 fed8 	bl	80096d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f002 ff8f 	bl	800884e <USB_GetDevSpeed>
 8005930:	4603      	mov	r3, r0
 8005932:	461a      	mov	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681c      	ldr	r4, [r3, #0]
 800593c:	f001 fa0a 	bl	8006d54 <HAL_RCC_GetHCLKFreq>
 8005940:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005946:	461a      	mov	r2, r3
 8005948:	4620      	mov	r0, r4
 800594a:	f002 fc93 	bl	8008274 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f006 fa23 	bl	800bd9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695a      	ldr	r2, [r3, #20]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005962:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f003 fe13 	bl	8009594 <USB_ReadInterrupts>
 800596e:	4603      	mov	r3, r0
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b08      	cmp	r3, #8
 8005976:	d10a      	bne.n	800598e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f006 fa00 	bl	800bd7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695a      	ldr	r2, [r3, #20]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f002 0208 	and.w	r2, r2, #8
 800598c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f003 fdfe 	bl	8009594 <USB_ReadInterrupts>
 8005998:	4603      	mov	r3, r0
 800599a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599e:	2b80      	cmp	r3, #128	@ 0x80
 80059a0:	d123      	bne.n	80059ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059ae:	2301      	movs	r3, #1
 80059b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059b2:	e014      	b.n	80059de <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b8:	4613      	mov	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d105      	bne.n	80059d8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fb0a 	bl	8005fec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	3301      	adds	r3, #1
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	791b      	ldrb	r3, [r3, #4]
 80059e2:	461a      	mov	r2, r3
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d3e4      	bcc.n	80059b4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f003 fdd0 	bl	8009594 <USB_ReadInterrupts>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fe:	d13c      	bne.n	8005a7a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a00:	2301      	movs	r3, #1
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a04:	e02b      	b.n	8005a5e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	3318      	adds	r3, #24
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d115      	bne.n	8005a58 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005a2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	da12      	bge.n	8005a58 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	3317      	adds	r3, #23
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 faca 	bl	8005fec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	791b      	ldrb	r3, [r3, #4]
 8005a62:	461a      	mov	r2, r3
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d3cd      	bcc.n	8005a06 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f003 fd88 	bl	8009594 <USB_ReadInterrupts>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a8e:	d156      	bne.n	8005b3e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a90:	2301      	movs	r3, #1
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a94:	e045      	b.n	8005b22 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d12e      	bne.n	8005b1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005abe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	da2b      	bge.n	8005b1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005ad0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d121      	bne.n	8005b1c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005aea:	2201      	movs	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10a      	bne.n	8005b1c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b18:	6053      	str	r3, [r2, #4]
            break;
 8005b1a:	e008      	b.n	8005b2e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	3301      	adds	r3, #1
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	791b      	ldrb	r3, [r3, #4]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d3b3      	bcc.n	8005a96 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f003 fd26 	bl	8009594 <USB_ReadInterrupts>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b52:	d10a      	bne.n	8005b6a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f006 f9a1 	bl	800be9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695a      	ldr	r2, [r3, #20]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f003 fd10 	bl	8009594 <USB_ReadInterrupts>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d115      	bne.n	8005baa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f006 f991 	bl	800beb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6859      	ldr	r1, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	e000      	b.n	8005baa <HAL_PCD_IRQHandler+0x93c>
      return;
 8005ba8:	bf00      	nop
    }
  }
}
 8005baa:	3734      	adds	r7, #52	@ 0x34
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd90      	pop	{r4, r7, pc}

08005bb0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_PCD_SetAddress+0x1a>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e012      	b.n	8005bf0 <HAL_PCD_SetAddress+0x40>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	4611      	mov	r1, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f003 fc6f 	bl	80094c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	461a      	mov	r2, r3
 8005c06:	4603      	mov	r3, r0
 8005c08:	70fb      	strb	r3, [r7, #3]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	803b      	strh	r3, [r7, #0]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da0f      	bge.n	8005c3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	f003 020f 	and.w	r2, r3, #15
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	3310      	adds	r3, #16
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	4413      	add	r3, r2
 8005c32:	3304      	adds	r3, #4
 8005c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	705a      	strb	r2, [r3, #1]
 8005c3c:	e00f      	b.n	8005c5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	f003 020f 	and.w	r2, r3, #15
 8005c44:	4613      	mov	r3, r2
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	4413      	add	r3, r2
 8005c54:	3304      	adds	r3, #4
 8005c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005c6a:	883b      	ldrh	r3, [r7, #0]
 8005c6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	78ba      	ldrb	r2, [r7, #2]
 8005c78:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c8c:	78bb      	ldrb	r3, [r7, #2]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d102      	bne.n	8005c98 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_PCD_EP_Open+0xae>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e00e      	b.n	8005cc4 <HAL_PCD_EP_Open+0xcc>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f002 fdef 	bl	8008898 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	da0f      	bge.n	8005d00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	f003 020f 	and.w	r2, r3, #15
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	3310      	adds	r3, #16
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	705a      	strb	r2, [r3, #1]
 8005cfe:	e00f      	b.n	8005d20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	f003 020f 	and.w	r2, r3, #15
 8005d06:	4613      	mov	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	4413      	add	r3, r2
 8005d16:	3304      	adds	r3, #4
 8005d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_PCD_EP_Close+0x6e>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e00e      	b.n	8005d58 <HAL_PCD_EP_Close+0x8c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68f9      	ldr	r1, [r7, #12]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f002 fe2d 	bl	80089a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d70:	7afb      	ldrb	r3, [r7, #11]
 8005d72:	f003 020f 	and.w	r2, r3, #15
 8005d76:	4613      	mov	r3, r2
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4413      	add	r3, r2
 8005d86:	3304      	adds	r3, #4
 8005d88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005da2:	7afb      	ldrb	r3, [r7, #11]
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	799b      	ldrb	r3, [r3, #6]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d102      	bne.n	8005dbc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	799b      	ldrb	r3, [r3, #6]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6979      	ldr	r1, [r7, #20]
 8005dc8:	f002 feca 	bl	8008b60 <USB_EPStartXfer>

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005de2:	78fb      	ldrb	r3, [r7, #3]
 8005de4:	f003 020f 	and.w	r2, r3, #15
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005df8:	681b      	ldr	r3, [r3, #0]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	460b      	mov	r3, r1
 8005e14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e16:	7afb      	ldrb	r3, [r7, #11]
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	3310      	adds	r3, #16
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2201      	movs	r2, #1
 8005e44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	799b      	ldrb	r3, [r3, #6]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d102      	bne.n	8005e60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	799b      	ldrb	r3, [r3, #6]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6979      	ldr	r1, [r7, #20]
 8005e6c:	f002 fe78 	bl	8008b60 <USB_EPStartXfer>

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	460b      	mov	r3, r1
 8005e84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	7912      	ldrb	r2, [r2, #4]
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d901      	bls.n	8005e98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e04f      	b.n	8005f38 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da0f      	bge.n	8005ec0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	f003 020f 	and.w	r2, r3, #15
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	3310      	adds	r3, #16
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	705a      	strb	r2, [r3, #1]
 8005ebe:	e00d      	b.n	8005edc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_PCD_EP_SetStall+0x82>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e01d      	b.n	8005f38 <HAL_PCD_EP_SetStall+0xbe>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68f9      	ldr	r1, [r7, #12]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f003 fa06 	bl	800931c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	7999      	ldrb	r1, [r3, #6]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f003 fbf7 	bl	800971c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	7912      	ldrb	r2, [r2, #4]
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d901      	bls.n	8005f5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e042      	b.n	8005fe4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da0f      	bge.n	8005f86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	3310      	adds	r3, #16
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4413      	add	r3, r2
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	705a      	strb	r2, [r3, #1]
 8005f84:	e00f      	b.n	8005fa6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	f003 020f 	and.w	r2, r3, #15
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fac:	78fb      	ldrb	r3, [r7, #3]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_PCD_EP_ClrStall+0x86>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e00e      	b.n	8005fe4 <HAL_PCD_EP_ClrStall+0xa4>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f003 fa0f 	bl	80093f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da0c      	bge.n	800601a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	f003 020f 	and.w	r2, r3, #15
 8006006:	4613      	mov	r3, r2
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	3310      	adds	r3, #16
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	3304      	adds	r3, #4
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e00c      	b.n	8006034 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	f003 020f 	and.w	r2, r3, #15
 8006020:	4613      	mov	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	4413      	add	r3, r2
 8006030:	3304      	adds	r3, #4
 8006032:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68f9      	ldr	r1, [r7, #12]
 800603a:	4618      	mov	r0, r3
 800603c:	f003 f82e 	bl	800909c <USB_EPStopXfer>
 8006040:	4603      	mov	r3, r0
 8006042:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006044:	7afb      	ldrb	r3, [r7, #11]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b08a      	sub	sp, #40	@ 0x28
 8006052:	af02      	add	r7, sp, #8
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	3310      	adds	r3, #16
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	4413      	add	r3, r2
 8006072:	3304      	adds	r3, #4
 8006074:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	429a      	cmp	r2, r3
 8006080:	d901      	bls.n	8006086 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e06b      	b.n	800615e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	429a      	cmp	r2, r3
 800609a:	d902      	bls.n	80060a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	3303      	adds	r3, #3
 80060a6:	089b      	lsrs	r3, r3, #2
 80060a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060aa:	e02a      	b.n	8006102 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d902      	bls.n	80060c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	3303      	adds	r3, #3
 80060cc:	089b      	lsrs	r3, r3, #2
 80060ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68d9      	ldr	r1, [r3, #12]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	4603      	mov	r3, r0
 80060e4:	6978      	ldr	r0, [r7, #20]
 80060e6:	f003 f883 	bl	80091f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	441a      	add	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	441a      	add	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	429a      	cmp	r2, r3
 8006116:	d809      	bhi.n	800612c <PCD_WriteEmptyTxFifo+0xde>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006120:	429a      	cmp	r2, r3
 8006122:	d203      	bcs.n	800612c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1bf      	bne.n	80060ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	429a      	cmp	r2, r3
 8006136:	d811      	bhi.n	800615c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	2201      	movs	r2, #1
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	43db      	mvns	r3, r3
 8006152:	6939      	ldr	r1, [r7, #16]
 8006154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006158:	4013      	ands	r3, r2
 800615a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	333c      	adds	r3, #60	@ 0x3c
 8006180:	3304      	adds	r3, #4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	799b      	ldrb	r3, [r3, #6]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d17b      	bne.n	8006296 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d015      	beq.n	80061d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	4a61      	ldr	r2, [pc, #388]	@ (8006330 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	f240 80b9 	bls.w	8006324 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80b3 	beq.w	8006324 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ca:	461a      	mov	r2, r3
 80061cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061d0:	6093      	str	r3, [r2, #8]
 80061d2:	e0a7      	b.n	8006324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d009      	beq.n	80061f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ea:	461a      	mov	r2, r3
 80061ec:	2320      	movs	r3, #32
 80061ee:	6093      	str	r3, [r2, #8]
 80061f0:	e098      	b.n	8006324 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f040 8093 	bne.w	8006324 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	4a4b      	ldr	r2, [pc, #300]	@ (8006330 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d90f      	bls.n	8006226 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00a      	beq.n	8006226 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800621c:	461a      	mov	r2, r3
 800621e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006222:	6093      	str	r3, [r2, #8]
 8006224:	e07e      	b.n	8006324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4413      	add	r3, r2
 8006238:	3304      	adds	r3, #4
 800623a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a1a      	ldr	r2, [r3, #32]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	0159      	lsls	r1, r3, #5
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	440b      	add	r3, r1
 8006248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d114      	bne.n	8006288 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006270:	461a      	mov	r2, r3
 8006272:	2101      	movs	r1, #1
 8006274:	f003 fa52 	bl	800971c <USB_EP0_OutStart>
 8006278:	e006      	b.n	8006288 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	441a      	add	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f005 fd40 	bl	800bd14 <HAL_PCD_DataOutStageCallback>
 8006294:	e046      	b.n	8006324 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	4a26      	ldr	r2, [pc, #152]	@ (8006334 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d124      	bne.n	80062e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b4:	461a      	mov	r2, r3
 80062b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ba:	6093      	str	r3, [r2, #8]
 80062bc:	e032      	b.n	8006324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d4:	461a      	mov	r2, r3
 80062d6:	2320      	movs	r3, #32
 80062d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f005 fd17 	bl	800bd14 <HAL_PCD_DataOutStageCallback>
 80062e6:	e01d      	b.n	8006324 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d114      	bne.n	8006318 <PCD_EP_OutXfrComplete_int+0x1b0>
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	4613      	mov	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006310:	461a      	mov	r2, r3
 8006312:	2100      	movs	r1, #0
 8006314:	f003 fa02 	bl	800971c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f005 fcf8 	bl	800bd14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	4f54300a 	.word	0x4f54300a
 8006334:	4f54310a 	.word	0x4f54310a

08006338 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	333c      	adds	r3, #60	@ 0x3c
 8006350:	3304      	adds	r3, #4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a15      	ldr	r2, [pc, #84]	@ (80063c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d90e      	bls.n	800638c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006384:	461a      	mov	r2, r3
 8006386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800638a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f005 fcaf 	bl	800bcf0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a0a      	ldr	r2, [pc, #40]	@ (80063c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d90c      	bls.n	80063b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	799b      	ldrb	r3, [r3, #6]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d108      	bne.n	80063b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80063ac:	461a      	mov	r2, r3
 80063ae:	2101      	movs	r1, #1
 80063b0:	f003 f9b4 	bl	800971c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	4f54300a 	.word	0x4f54300a

080063c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
 80063d0:	4613      	mov	r3, r2
 80063d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d107      	bne.n	80063f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80063e2:	883b      	ldrh	r3, [r7, #0]
 80063e4:	0419      	lsls	r1, r3, #16
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80063f0:	e028      	b.n	8006444 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f8:	0c1b      	lsrs	r3, r3, #16
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	4413      	add	r3, r2
 80063fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006400:	2300      	movs	r3, #0
 8006402:	73fb      	strb	r3, [r7, #15]
 8006404:	e00d      	b.n	8006422 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	3340      	adds	r3, #64	@ 0x40
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	0c1b      	lsrs	r3, r3, #16
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	4413      	add	r3, r2
 800641a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	3301      	adds	r3, #1
 8006420:	73fb      	strb	r3, [r7, #15]
 8006422:	7bfa      	ldrb	r2, [r7, #15]
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	3b01      	subs	r3, #1
 8006428:	429a      	cmp	r2, r3
 800642a:	d3ec      	bcc.n	8006406 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800642c:	883b      	ldrh	r3, [r7, #0]
 800642e:	0418      	lsls	r0, r3, #16
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	3b01      	subs	r3, #1
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	4302      	orrs	r2, r0
 800643c:	3340      	adds	r3, #64	@ 0x40
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	887a      	ldrh	r2, [r7, #2]
 8006464:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e267      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d075      	beq.n	8006596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80064aa:	4b88      	ldr	r3, [pc, #544]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 030c 	and.w	r3, r3, #12
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d00c      	beq.n	80064d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064b6:	4b85      	ldr	r3, [pc, #532]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d112      	bne.n	80064e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064c2:	4b82      	ldr	r3, [pc, #520]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064ce:	d10b      	bne.n	80064e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064d0:	4b7e      	ldr	r3, [pc, #504]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d05b      	beq.n	8006594 <HAL_RCC_OscConfig+0x108>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d157      	bne.n	8006594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e242      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064f0:	d106      	bne.n	8006500 <HAL_RCC_OscConfig+0x74>
 80064f2:	4b76      	ldr	r3, [pc, #472]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a75      	ldr	r2, [pc, #468]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80064f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	e01d      	b.n	800653c <HAL_RCC_OscConfig+0xb0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006508:	d10c      	bne.n	8006524 <HAL_RCC_OscConfig+0x98>
 800650a:	4b70      	ldr	r3, [pc, #448]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a6f      	ldr	r2, [pc, #444]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 8006510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	4b6d      	ldr	r3, [pc, #436]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a6c      	ldr	r2, [pc, #432]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 800651c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e00b      	b.n	800653c <HAL_RCC_OscConfig+0xb0>
 8006524:	4b69      	ldr	r3, [pc, #420]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a68      	ldr	r2, [pc, #416]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 800652a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4b66      	ldr	r3, [pc, #408]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a65      	ldr	r2, [pc, #404]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 8006536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800653a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d013      	beq.n	800656c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006544:	f7fe fa3e 	bl	80049c4 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800654c:	f7fe fa3a 	bl	80049c4 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b64      	cmp	r3, #100	@ 0x64
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e207      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655e:	4b5b      	ldr	r3, [pc, #364]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0xc0>
 800656a:	e014      	b.n	8006596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656c:	f7fe fa2a 	bl	80049c4 <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006574:	f7fe fa26 	bl	80049c4 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b64      	cmp	r3, #100	@ 0x64
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e1f3      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006586:	4b51      	ldr	r3, [pc, #324]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0xe8>
 8006592:	e000      	b.n	8006596 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d063      	beq.n	800666a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80065a2:	4b4a      	ldr	r3, [pc, #296]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 030c 	and.w	r3, r3, #12
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ae:	4b47      	ldr	r3, [pc, #284]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80065b6:	2b08      	cmp	r3, #8
 80065b8:	d11c      	bne.n	80065f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ba:	4b44      	ldr	r3, [pc, #272]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d116      	bne.n	80065f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065c6:	4b41      	ldr	r3, [pc, #260]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <HAL_RCC_OscConfig+0x152>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d001      	beq.n	80065de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e1c7      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065de:	4b3b      	ldr	r3, [pc, #236]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	4937      	ldr	r1, [pc, #220]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065f2:	e03a      	b.n	800666a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d020      	beq.n	800663e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065fc:	4b34      	ldr	r3, [pc, #208]	@ (80066d0 <HAL_RCC_OscConfig+0x244>)
 80065fe:	2201      	movs	r2, #1
 8006600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006602:	f7fe f9df 	bl	80049c4 <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006608:	e008      	b.n	800661c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800660a:	f7fe f9db 	bl	80049c4 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e1a8      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800661c:	4b2b      	ldr	r3, [pc, #172]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0f0      	beq.n	800660a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006628:	4b28      	ldr	r3, [pc, #160]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4925      	ldr	r1, [pc, #148]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 8006638:	4313      	orrs	r3, r2
 800663a:	600b      	str	r3, [r1, #0]
 800663c:	e015      	b.n	800666a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800663e:	4b24      	ldr	r3, [pc, #144]	@ (80066d0 <HAL_RCC_OscConfig+0x244>)
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006644:	f7fe f9be 	bl	80049c4 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800664c:	f7fe f9ba 	bl	80049c4 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e187      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800665e:	4b1b      	ldr	r3, [pc, #108]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d036      	beq.n	80066e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d016      	beq.n	80066ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800667e:	4b15      	ldr	r3, [pc, #84]	@ (80066d4 <HAL_RCC_OscConfig+0x248>)
 8006680:	2201      	movs	r2, #1
 8006682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006684:	f7fe f99e 	bl	80049c4 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800668c:	f7fe f99a 	bl	80049c4 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e167      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800669e:	4b0b      	ldr	r3, [pc, #44]	@ (80066cc <HAL_RCC_OscConfig+0x240>)
 80066a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0f0      	beq.n	800668c <HAL_RCC_OscConfig+0x200>
 80066aa:	e01b      	b.n	80066e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ac:	4b09      	ldr	r3, [pc, #36]	@ (80066d4 <HAL_RCC_OscConfig+0x248>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b2:	f7fe f987 	bl	80049c4 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066b8:	e00e      	b.n	80066d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ba:	f7fe f983 	bl	80049c4 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d907      	bls.n	80066d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e150      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
 80066cc:	40023800 	.word	0x40023800
 80066d0:	42470000 	.word	0x42470000
 80066d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066d8:	4b88      	ldr	r3, [pc, #544]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 80066da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1ea      	bne.n	80066ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8097 	beq.w	8006820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066f2:	2300      	movs	r3, #0
 80066f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066f6:	4b81      	ldr	r3, [pc, #516]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 80066f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10f      	bne.n	8006722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006702:	2300      	movs	r3, #0
 8006704:	60bb      	str	r3, [r7, #8]
 8006706:	4b7d      	ldr	r3, [pc, #500]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 8006708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670a:	4a7c      	ldr	r2, [pc, #496]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 800670c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006710:	6413      	str	r3, [r2, #64]	@ 0x40
 8006712:	4b7a      	ldr	r3, [pc, #488]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 8006714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800671a:	60bb      	str	r3, [r7, #8]
 800671c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800671e:	2301      	movs	r3, #1
 8006720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006722:	4b77      	ldr	r3, [pc, #476]	@ (8006900 <HAL_RCC_OscConfig+0x474>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672a:	2b00      	cmp	r3, #0
 800672c:	d118      	bne.n	8006760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800672e:	4b74      	ldr	r3, [pc, #464]	@ (8006900 <HAL_RCC_OscConfig+0x474>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a73      	ldr	r2, [pc, #460]	@ (8006900 <HAL_RCC_OscConfig+0x474>)
 8006734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800673a:	f7fe f943 	bl	80049c4 <HAL_GetTick>
 800673e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006740:	e008      	b.n	8006754 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006742:	f7fe f93f 	bl	80049c4 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e10c      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006754:	4b6a      	ldr	r3, [pc, #424]	@ (8006900 <HAL_RCC_OscConfig+0x474>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0f0      	beq.n	8006742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d106      	bne.n	8006776 <HAL_RCC_OscConfig+0x2ea>
 8006768:	4b64      	ldr	r3, [pc, #400]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 800676a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676c:	4a63      	ldr	r2, [pc, #396]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 800676e:	f043 0301 	orr.w	r3, r3, #1
 8006772:	6713      	str	r3, [r2, #112]	@ 0x70
 8006774:	e01c      	b.n	80067b0 <HAL_RCC_OscConfig+0x324>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b05      	cmp	r3, #5
 800677c:	d10c      	bne.n	8006798 <HAL_RCC_OscConfig+0x30c>
 800677e:	4b5f      	ldr	r3, [pc, #380]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006782:	4a5e      	ldr	r2, [pc, #376]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 8006784:	f043 0304 	orr.w	r3, r3, #4
 8006788:	6713      	str	r3, [r2, #112]	@ 0x70
 800678a:	4b5c      	ldr	r3, [pc, #368]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 800678c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678e:	4a5b      	ldr	r2, [pc, #364]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	6713      	str	r3, [r2, #112]	@ 0x70
 8006796:	e00b      	b.n	80067b0 <HAL_RCC_OscConfig+0x324>
 8006798:	4b58      	ldr	r3, [pc, #352]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679c:	4a57      	ldr	r2, [pc, #348]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80067a4:	4b55      	ldr	r3, [pc, #340]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a8:	4a54      	ldr	r2, [pc, #336]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 80067aa:	f023 0304 	bic.w	r3, r3, #4
 80067ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d015      	beq.n	80067e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b8:	f7fe f904 	bl	80049c4 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067be:	e00a      	b.n	80067d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c0:	f7fe f900 	bl	80049c4 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e0cb      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d6:	4b49      	ldr	r3, [pc, #292]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 80067d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0ee      	beq.n	80067c0 <HAL_RCC_OscConfig+0x334>
 80067e2:	e014      	b.n	800680e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e4:	f7fe f8ee 	bl	80049c4 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ea:	e00a      	b.n	8006802 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ec:	f7fe f8ea 	bl	80049c4 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e0b5      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006802:	4b3e      	ldr	r3, [pc, #248]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1ee      	bne.n	80067ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d105      	bne.n	8006820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006814:	4b39      	ldr	r3, [pc, #228]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	4a38      	ldr	r2, [pc, #224]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 800681a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800681e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80a1 	beq.w	800696c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800682a:	4b34      	ldr	r3, [pc, #208]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 030c 	and.w	r3, r3, #12
 8006832:	2b08      	cmp	r3, #8
 8006834:	d05c      	beq.n	80068f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d141      	bne.n	80068c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683e:	4b31      	ldr	r3, [pc, #196]	@ (8006904 <HAL_RCC_OscConfig+0x478>)
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006844:	f7fe f8be 	bl	80049c4 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800684c:	f7fe f8ba 	bl	80049c4 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e087      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685e:	4b27      	ldr	r3, [pc, #156]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f0      	bne.n	800684c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69da      	ldr	r2, [r3, #28]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006878:	019b      	lsls	r3, r3, #6
 800687a:	431a      	orrs	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006880:	085b      	lsrs	r3, r3, #1
 8006882:	3b01      	subs	r3, #1
 8006884:	041b      	lsls	r3, r3, #16
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	061b      	lsls	r3, r3, #24
 800688e:	491b      	ldr	r1, [pc, #108]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 8006890:	4313      	orrs	r3, r2
 8006892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006894:	4b1b      	ldr	r3, [pc, #108]	@ (8006904 <HAL_RCC_OscConfig+0x478>)
 8006896:	2201      	movs	r2, #1
 8006898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689a:	f7fe f893 	bl	80049c4 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a2:	f7fe f88f 	bl	80049c4 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e05c      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068b4:	4b11      	ldr	r3, [pc, #68]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x416>
 80068c0:	e054      	b.n	800696c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c2:	4b10      	ldr	r3, [pc, #64]	@ (8006904 <HAL_RCC_OscConfig+0x478>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c8:	f7fe f87c 	bl	80049c4 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068d0:	f7fe f878 	bl	80049c4 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e045      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e2:	4b06      	ldr	r3, [pc, #24]	@ (80068fc <HAL_RCC_OscConfig+0x470>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x444>
 80068ee:	e03d      	b.n	800696c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d107      	bne.n	8006908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e038      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
 80068fc:	40023800 	.word	0x40023800
 8006900:	40007000 	.word	0x40007000
 8006904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006908:	4b1b      	ldr	r3, [pc, #108]	@ (8006978 <HAL_RCC_OscConfig+0x4ec>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d028      	beq.n	8006968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006920:	429a      	cmp	r2, r3
 8006922:	d121      	bne.n	8006968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800692e:	429a      	cmp	r2, r3
 8006930:	d11a      	bne.n	8006968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006938:	4013      	ands	r3, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800693e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006940:	4293      	cmp	r3, r2
 8006942:	d111      	bne.n	8006968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694e:	085b      	lsrs	r3, r3, #1
 8006950:	3b01      	subs	r3, #1
 8006952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006954:	429a      	cmp	r2, r3
 8006956:	d107      	bne.n	8006968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006964:	429a      	cmp	r2, r3
 8006966:	d001      	beq.n	800696c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	40023800 	.word	0x40023800

0800697c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0cc      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006990:	4b68      	ldr	r3, [pc, #416]	@ (8006b34 <HAL_RCC_ClockConfig+0x1b8>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d90c      	bls.n	80069b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699e:	4b65      	ldr	r3, [pc, #404]	@ (8006b34 <HAL_RCC_ClockConfig+0x1b8>)
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069a6:	4b63      	ldr	r3, [pc, #396]	@ (8006b34 <HAL_RCC_ClockConfig+0x1b8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d001      	beq.n	80069b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0b8      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d020      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069d0:	4b59      	ldr	r3, [pc, #356]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	4a58      	ldr	r2, [pc, #352]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80069da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069e8:	4b53      	ldr	r3, [pc, #332]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	4a52      	ldr	r2, [pc, #328]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 80069ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80069f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069f4:	4b50      	ldr	r3, [pc, #320]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	494d      	ldr	r1, [pc, #308]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d044      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d107      	bne.n	8006a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a1a:	4b47      	ldr	r3, [pc, #284]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d119      	bne.n	8006a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e07f      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d003      	beq.n	8006a3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d107      	bne.n	8006a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e06f      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e067      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a5a:	4b37      	ldr	r3, [pc, #220]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f023 0203 	bic.w	r2, r3, #3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	4934      	ldr	r1, [pc, #208]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a6c:	f7fd ffaa 	bl	80049c4 <HAL_GetTick>
 8006a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a72:	e00a      	b.n	8006a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a74:	f7fd ffa6 	bl	80049c4 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e04f      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 020c 	and.w	r2, r3, #12
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d1eb      	bne.n	8006a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a9c:	4b25      	ldr	r3, [pc, #148]	@ (8006b34 <HAL_RCC_ClockConfig+0x1b8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d20c      	bcs.n	8006ac4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aaa:	4b22      	ldr	r3, [pc, #136]	@ (8006b34 <HAL_RCC_ClockConfig+0x1b8>)
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ab2:	4b20      	ldr	r3, [pc, #128]	@ (8006b34 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e032      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d008      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ad0:	4b19      	ldr	r3, [pc, #100]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	4916      	ldr	r1, [pc, #88]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d009      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aee:	4b12      	ldr	r3, [pc, #72]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	490e      	ldr	r1, [pc, #56]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b02:	f000 f821 	bl	8006b48 <HAL_RCC_GetSysClockFreq>
 8006b06:	4602      	mov	r2, r0
 8006b08:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	091b      	lsrs	r3, r3, #4
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	490a      	ldr	r1, [pc, #40]	@ (8006b3c <HAL_RCC_ClockConfig+0x1c0>)
 8006b14:	5ccb      	ldrb	r3, [r1, r3]
 8006b16:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1a:	4a09      	ldr	r2, [pc, #36]	@ (8006b40 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006b1e:	4b09      	ldr	r3, [pc, #36]	@ (8006b44 <HAL_RCC_ClockConfig+0x1c8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fd ff0a 	bl	800493c <HAL_InitTick>

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	40023c00 	.word	0x40023c00
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	080113e8 	.word	0x080113e8
 8006b40:	20000028 	.word	0x20000028
 8006b44:	2000002c 	.word	0x2000002c

08006b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b4c:	b094      	sub	sp, #80	@ 0x50
 8006b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b60:	4b79      	ldr	r3, [pc, #484]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 030c 	and.w	r3, r3, #12
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d00d      	beq.n	8006b88 <HAL_RCC_GetSysClockFreq+0x40>
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	f200 80e1 	bhi.w	8006d34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <HAL_RCC_GetSysClockFreq+0x34>
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d003      	beq.n	8006b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b7a:	e0db      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b7c:	4b73      	ldr	r3, [pc, #460]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b80:	e0db      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b82:	4b73      	ldr	r3, [pc, #460]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b86:	e0d8      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b88:	4b6f      	ldr	r3, [pc, #444]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b92:	4b6d      	ldr	r3, [pc, #436]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d063      	beq.n	8006c66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	099b      	lsrs	r3, r3, #6
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ba8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006bba:	4622      	mov	r2, r4
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	f04f 0000 	mov.w	r0, #0
 8006bc2:	f04f 0100 	mov.w	r1, #0
 8006bc6:	0159      	lsls	r1, r3, #5
 8006bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bcc:	0150      	lsls	r0, r2, #5
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	1a51      	subs	r1, r2, r1
 8006bd6:	6139      	str	r1, [r7, #16]
 8006bd8:	4629      	mov	r1, r5
 8006bda:	eb63 0301 	sbc.w	r3, r3, r1
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	f04f 0300 	mov.w	r3, #0
 8006be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bec:	4659      	mov	r1, fp
 8006bee:	018b      	lsls	r3, r1, #6
 8006bf0:	4651      	mov	r1, sl
 8006bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bf6:	4651      	mov	r1, sl
 8006bf8:	018a      	lsls	r2, r1, #6
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	ebb2 0801 	subs.w	r8, r2, r1
 8006c00:	4659      	mov	r1, fp
 8006c02:	eb63 0901 	sbc.w	r9, r3, r1
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	f04f 0300 	mov.w	r3, #0
 8006c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c1a:	4690      	mov	r8, r2
 8006c1c:	4699      	mov	r9, r3
 8006c1e:	4623      	mov	r3, r4
 8006c20:	eb18 0303 	adds.w	r3, r8, r3
 8006c24:	60bb      	str	r3, [r7, #8]
 8006c26:	462b      	mov	r3, r5
 8006c28:	eb49 0303 	adc.w	r3, r9, r3
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	024b      	lsls	r3, r1, #9
 8006c3e:	4621      	mov	r1, r4
 8006c40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c44:	4621      	mov	r1, r4
 8006c46:	024a      	lsls	r2, r1, #9
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c4e:	2200      	movs	r2, #0
 8006c50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c58:	f7fa f826 	bl	8000ca8 <__aeabi_uldivmod>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4613      	mov	r3, r2
 8006c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c64:	e058      	b.n	8006d18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c66:	4b38      	ldr	r3, [pc, #224]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	099b      	lsrs	r3, r3, #6
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4618      	mov	r0, r3
 8006c70:	4611      	mov	r1, r2
 8006c72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c76:	623b      	str	r3, [r7, #32]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c80:	4642      	mov	r2, r8
 8006c82:	464b      	mov	r3, r9
 8006c84:	f04f 0000 	mov.w	r0, #0
 8006c88:	f04f 0100 	mov.w	r1, #0
 8006c8c:	0159      	lsls	r1, r3, #5
 8006c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c92:	0150      	lsls	r0, r2, #5
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4641      	mov	r1, r8
 8006c9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006cb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006cb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006cb8:	ebb2 040a 	subs.w	r4, r2, sl
 8006cbc:	eb63 050b 	sbc.w	r5, r3, fp
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	00eb      	lsls	r3, r5, #3
 8006cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cce:	00e2      	lsls	r2, r4, #3
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	461d      	mov	r5, r3
 8006cd4:	4643      	mov	r3, r8
 8006cd6:	18e3      	adds	r3, r4, r3
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	464b      	mov	r3, r9
 8006cdc:	eb45 0303 	adc.w	r3, r5, r3
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	f04f 0300 	mov.w	r3, #0
 8006cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cee:	4629      	mov	r1, r5
 8006cf0:	028b      	lsls	r3, r1, #10
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	028a      	lsls	r2, r1, #10
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d02:	2200      	movs	r2, #0
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	61fa      	str	r2, [r7, #28]
 8006d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d0c:	f7f9 ffcc 	bl	8000ca8 <__aeabi_uldivmod>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4613      	mov	r3, r2
 8006d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d18:	4b0b      	ldr	r3, [pc, #44]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	0c1b      	lsrs	r3, r3, #16
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	3301      	adds	r3, #1
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006d28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d32:	e002      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d34:	4b05      	ldr	r3, [pc, #20]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8006d36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3750      	adds	r7, #80	@ 0x50
 8006d40:	46bd      	mov	sp, r7
 8006d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d46:	bf00      	nop
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	00f42400 	.word	0x00f42400
 8006d50:	007a1200 	.word	0x007a1200

08006d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d58:	4b03      	ldr	r3, [pc, #12]	@ (8006d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20000028 	.word	0x20000028

08006d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d70:	f7ff fff0 	bl	8006d54 <HAL_RCC_GetHCLKFreq>
 8006d74:	4602      	mov	r2, r0
 8006d76:	4b05      	ldr	r3, [pc, #20]	@ (8006d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	0a9b      	lsrs	r3, r3, #10
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	4903      	ldr	r1, [pc, #12]	@ (8006d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d82:	5ccb      	ldrb	r3, [r1, r3]
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	080113f8 	.word	0x080113f8

08006d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d98:	f7ff ffdc 	bl	8006d54 <HAL_RCC_GetHCLKFreq>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	4b05      	ldr	r3, [pc, #20]	@ (8006db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	0b5b      	lsrs	r3, r3, #13
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	4903      	ldr	r1, [pc, #12]	@ (8006db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006daa:	5ccb      	ldrb	r3, [r1, r3]
 8006dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40023800 	.word	0x40023800
 8006db8:	080113f8 	.word	0x080113f8

08006dbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e07b      	b.n	8006ec6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d108      	bne.n	8006de8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dde:	d009      	beq.n	8006df4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	61da      	str	r2, [r3, #28]
 8006de6:	e005      	b.n	8006df4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7fd fb66 	bl	80044e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e78:	ea42 0103 	orr.w	r1, r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	0c1b      	lsrs	r3, r3, #16
 8006e92:	f003 0104 	and.w	r1, r3, #4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9a:	f003 0210 	and.w	r2, r3, #16
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006eb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b088      	sub	sp, #32
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	603b      	str	r3, [r7, #0]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ede:	f7fd fd71 	bl	80049c4 <HAL_GetTick>
 8006ee2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006ee4:	88fb      	ldrh	r3, [r7, #6]
 8006ee6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d001      	beq.n	8006ef8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e12a      	b.n	800714e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_SPI_Transmit+0x36>
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e122      	b.n	800714e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_SPI_Transmit+0x48>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e11b      	b.n	800714e <HAL_SPI_Transmit+0x280>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2203      	movs	r2, #3
 8006f22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	88fa      	ldrh	r2, [r7, #6]
 8006f36:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f64:	d10f      	bne.n	8006f86 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f90:	2b40      	cmp	r3, #64	@ 0x40
 8006f92:	d007      	beq.n	8006fa4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fac:	d152      	bne.n	8007054 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_SPI_Transmit+0xee>
 8006fb6:	8b7b      	ldrh	r3, [r7, #26]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d145      	bne.n	8007048 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc0:	881a      	ldrh	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fcc:	1c9a      	adds	r2, r3, #2
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fe0:	e032      	b.n	8007048 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d112      	bne.n	8007016 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff4:	881a      	ldrh	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007000:	1c9a      	adds	r2, r3, #2
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007014:	e018      	b.n	8007048 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007016:	f7fd fcd5 	bl	80049c4 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d803      	bhi.n	800702e <HAL_SPI_Transmit+0x160>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d102      	bne.n	8007034 <HAL_SPI_Transmit+0x166>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d109      	bne.n	8007048 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e082      	b.n	800714e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1c7      	bne.n	8006fe2 <HAL_SPI_Transmit+0x114>
 8007052:	e053      	b.n	80070fc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_SPI_Transmit+0x194>
 800705c:	8b7b      	ldrh	r3, [r7, #26]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d147      	bne.n	80070f2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	7812      	ldrb	r2, [r2, #0]
 800706e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007088:	e033      	b.n	80070f2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b02      	cmp	r3, #2
 8007096:	d113      	bne.n	80070c0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	7812      	ldrb	r2, [r2, #0]
 80070a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80070be:	e018      	b.n	80070f2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070c0:	f7fd fc80 	bl	80049c4 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d803      	bhi.n	80070d8 <HAL_SPI_Transmit+0x20a>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d102      	bne.n	80070de <HAL_SPI_Transmit+0x210>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e02d      	b.n	800714e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1c6      	bne.n	800708a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070fc:	69fa      	ldr	r2, [r7, #28]
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 fbe7 	bl	80078d4 <SPI_EndRxTxTransaction>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800711a:	2300      	movs	r3, #0
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800714c:	2300      	movs	r3, #0
  }
}
 800714e:	4618      	mov	r0, r3
 8007150:	3720      	adds	r7, #32
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b088      	sub	sp, #32
 800715a:	af02      	add	r7, sp, #8
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	603b      	str	r3, [r7, #0]
 8007162:	4613      	mov	r3, r2
 8007164:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b01      	cmp	r3, #1
 8007170:	d001      	beq.n	8007176 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007172:	2302      	movs	r3, #2
 8007174:	e104      	b.n	8007380 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800717e:	d112      	bne.n	80071a6 <HAL_SPI_Receive+0x50>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10e      	bne.n	80071a6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2204      	movs	r2, #4
 800718c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007190:	88fa      	ldrh	r2, [r7, #6]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	4613      	mov	r3, r2
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f8f3 	bl	8007388 <HAL_SPI_TransmitReceive>
 80071a2:	4603      	mov	r3, r0
 80071a4:	e0ec      	b.n	8007380 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071a6:	f7fd fc0d 	bl	80049c4 <HAL_GetTick>
 80071aa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <HAL_SPI_Receive+0x62>
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0e1      	b.n	8007380 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d101      	bne.n	80071ca <HAL_SPI_Receive+0x74>
 80071c6:	2302      	movs	r3, #2
 80071c8:	e0da      	b.n	8007380 <HAL_SPI_Receive+0x22a>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2204      	movs	r2, #4
 80071d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	88fa      	ldrh	r2, [r7, #6]
 80071ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007218:	d10f      	bne.n	800723a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007228:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007238:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007244:	2b40      	cmp	r3, #64	@ 0x40
 8007246:	d007      	beq.n	8007258 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007256:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d170      	bne.n	8007342 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007260:	e035      	b.n	80072ce <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b01      	cmp	r3, #1
 800726e:	d115      	bne.n	800729c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f103 020c 	add.w	r2, r3, #12
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727c:	7812      	ldrb	r2, [r2, #0]
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800729a:	e018      	b.n	80072ce <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800729c:	f7fd fb92 	bl	80049c4 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d803      	bhi.n	80072b4 <HAL_SPI_Receive+0x15e>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d102      	bne.n	80072ba <HAL_SPI_Receive+0x164>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e058      	b.n	8007380 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1c4      	bne.n	8007262 <HAL_SPI_Receive+0x10c>
 80072d8:	e038      	b.n	800734c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d113      	bne.n	8007310 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f2:	b292      	uxth	r2, r2
 80072f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fa:	1c9a      	adds	r2, r3, #2
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800730e:	e018      	b.n	8007342 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007310:	f7fd fb58 	bl	80049c4 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	429a      	cmp	r2, r3
 800731e:	d803      	bhi.n	8007328 <HAL_SPI_Receive+0x1d2>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d102      	bne.n	800732e <HAL_SPI_Receive+0x1d8>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d109      	bne.n	8007342 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e01e      	b.n	8007380 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007346:	b29b      	uxth	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1c6      	bne.n	80072da <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 fa59 	bl	8007808 <SPI_EndRxTransaction>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e000      	b.n	8007380 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800737e:	2300      	movs	r3, #0
  }
}
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	@ 0x28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007396:	2301      	movs	r3, #1
 8007398:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800739a:	f7fd fb13 	bl	80049c4 <HAL_GetTick>
 800739e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073a6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80073ae:	887b      	ldrh	r3, [r7, #2]
 80073b0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073b2:	7ffb      	ldrb	r3, [r7, #31]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d00c      	beq.n	80073d2 <HAL_SPI_TransmitReceive+0x4a>
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073be:	d106      	bne.n	80073ce <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d102      	bne.n	80073ce <HAL_SPI_TransmitReceive+0x46>
 80073c8:	7ffb      	ldrb	r3, [r7, #31]
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d001      	beq.n	80073d2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80073ce:	2302      	movs	r3, #2
 80073d0:	e17f      	b.n	80076d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <HAL_SPI_TransmitReceive+0x5c>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <HAL_SPI_TransmitReceive+0x5c>
 80073de:	887b      	ldrh	r3, [r7, #2]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e174      	b.n	80076d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_SPI_TransmitReceive+0x6e>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e16d      	b.n	80076d2 <HAL_SPI_TransmitReceive+0x34a>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b04      	cmp	r3, #4
 8007408:	d003      	beq.n	8007412 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2205      	movs	r2, #5
 800740e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	887a      	ldrh	r2, [r7, #2]
 8007422:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	887a      	ldrh	r2, [r7, #2]
 8007428:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	887a      	ldrh	r2, [r7, #2]
 8007434:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	887a      	ldrh	r2, [r7, #2]
 800743a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007452:	2b40      	cmp	r3, #64	@ 0x40
 8007454:	d007      	beq.n	8007466 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007464:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800746e:	d17e      	bne.n	800756e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_SPI_TransmitReceive+0xf6>
 8007478:	8afb      	ldrh	r3, [r7, #22]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d16c      	bne.n	8007558 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007482:	881a      	ldrh	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748e:	1c9a      	adds	r2, r3, #2
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074a2:	e059      	b.n	8007558 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d11b      	bne.n	80074ea <HAL_SPI_TransmitReceive+0x162>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d016      	beq.n	80074ea <HAL_SPI_TransmitReceive+0x162>
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d113      	bne.n	80074ea <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c6:	881a      	ldrh	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d2:	1c9a      	adds	r2, r3, #2
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d119      	bne.n	800752c <HAL_SPI_TransmitReceive+0x1a4>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d014      	beq.n	800752c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	b292      	uxth	r2, r2
 800750e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007514:	1c9a      	adds	r2, r3, #2
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800751e:	b29b      	uxth	r3, r3
 8007520:	3b01      	subs	r3, #1
 8007522:	b29a      	uxth	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007528:	2301      	movs	r3, #1
 800752a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800752c:	f7fd fa4a 	bl	80049c4 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007538:	429a      	cmp	r2, r3
 800753a:	d80d      	bhi.n	8007558 <HAL_SPI_TransmitReceive+0x1d0>
 800753c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	d009      	beq.n	8007558 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e0bc      	b.n	80076d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1a0      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x11c>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007566:	b29b      	uxth	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d19b      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x11c>
 800756c:	e082      	b.n	8007674 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <HAL_SPI_TransmitReceive+0x1f4>
 8007576:	8afb      	ldrh	r3, [r7, #22]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d171      	bne.n	8007660 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a2:	e05d      	b.n	8007660 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d11c      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x264>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d017      	beq.n	80075ec <HAL_SPI_TransmitReceive+0x264>
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d114      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	330c      	adds	r3, #12
 80075cc:	7812      	ldrb	r2, [r2, #0]
 80075ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d119      	bne.n	800762e <HAL_SPI_TransmitReceive+0x2a6>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d014      	beq.n	800762e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800762a:	2301      	movs	r3, #1
 800762c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800762e:	f7fd f9c9 	bl	80049c4 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800763a:	429a      	cmp	r2, r3
 800763c:	d803      	bhi.n	8007646 <HAL_SPI_TransmitReceive+0x2be>
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d102      	bne.n	800764c <HAL_SPI_TransmitReceive+0x2c4>
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e038      	b.n	80076d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d19c      	bne.n	80075a4 <HAL_SPI_TransmitReceive+0x21c>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d197      	bne.n	80075a4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007674:	6a3a      	ldr	r2, [r7, #32]
 8007676:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f92b 	bl	80078d4 <SPI_EndRxTxTransaction>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e01d      	b.n	80076d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800769e:	2300      	movs	r3, #0
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80076d0:	2300      	movs	r3, #0
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3728      	adds	r7, #40	@ 0x28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076e8:	b2db      	uxtb	r3, r3
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
	...

080076f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	4613      	mov	r3, r2
 8007706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007708:	f7fd f95c 	bl	80049c4 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	4413      	add	r3, r2
 8007716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007718:	f7fd f954 	bl	80049c4 <HAL_GetTick>
 800771c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800771e:	4b39      	ldr	r3, [pc, #228]	@ (8007804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	015b      	lsls	r3, r3, #5
 8007724:	0d1b      	lsrs	r3, r3, #20
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	fb02 f303 	mul.w	r3, r2, r3
 800772c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800772e:	e054      	b.n	80077da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	d050      	beq.n	80077da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007738:	f7fd f944 	bl	80049c4 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	429a      	cmp	r2, r3
 8007746:	d902      	bls.n	800774e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d13d      	bne.n	80077ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800775c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007766:	d111      	bne.n	800778c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007770:	d004      	beq.n	800777c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800777a:	d107      	bne.n	800778c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800778a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007794:	d10f      	bne.n	80077b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e017      	b.n	80077fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4013      	ands	r3, r2
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	bf0c      	ite	eq
 80077ea:	2301      	moveq	r3, #1
 80077ec:	2300      	movne	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d19b      	bne.n	8007730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3720      	adds	r7, #32
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000028 	.word	0x20000028

08007808 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af02      	add	r7, sp, #8
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800781c:	d111      	bne.n	8007842 <SPI_EndRxTransaction+0x3a>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007826:	d004      	beq.n	8007832 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007830:	d107      	bne.n	8007842 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007840:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800784a:	d12a      	bne.n	80078a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007854:	d012      	beq.n	800787c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	2180      	movs	r1, #128	@ 0x80
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f7ff ff49 	bl	80076f8 <SPI_WaitFlagStateUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d02d      	beq.n	80078c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007870:	f043 0220 	orr.w	r2, r3, #32
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e026      	b.n	80078ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2200      	movs	r2, #0
 8007884:	2101      	movs	r1, #1
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff ff36 	bl	80076f8 <SPI_WaitFlagStateUntilTimeout>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d01a      	beq.n	80078c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007896:	f043 0220 	orr.w	r2, r3, #32
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e013      	b.n	80078ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2200      	movs	r2, #0
 80078aa:	2101      	movs	r1, #1
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f7ff ff23 	bl	80076f8 <SPI_WaitFlagStateUntilTimeout>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d007      	beq.n	80078c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078bc:	f043 0220 	orr.w	r2, r3, #32
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e000      	b.n	80078ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af02      	add	r7, sp, #8
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2201      	movs	r2, #1
 80078e8:	2102      	movs	r1, #2
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff ff04 	bl	80076f8 <SPI_WaitFlagStateUntilTimeout>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d007      	beq.n	8007906 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fa:	f043 0220 	orr.w	r2, r3, #32
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e032      	b.n	800796c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007906:	4b1b      	ldr	r3, [pc, #108]	@ (8007974 <SPI_EndRxTxTransaction+0xa0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a1b      	ldr	r2, [pc, #108]	@ (8007978 <SPI_EndRxTxTransaction+0xa4>)
 800790c:	fba2 2303 	umull	r2, r3, r2, r3
 8007910:	0d5b      	lsrs	r3, r3, #21
 8007912:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007916:	fb02 f303 	mul.w	r3, r2, r3
 800791a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007924:	d112      	bne.n	800794c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2200      	movs	r2, #0
 800792e:	2180      	movs	r1, #128	@ 0x80
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff fee1 	bl	80076f8 <SPI_WaitFlagStateUntilTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d016      	beq.n	800796a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007940:	f043 0220 	orr.w	r2, r3, #32
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e00f      	b.n	800796c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	3b01      	subs	r3, #1
 8007956:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007962:	2b80      	cmp	r3, #128	@ 0x80
 8007964:	d0f2      	beq.n	800794c <SPI_EndRxTxTransaction+0x78>
 8007966:	e000      	b.n	800796a <SPI_EndRxTxTransaction+0x96>
        break;
 8007968:	bf00      	nop
  }

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	20000028 	.word	0x20000028
 8007978:	165e9f81 	.word	0x165e9f81

0800797c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e042      	b.n	8007a14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fc fe04 	bl	80045b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2224      	movs	r2, #36	@ 0x24
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f97f 	bl	8007cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695a      	ldr	r2, [r3, #20]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	@ 0x28
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	f040 8081 	bne.w	8007b40 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_UART_Receive+0x2e>
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e079      	b.n	8007b42 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2222      	movs	r2, #34	@ 0x22
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a62:	f7fc ffaf 	bl	80049c4 <HAL_GetTick>
 8007a66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	88fa      	ldrh	r2, [r7, #6]
 8007a6c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	88fa      	ldrh	r2, [r7, #6]
 8007a72:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a7c:	d108      	bne.n	8007a90 <HAL_UART_Receive+0x74>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d104      	bne.n	8007a90 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	61bb      	str	r3, [r7, #24]
 8007a8e:	e003      	b.n	8007a98 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a94:	2300      	movs	r3, #0
 8007a96:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007a98:	e047      	b.n	8007b2a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2120      	movs	r1, #32
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f850 	bl	8007b4a <UART_WaitOnFlagUntilTimeout>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e042      	b.n	8007b42 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10c      	bne.n	8007adc <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	3302      	adds	r3, #2
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	e01f      	b.n	8007b1c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ae4:	d007      	beq.n	8007af6 <HAL_UART_Receive+0xda>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <HAL_UART_Receive+0xe8>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	e008      	b.n	8007b16 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1b2      	bne.n	8007a9a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e000      	b.n	8007b42 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007b40:	2302      	movs	r3, #2
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3720      	adds	r7, #32
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b086      	sub	sp, #24
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	603b      	str	r3, [r7, #0]
 8007b56:	4613      	mov	r3, r2
 8007b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b5a:	e03b      	b.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b62:	d037      	beq.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b64:	f7fc ff2e 	bl	80049c4 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	6a3a      	ldr	r2, [r7, #32]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d302      	bcc.n	8007b7a <UART_WaitOnFlagUntilTimeout+0x30>
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e03a      	b.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d023      	beq.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b80      	cmp	r3, #128	@ 0x80
 8007b90:	d020      	beq.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b40      	cmp	r3, #64	@ 0x40
 8007b96:	d01d      	beq.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0308 	and.w	r3, r3, #8
 8007ba2:	2b08      	cmp	r3, #8
 8007ba4:	d116      	bne.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	617b      	str	r3, [r7, #20]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f81d 	bl	8007bfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e00f      	b.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	bf0c      	ite	eq
 8007be4:	2301      	moveq	r3, #1
 8007be6:	2300      	movne	r3, #0
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	461a      	mov	r2, r3
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d0b4      	beq.n	8007b5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b095      	sub	sp, #84	@ 0x54
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	330c      	adds	r3, #12
 8007c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	330c      	adds	r3, #12
 8007c22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c24:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e5      	bne.n	8007c04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3314      	adds	r3, #20
 8007c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	f023 0301 	bic.w	r3, r3, #1
 8007c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3314      	adds	r3, #20
 8007c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e5      	bne.n	8007c38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d119      	bne.n	8007ca8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f023 0310 	bic.w	r3, r3, #16
 8007c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	330c      	adds	r3, #12
 8007c92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c94:	61ba      	str	r2, [r7, #24]
 8007c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6979      	ldr	r1, [r7, #20]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e5      	bne.n	8007c74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007cb6:	bf00      	nop
 8007cb8:	3754      	adds	r7, #84	@ 0x54
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
	...

08007cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cc8:	b0c0      	sub	sp, #256	@ 0x100
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce0:	68d9      	ldr	r1, [r3, #12]
 8007ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	ea40 0301 	orr.w	r3, r0, r1
 8007cec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d1c:	f021 010c 	bic.w	r1, r1, #12
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d2a:	430b      	orrs	r3, r1
 8007d2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d3e:	6999      	ldr	r1, [r3, #24]
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	ea40 0301 	orr.w	r3, r0, r1
 8007d4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b8f      	ldr	r3, [pc, #572]	@ (8007f90 <UART_SetConfig+0x2cc>)
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d005      	beq.n	8007d64 <UART_SetConfig+0xa0>
 8007d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8007f94 <UART_SetConfig+0x2d0>)
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d104      	bne.n	8007d6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d64:	f7ff f816 	bl	8006d94 <HAL_RCC_GetPCLK2Freq>
 8007d68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007d6c:	e003      	b.n	8007d76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d6e:	f7fe fffd 	bl	8006d6c <HAL_RCC_GetPCLK1Freq>
 8007d72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d80:	f040 810c 	bne.w	8007f9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007d92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007d96:	4622      	mov	r2, r4
 8007d98:	462b      	mov	r3, r5
 8007d9a:	1891      	adds	r1, r2, r2
 8007d9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007d9e:	415b      	adcs	r3, r3
 8007da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007da2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007da6:	4621      	mov	r1, r4
 8007da8:	eb12 0801 	adds.w	r8, r2, r1
 8007dac:	4629      	mov	r1, r5
 8007dae:	eb43 0901 	adc.w	r9, r3, r1
 8007db2:	f04f 0200 	mov.w	r2, #0
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dc6:	4690      	mov	r8, r2
 8007dc8:	4699      	mov	r9, r3
 8007dca:	4623      	mov	r3, r4
 8007dcc:	eb18 0303 	adds.w	r3, r8, r3
 8007dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007dd4:	462b      	mov	r3, r5
 8007dd6:	eb49 0303 	adc.w	r3, r9, r3
 8007dda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007dee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007df2:	460b      	mov	r3, r1
 8007df4:	18db      	adds	r3, r3, r3
 8007df6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007df8:	4613      	mov	r3, r2
 8007dfa:	eb42 0303 	adc.w	r3, r2, r3
 8007dfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e08:	f7f8 ff4e 	bl	8000ca8 <__aeabi_uldivmod>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4b61      	ldr	r3, [pc, #388]	@ (8007f98 <UART_SetConfig+0x2d4>)
 8007e12:	fba3 2302 	umull	r2, r3, r3, r2
 8007e16:	095b      	lsrs	r3, r3, #5
 8007e18:	011c      	lsls	r4, r3, #4
 8007e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	1891      	adds	r1, r2, r2
 8007e32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e34:	415b      	adcs	r3, r3
 8007e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e42:	4649      	mov	r1, r9
 8007e44:	eb43 0b01 	adc.w	fp, r3, r1
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e5c:	4692      	mov	sl, r2
 8007e5e:	469b      	mov	fp, r3
 8007e60:	4643      	mov	r3, r8
 8007e62:	eb1a 0303 	adds.w	r3, sl, r3
 8007e66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	eb4b 0303 	adc.w	r3, fp, r3
 8007e70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	18db      	adds	r3, r3, r3
 8007e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e8e:	4613      	mov	r3, r2
 8007e90:	eb42 0303 	adc.w	r3, r2, r3
 8007e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007e9e:	f7f8 ff03 	bl	8000ca8 <__aeabi_uldivmod>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8007f98 <UART_SetConfig+0x2d4>)
 8007eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8007eae:	095b      	lsrs	r3, r3, #5
 8007eb0:	2264      	movs	r2, #100	@ 0x64
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
 8007eb6:	1acb      	subs	r3, r1, r3
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ebe:	4b36      	ldr	r3, [pc, #216]	@ (8007f98 <UART_SetConfig+0x2d4>)
 8007ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ec4:	095b      	lsrs	r3, r3, #5
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ecc:	441c      	add	r4, r3
 8007ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007edc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	1891      	adds	r1, r2, r2
 8007ee6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ee8:	415b      	adcs	r3, r3
 8007eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	1851      	adds	r1, r2, r1
 8007ef4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	414b      	adcs	r3, r1
 8007efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007f08:	4659      	mov	r1, fp
 8007f0a:	00cb      	lsls	r3, r1, #3
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f12:	4651      	mov	r1, sl
 8007f14:	00ca      	lsls	r2, r1, #3
 8007f16:	4610      	mov	r0, r2
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	189b      	adds	r3, r3, r2
 8007f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f24:	464b      	mov	r3, r9
 8007f26:	460a      	mov	r2, r1
 8007f28:	eb42 0303 	adc.w	r3, r2, r3
 8007f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f44:	460b      	mov	r3, r1
 8007f46:	18db      	adds	r3, r3, r3
 8007f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	eb42 0303 	adc.w	r3, r2, r3
 8007f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007f5a:	f7f8 fea5 	bl	8000ca8 <__aeabi_uldivmod>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4b0d      	ldr	r3, [pc, #52]	@ (8007f98 <UART_SetConfig+0x2d4>)
 8007f64:	fba3 1302 	umull	r1, r3, r3, r2
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	2164      	movs	r1, #100	@ 0x64
 8007f6c:	fb01 f303 	mul.w	r3, r1, r3
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	3332      	adds	r3, #50	@ 0x32
 8007f76:	4a08      	ldr	r2, [pc, #32]	@ (8007f98 <UART_SetConfig+0x2d4>)
 8007f78:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7c:	095b      	lsrs	r3, r3, #5
 8007f7e:	f003 0207 	and.w	r2, r3, #7
 8007f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4422      	add	r2, r4
 8007f8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f8c:	e106      	b.n	800819c <UART_SetConfig+0x4d8>
 8007f8e:	bf00      	nop
 8007f90:	40011000 	.word	0x40011000
 8007f94:	40011400 	.word	0x40011400
 8007f98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007faa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007fae:	4642      	mov	r2, r8
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	1891      	adds	r1, r2, r2
 8007fb4:	6239      	str	r1, [r7, #32]
 8007fb6:	415b      	adcs	r3, r3
 8007fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fbe:	4641      	mov	r1, r8
 8007fc0:	1854      	adds	r4, r2, r1
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	eb43 0501 	adc.w	r5, r3, r1
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	00eb      	lsls	r3, r5, #3
 8007fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fd6:	00e2      	lsls	r2, r4, #3
 8007fd8:	4614      	mov	r4, r2
 8007fda:	461d      	mov	r5, r3
 8007fdc:	4643      	mov	r3, r8
 8007fde:	18e3      	adds	r3, r4, r3
 8007fe0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fe4:	464b      	mov	r3, r9
 8007fe6:	eb45 0303 	adc.w	r3, r5, r3
 8007fea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ffa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800800a:	4629      	mov	r1, r5
 800800c:	008b      	lsls	r3, r1, #2
 800800e:	4621      	mov	r1, r4
 8008010:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008014:	4621      	mov	r1, r4
 8008016:	008a      	lsls	r2, r1, #2
 8008018:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800801c:	f7f8 fe44 	bl	8000ca8 <__aeabi_uldivmod>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4b60      	ldr	r3, [pc, #384]	@ (80081a8 <UART_SetConfig+0x4e4>)
 8008026:	fba3 2302 	umull	r2, r3, r3, r2
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	011c      	lsls	r4, r3, #4
 800802e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008032:	2200      	movs	r2, #0
 8008034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008038:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800803c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008040:	4642      	mov	r2, r8
 8008042:	464b      	mov	r3, r9
 8008044:	1891      	adds	r1, r2, r2
 8008046:	61b9      	str	r1, [r7, #24]
 8008048:	415b      	adcs	r3, r3
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008050:	4641      	mov	r1, r8
 8008052:	1851      	adds	r1, r2, r1
 8008054:	6139      	str	r1, [r7, #16]
 8008056:	4649      	mov	r1, r9
 8008058:	414b      	adcs	r3, r1
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	f04f 0200 	mov.w	r2, #0
 8008060:	f04f 0300 	mov.w	r3, #0
 8008064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008068:	4659      	mov	r1, fp
 800806a:	00cb      	lsls	r3, r1, #3
 800806c:	4651      	mov	r1, sl
 800806e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008072:	4651      	mov	r1, sl
 8008074:	00ca      	lsls	r2, r1, #3
 8008076:	4610      	mov	r0, r2
 8008078:	4619      	mov	r1, r3
 800807a:	4603      	mov	r3, r0
 800807c:	4642      	mov	r2, r8
 800807e:	189b      	adds	r3, r3, r2
 8008080:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008084:	464b      	mov	r3, r9
 8008086:	460a      	mov	r2, r1
 8008088:	eb42 0303 	adc.w	r3, r2, r3
 800808c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	67bb      	str	r3, [r7, #120]	@ 0x78
 800809a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80080a8:	4649      	mov	r1, r9
 80080aa:	008b      	lsls	r3, r1, #2
 80080ac:	4641      	mov	r1, r8
 80080ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080b2:	4641      	mov	r1, r8
 80080b4:	008a      	lsls	r2, r1, #2
 80080b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80080ba:	f7f8 fdf5 	bl	8000ca8 <__aeabi_uldivmod>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4611      	mov	r1, r2
 80080c4:	4b38      	ldr	r3, [pc, #224]	@ (80081a8 <UART_SetConfig+0x4e4>)
 80080c6:	fba3 2301 	umull	r2, r3, r3, r1
 80080ca:	095b      	lsrs	r3, r3, #5
 80080cc:	2264      	movs	r2, #100	@ 0x64
 80080ce:	fb02 f303 	mul.w	r3, r2, r3
 80080d2:	1acb      	subs	r3, r1, r3
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	3332      	adds	r3, #50	@ 0x32
 80080d8:	4a33      	ldr	r2, [pc, #204]	@ (80081a8 <UART_SetConfig+0x4e4>)
 80080da:	fba2 2303 	umull	r2, r3, r2, r3
 80080de:	095b      	lsrs	r3, r3, #5
 80080e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080e4:	441c      	add	r4, r3
 80080e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080ea:	2200      	movs	r2, #0
 80080ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80080ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80080f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80080f4:	4642      	mov	r2, r8
 80080f6:	464b      	mov	r3, r9
 80080f8:	1891      	adds	r1, r2, r2
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	415b      	adcs	r3, r3
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008104:	4641      	mov	r1, r8
 8008106:	1851      	adds	r1, r2, r1
 8008108:	6039      	str	r1, [r7, #0]
 800810a:	4649      	mov	r1, r9
 800810c:	414b      	adcs	r3, r1
 800810e:	607b      	str	r3, [r7, #4]
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800811c:	4659      	mov	r1, fp
 800811e:	00cb      	lsls	r3, r1, #3
 8008120:	4651      	mov	r1, sl
 8008122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008126:	4651      	mov	r1, sl
 8008128:	00ca      	lsls	r2, r1, #3
 800812a:	4610      	mov	r0, r2
 800812c:	4619      	mov	r1, r3
 800812e:	4603      	mov	r3, r0
 8008130:	4642      	mov	r2, r8
 8008132:	189b      	adds	r3, r3, r2
 8008134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008136:	464b      	mov	r3, r9
 8008138:	460a      	mov	r2, r1
 800813a:	eb42 0303 	adc.w	r3, r2, r3
 800813e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	663b      	str	r3, [r7, #96]	@ 0x60
 800814a:	667a      	str	r2, [r7, #100]	@ 0x64
 800814c:	f04f 0200 	mov.w	r2, #0
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008158:	4649      	mov	r1, r9
 800815a:	008b      	lsls	r3, r1, #2
 800815c:	4641      	mov	r1, r8
 800815e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008162:	4641      	mov	r1, r8
 8008164:	008a      	lsls	r2, r1, #2
 8008166:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800816a:	f7f8 fd9d 	bl	8000ca8 <__aeabi_uldivmod>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4b0d      	ldr	r3, [pc, #52]	@ (80081a8 <UART_SetConfig+0x4e4>)
 8008174:	fba3 1302 	umull	r1, r3, r3, r2
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	2164      	movs	r1, #100	@ 0x64
 800817c:	fb01 f303 	mul.w	r3, r1, r3
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	3332      	adds	r3, #50	@ 0x32
 8008186:	4a08      	ldr	r2, [pc, #32]	@ (80081a8 <UART_SetConfig+0x4e4>)
 8008188:	fba2 2303 	umull	r2, r3, r2, r3
 800818c:	095b      	lsrs	r3, r3, #5
 800818e:	f003 020f 	and.w	r2, r3, #15
 8008192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4422      	add	r2, r4
 800819a:	609a      	str	r2, [r3, #8]
}
 800819c:	bf00      	nop
 800819e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80081a2:	46bd      	mov	sp, r7
 80081a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081a8:	51eb851f 	.word	0x51eb851f

080081ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081ac:	b084      	sub	sp, #16
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	f107 001c 	add.w	r0, r7, #28
 80081ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d123      	bne.n	800820e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80081da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d105      	bne.n	8008202 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 fae8 	bl	80097d8 <USB_CoreReset>
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]
 800820c:	e01b      	b.n	8008246 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fadc 	bl	80097d8 <USB_CoreReset>
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008224:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008228:	2b00      	cmp	r3, #0
 800822a:	d106      	bne.n	800823a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008230:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	639a      	str	r2, [r3, #56]	@ 0x38
 8008238:	e005      	b.n	8008246 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008246:	7fbb      	ldrb	r3, [r7, #30]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d10b      	bne.n	8008264 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f043 0206 	orr.w	r2, r3, #6
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f043 0220 	orr.w	r2, r3, #32
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008270:	b004      	add	sp, #16
 8008272:	4770      	bx	lr

08008274 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d165      	bne.n	8008354 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	4a41      	ldr	r2, [pc, #260]	@ (8008390 <USB_SetTurnaroundTime+0x11c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d906      	bls.n	800829e <USB_SetTurnaroundTime+0x2a>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4a40      	ldr	r2, [pc, #256]	@ (8008394 <USB_SetTurnaroundTime+0x120>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d202      	bcs.n	800829e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008298:	230f      	movs	r3, #15
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	e062      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	4a3c      	ldr	r2, [pc, #240]	@ (8008394 <USB_SetTurnaroundTime+0x120>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d306      	bcc.n	80082b4 <USB_SetTurnaroundTime+0x40>
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	4a3b      	ldr	r2, [pc, #236]	@ (8008398 <USB_SetTurnaroundTime+0x124>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d202      	bcs.n	80082b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80082ae:	230e      	movs	r3, #14
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	e057      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	4a38      	ldr	r2, [pc, #224]	@ (8008398 <USB_SetTurnaroundTime+0x124>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d306      	bcc.n	80082ca <USB_SetTurnaroundTime+0x56>
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	4a37      	ldr	r2, [pc, #220]	@ (800839c <USB_SetTurnaroundTime+0x128>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d202      	bcs.n	80082ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80082c4:	230d      	movs	r3, #13
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	e04c      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	4a33      	ldr	r2, [pc, #204]	@ (800839c <USB_SetTurnaroundTime+0x128>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d306      	bcc.n	80082e0 <USB_SetTurnaroundTime+0x6c>
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4a32      	ldr	r2, [pc, #200]	@ (80083a0 <USB_SetTurnaroundTime+0x12c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d802      	bhi.n	80082e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80082da:	230c      	movs	r3, #12
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	e041      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4a2f      	ldr	r2, [pc, #188]	@ (80083a0 <USB_SetTurnaroundTime+0x12c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d906      	bls.n	80082f6 <USB_SetTurnaroundTime+0x82>
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4a2e      	ldr	r2, [pc, #184]	@ (80083a4 <USB_SetTurnaroundTime+0x130>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d802      	bhi.n	80082f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80082f0:	230b      	movs	r3, #11
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	e036      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4a2a      	ldr	r2, [pc, #168]	@ (80083a4 <USB_SetTurnaroundTime+0x130>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d906      	bls.n	800830c <USB_SetTurnaroundTime+0x98>
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	4a29      	ldr	r2, [pc, #164]	@ (80083a8 <USB_SetTurnaroundTime+0x134>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d802      	bhi.n	800830c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008306:	230a      	movs	r3, #10
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	e02b      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4a26      	ldr	r2, [pc, #152]	@ (80083a8 <USB_SetTurnaroundTime+0x134>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d906      	bls.n	8008322 <USB_SetTurnaroundTime+0xae>
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4a25      	ldr	r2, [pc, #148]	@ (80083ac <USB_SetTurnaroundTime+0x138>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d202      	bcs.n	8008322 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800831c:	2309      	movs	r3, #9
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e020      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4a21      	ldr	r2, [pc, #132]	@ (80083ac <USB_SetTurnaroundTime+0x138>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d306      	bcc.n	8008338 <USB_SetTurnaroundTime+0xc4>
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4a20      	ldr	r2, [pc, #128]	@ (80083b0 <USB_SetTurnaroundTime+0x13c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d802      	bhi.n	8008338 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008332:	2308      	movs	r3, #8
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	e015      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4a1d      	ldr	r2, [pc, #116]	@ (80083b0 <USB_SetTurnaroundTime+0x13c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d906      	bls.n	800834e <USB_SetTurnaroundTime+0xda>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4a1c      	ldr	r2, [pc, #112]	@ (80083b4 <USB_SetTurnaroundTime+0x140>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d202      	bcs.n	800834e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008348:	2307      	movs	r3, #7
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	e00a      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800834e:	2306      	movs	r3, #6
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	e007      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800835a:	2309      	movs	r3, #9
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	e001      	b.n	8008364 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008360:	2309      	movs	r3, #9
 8008362:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	029b      	lsls	r3, r3, #10
 8008378:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800837c:	431a      	orrs	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	00d8acbf 	.word	0x00d8acbf
 8008394:	00e4e1c0 	.word	0x00e4e1c0
 8008398:	00f42400 	.word	0x00f42400
 800839c:	01067380 	.word	0x01067380
 80083a0:	011a499f 	.word	0x011a499f
 80083a4:	01312cff 	.word	0x01312cff
 80083a8:	014ca43f 	.word	0x014ca43f
 80083ac:	016e3600 	.word	0x016e3600
 80083b0:	01a6ab1f 	.word	0x01a6ab1f
 80083b4:	01e84800 	.word	0x01e84800

080083b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f043 0201 	orr.w	r2, r3, #1
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f023 0201 	bic.w	r2, r3, #1
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d115      	bne.n	800844a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800842a:	200a      	movs	r0, #10
 800842c:	f7fc fad6 	bl	80049dc <HAL_Delay>
      ms += 10U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	330a      	adds	r3, #10
 8008434:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 f93f 	bl	80096ba <USB_GetMode>
 800843c:	4603      	mov	r3, r0
 800843e:	2b01      	cmp	r3, #1
 8008440:	d01e      	beq.n	8008480 <USB_SetCurrentMode+0x84>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2bc7      	cmp	r3, #199	@ 0xc7
 8008446:	d9f0      	bls.n	800842a <USB_SetCurrentMode+0x2e>
 8008448:	e01a      	b.n	8008480 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800844a:	78fb      	ldrb	r3, [r7, #3]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d115      	bne.n	800847c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800845c:	200a      	movs	r0, #10
 800845e:	f7fc fabd 	bl	80049dc <HAL_Delay>
      ms += 10U;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	330a      	adds	r3, #10
 8008466:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f001 f926 	bl	80096ba <USB_GetMode>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <USB_SetCurrentMode+0x84>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2bc7      	cmp	r3, #199	@ 0xc7
 8008478:	d9f0      	bls.n	800845c <USB_SetCurrentMode+0x60>
 800847a:	e001      	b.n	8008480 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e005      	b.n	800848c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2bc8      	cmp	r3, #200	@ 0xc8
 8008484:	d101      	bne.n	800848a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008494:	b084      	sub	sp, #16
 8008496:	b580      	push	{r7, lr}
 8008498:	b086      	sub	sp, #24
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80084a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084ae:	2300      	movs	r3, #0
 80084b0:	613b      	str	r3, [r7, #16]
 80084b2:	e009      	b.n	80084c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	3340      	adds	r3, #64	@ 0x40
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	2200      	movs	r2, #0
 80084c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	3301      	adds	r3, #1
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	2b0e      	cmp	r3, #14
 80084cc:	d9f2      	bls.n	80084b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d11c      	bne.n	8008510 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084e4:	f043 0302 	orr.w	r3, r3, #2
 80084e8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008506:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	639a      	str	r2, [r3, #56]	@ 0x38
 800850e:	e00b      	b.n	8008528 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008514:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008520:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800852e:	461a      	mov	r2, r3
 8008530:	2300      	movs	r3, #0
 8008532:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008534:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008538:	2b01      	cmp	r3, #1
 800853a:	d10d      	bne.n	8008558 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800853c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008540:	2b00      	cmp	r3, #0
 8008542:	d104      	bne.n	800854e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008544:	2100      	movs	r1, #0
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f968 	bl	800881c <USB_SetDevSpeed>
 800854c:	e008      	b.n	8008560 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800854e:	2101      	movs	r1, #1
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f963 	bl	800881c <USB_SetDevSpeed>
 8008556:	e003      	b.n	8008560 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008558:	2103      	movs	r1, #3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f95e 	bl	800881c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008560:	2110      	movs	r1, #16
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f8fa 	bl	800875c <USB_FlushTxFifo>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f924 	bl	80087c0 <USB_FlushRxFifo>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008588:	461a      	mov	r2, r3
 800858a:	2300      	movs	r3, #0
 800858c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008594:	461a      	mov	r2, r3
 8008596:	2300      	movs	r3, #0
 8008598:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085a0:	461a      	mov	r2, r3
 80085a2:	2300      	movs	r3, #0
 80085a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085a6:	2300      	movs	r3, #0
 80085a8:	613b      	str	r3, [r7, #16]
 80085aa:	e043      	b.n	8008634 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085c2:	d118      	bne.n	80085f6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10a      	bne.n	80085e0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085d6:	461a      	mov	r2, r3
 80085d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	e013      	b.n	8008608 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ec:	461a      	mov	r2, r3
 80085ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	e008      	b.n	8008608 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008602:	461a      	mov	r2, r3
 8008604:	2300      	movs	r3, #0
 8008606:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008614:	461a      	mov	r2, r3
 8008616:	2300      	movs	r3, #0
 8008618:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	4413      	add	r3, r2
 8008622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008626:	461a      	mov	r2, r3
 8008628:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800862c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	3301      	adds	r3, #1
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008638:	461a      	mov	r2, r3
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	4293      	cmp	r3, r2
 800863e:	d3b5      	bcc.n	80085ac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008640:	2300      	movs	r3, #0
 8008642:	613b      	str	r3, [r7, #16]
 8008644:	e043      	b.n	80086ce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4413      	add	r3, r2
 800864e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008658:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800865c:	d118      	bne.n	8008690 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008670:	461a      	mov	r2, r3
 8008672:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	e013      	b.n	80086a2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008686:	461a      	mov	r2, r3
 8008688:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	e008      	b.n	80086a2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800869c:	461a      	mov	r2, r3
 800869e:	2300      	movs	r3, #0
 80086a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ae:	461a      	mov	r2, r3
 80086b0:	2300      	movs	r3, #0
 80086b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086c0:	461a      	mov	r2, r3
 80086c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80086c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	3301      	adds	r3, #1
 80086cc:	613b      	str	r3, [r7, #16]
 80086ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80086d2:	461a      	mov	r2, r3
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d3b5      	bcc.n	8008646 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80086fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008700:	2b00      	cmp	r3, #0
 8008702:	d105      	bne.n	8008710 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	f043 0210 	orr.w	r2, r3, #16
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699a      	ldr	r2, [r3, #24]
 8008714:	4b10      	ldr	r3, [pc, #64]	@ (8008758 <USB_DevInit+0x2c4>)
 8008716:	4313      	orrs	r3, r2
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800871c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	f043 0208 	orr.w	r2, r3, #8
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008730:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008734:	2b01      	cmp	r3, #1
 8008736:	d107      	bne.n	8008748 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008740:	f043 0304 	orr.w	r3, r3, #4
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008754:	b004      	add	sp, #16
 8008756:	4770      	bx	lr
 8008758:	803c3800 	.word	0x803c3800

0800875c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3301      	adds	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008776:	d901      	bls.n	800877c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e01b      	b.n	80087b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	daf2      	bge.n	800876a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	019b      	lsls	r3, r3, #6
 800878c:	f043 0220 	orr.w	r2, r3, #32
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3301      	adds	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087a0:	d901      	bls.n	80087a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e006      	b.n	80087b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	d0f0      	beq.n	8008794 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087d8:	d901      	bls.n	80087de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e018      	b.n	8008810 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	daf2      	bge.n	80087cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2210      	movs	r2, #16
 80087ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3301      	adds	r3, #1
 80087f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087fc:	d901      	bls.n	8008802 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e006      	b.n	8008810 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0310 	and.w	r3, r3, #16
 800880a:	2b10      	cmp	r3, #16
 800880c:	d0f0      	beq.n	80087f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	68f9      	ldr	r1, [r7, #12]
 8008838:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800883c:	4313      	orrs	r3, r2
 800883e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800884e:	b480      	push	{r7}
 8008850:	b087      	sub	sp, #28
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 0306 	and.w	r3, r3, #6
 8008866:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800886e:	2300      	movs	r3, #0
 8008870:	75fb      	strb	r3, [r7, #23]
 8008872:	e00a      	b.n	800888a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d002      	beq.n	8008880 <USB_GetDevSpeed+0x32>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b06      	cmp	r3, #6
 800887e:	d102      	bne.n	8008886 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008880:	2302      	movs	r3, #2
 8008882:	75fb      	strb	r3, [r7, #23]
 8008884:	e001      	b.n	800888a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008886:	230f      	movs	r3, #15
 8008888:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
}
 800888c:	4618      	mov	r0, r3
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d13a      	bne.n	800892a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ba:	69da      	ldr	r2, [r3, #28]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	f003 030f 	and.w	r3, r3, #15
 80088c4:	2101      	movs	r1, #1
 80088c6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	68f9      	ldr	r1, [r7, #12]
 80088ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088d2:	4313      	orrs	r3, r2
 80088d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d155      	bne.n	8008998 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	791b      	ldrb	r3, [r3, #4]
 8008906:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008908:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	059b      	lsls	r3, r3, #22
 800890e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008910:	4313      	orrs	r3, r2
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	0151      	lsls	r1, r2, #5
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	440a      	add	r2, r1
 800891a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800891e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	e036      	b.n	8008998 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008930:	69da      	ldr	r2, [r3, #28]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	2101      	movs	r1, #1
 800893c:	fa01 f303 	lsl.w	r3, r1, r3
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008948:	4313      	orrs	r3, r2
 800894a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d11a      	bne.n	8008998 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	791b      	ldrb	r3, [r3, #4]
 800897c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800897e:	430b      	orrs	r3, r1
 8008980:	4313      	orrs	r3, r2
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	0151      	lsls	r1, r2, #5
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	440a      	add	r2, r1
 800898a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800898e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008996:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
	...

080089a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d161      	bne.n	8008a88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089da:	d11f      	bne.n	8008a1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80089fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	0151      	lsls	r1, r2, #5
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	440a      	add	r2, r1
 8008a12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	f003 030f 	and.w	r3, r3, #15
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	43db      	mvns	r3, r3
 8008a36:	68f9      	ldr	r1, [r7, #12]
 8008a38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a46:	69da      	ldr	r2, [r3, #28]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 030f 	and.w	r3, r3, #15
 8008a50:	2101      	movs	r1, #1
 8008a52:	fa01 f303 	lsl.w	r3, r1, r3
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	43db      	mvns	r3, r3
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a60:	4013      	ands	r3, r2
 8008a62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	0159      	lsls	r1, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	440b      	add	r3, r1
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a7e:	4619      	mov	r1, r3
 8008a80:	4b35      	ldr	r3, [pc, #212]	@ (8008b58 <USB_DeactivateEndpoint+0x1b0>)
 8008a82:	4013      	ands	r3, r2
 8008a84:	600b      	str	r3, [r1, #0]
 8008a86:	e060      	b.n	8008b4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a9e:	d11f      	bne.n	8008ae0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008abe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	0151      	lsls	r1, r2, #5
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	440a      	add	r2, r1
 8008ad6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ada:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ade:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ae6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	f003 030f 	and.w	r3, r3, #15
 8008af0:	2101      	movs	r1, #1
 8008af2:	fa01 f303 	lsl.w	r3, r1, r3
 8008af6:	041b      	lsls	r3, r3, #16
 8008af8:	43db      	mvns	r3, r3
 8008afa:	68f9      	ldr	r1, [r7, #12]
 8008afc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b00:	4013      	ands	r3, r2
 8008b02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b0a:	69da      	ldr	r2, [r3, #28]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	f003 030f 	and.w	r3, r3, #15
 8008b14:	2101      	movs	r1, #1
 8008b16:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1a:	041b      	lsls	r3, r3, #16
 8008b1c:	43db      	mvns	r3, r3
 8008b1e:	68f9      	ldr	r1, [r7, #12]
 8008b20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b24:	4013      	ands	r3, r2
 8008b26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	0159      	lsls	r1, r3, #5
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	440b      	add	r3, r1
 8008b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b42:	4619      	mov	r1, r3
 8008b44:	4b05      	ldr	r3, [pc, #20]	@ (8008b5c <USB_DeactivateEndpoint+0x1b4>)
 8008b46:	4013      	ands	r3, r2
 8008b48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	ec337800 	.word	0xec337800
 8008b5c:	eff37800 	.word	0xeff37800

08008b60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	@ 0x28
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	f040 817f 	bne.w	8008e80 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d132      	bne.n	8008bf0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	69fa      	ldr	r2, [r7, #28]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ba4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ba8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	0151      	lsls	r1, r2, #5
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	440a      	add	r2, r1
 8008bc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	0151      	lsls	r1, r2, #5
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	440a      	add	r2, r1
 8008be4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008be8:	0cdb      	lsrs	r3, r3, #19
 8008bea:	04db      	lsls	r3, r3, #19
 8008bec:	6113      	str	r3, [r2, #16]
 8008bee:	e097      	b.n	8008d20 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c0a:	0cdb      	lsrs	r3, r3, #19
 8008c0c:	04db      	lsls	r3, r3, #19
 8008c0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	0151      	lsls	r1, r2, #5
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	440a      	add	r2, r1
 8008c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c2a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c2e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c32:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d11a      	bne.n	8008c70 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	691a      	ldr	r2, [r3, #16]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d903      	bls.n	8008c4e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	689a      	ldr	r2, [r3, #8]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	0151      	lsls	r1, r2, #5
 8008c60:	69fa      	ldr	r2, [r7, #28]
 8008c62:	440a      	add	r2, r1
 8008c64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c6c:	6113      	str	r3, [r2, #16]
 8008c6e:	e044      	b.n	8008cfa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	691a      	ldr	r2, [r3, #16]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	4413      	add	r3, r2
 8008c7a:	1e5a      	subs	r2, r3, #1
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c84:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c92:	691a      	ldr	r2, [r3, #16]
 8008c94:	8afb      	ldrh	r3, [r7, #22]
 8008c96:	04d9      	lsls	r1, r3, #19
 8008c98:	4ba4      	ldr	r3, [pc, #656]	@ (8008f2c <USB_EPStartXfer+0x3cc>)
 8008c9a:	400b      	ands	r3, r1
 8008c9c:	69b9      	ldr	r1, [r7, #24]
 8008c9e:	0148      	lsls	r0, r1, #5
 8008ca0:	69f9      	ldr	r1, [r7, #28]
 8008ca2:	4401      	add	r1, r0
 8008ca4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	791b      	ldrb	r3, [r3, #4]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d122      	bne.n	8008cfa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	0151      	lsls	r1, r2, #5
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	440a      	add	r2, r1
 8008cca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008cd2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce0:	691a      	ldr	r2, [r3, #16]
 8008ce2:	8afb      	ldrh	r3, [r7, #22]
 8008ce4:	075b      	lsls	r3, r3, #29
 8008ce6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008cea:	69b9      	ldr	r1, [r7, #24]
 8008cec:	0148      	lsls	r0, r1, #5
 8008cee:	69f9      	ldr	r1, [r7, #28]
 8008cf0:	4401      	add	r1, r0
 8008cf2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d10:	69b9      	ldr	r1, [r7, #24]
 8008d12:	0148      	lsls	r0, r1, #5
 8008d14:	69f9      	ldr	r1, [r7, #28]
 8008d16:	4401      	add	r1, r0
 8008d18:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d14b      	bne.n	8008dbe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d009      	beq.n	8008d42 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	791b      	ldrb	r3, [r3, #4]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d128      	bne.n	8008d9c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d110      	bne.n	8008d7c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	0151      	lsls	r1, r2, #5
 8008d6c:	69fa      	ldr	r2, [r7, #28]
 8008d6e:	440a      	add	r2, r1
 8008d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	e00f      	b.n	8008d9c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	0151      	lsls	r1, r2, #5
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	440a      	add	r2, r1
 8008d92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d9a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008db6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008dba:	6013      	str	r3, [r2, #0]
 8008dbc:	e166      	b.n	800908c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	0151      	lsls	r1, r2, #5
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	440a      	add	r2, r1
 8008dd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dd8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ddc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	791b      	ldrb	r3, [r3, #4]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d015      	beq.n	8008e12 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 814e 	beq.w	800908c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	f003 030f 	and.w	r3, r3, #15
 8008e00:	2101      	movs	r1, #1
 8008e02:	fa01 f303 	lsl.w	r3, r1, r3
 8008e06:	69f9      	ldr	r1, [r7, #28]
 8008e08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	634b      	str	r3, [r1, #52]	@ 0x34
 8008e10:	e13c      	b.n	800908c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d110      	bne.n	8008e44 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	69fa      	ldr	r2, [r7, #28]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	e00f      	b.n	8008e64 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e62:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	68d9      	ldr	r1, [r3, #12]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	b298      	uxth	r0, r3
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	4603      	mov	r3, r0
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f9b9 	bl	80091f0 <USB_WritePacket>
 8008e7e:	e105      	b.n	800908c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	0151      	lsls	r1, r2, #5
 8008e92:	69fa      	ldr	r2, [r7, #28]
 8008e94:	440a      	add	r2, r1
 8008e96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e9a:	0cdb      	lsrs	r3, r3, #19
 8008e9c:	04db      	lsls	r3, r3, #19
 8008e9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	69ba      	ldr	r2, [r7, #24]
 8008eb0:	0151      	lsls	r1, r2, #5
 8008eb2:	69fa      	ldr	r2, [r7, #28]
 8008eb4:	440a      	add	r2, r1
 8008eb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ebe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ec2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d132      	bne.n	8008f30 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eee:	691a      	ldr	r2, [r3, #16]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ef8:	69b9      	ldr	r1, [r7, #24]
 8008efa:	0148      	lsls	r0, r1, #5
 8008efc:	69f9      	ldr	r1, [r7, #28]
 8008efe:	4401      	add	r1, r0
 8008f00:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008f04:	4313      	orrs	r3, r2
 8008f06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	0151      	lsls	r1, r2, #5
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	440a      	add	r2, r1
 8008f1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f26:	6113      	str	r3, [r2, #16]
 8008f28:	e062      	b.n	8008ff0 <USB_EPStartXfer+0x490>
 8008f2a:	bf00      	nop
 8008f2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d123      	bne.n	8008f80 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f44:	691a      	ldr	r2, [r3, #16]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f4e:	69b9      	ldr	r1, [r7, #24]
 8008f50:	0148      	lsls	r0, r1, #5
 8008f52:	69f9      	ldr	r1, [r7, #28]
 8008f54:	4401      	add	r1, r0
 8008f56:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	0151      	lsls	r1, r2, #5
 8008f70:	69fa      	ldr	r2, [r7, #28]
 8008f72:	440a      	add	r2, r1
 8008f74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f7c:	6113      	str	r3, [r2, #16]
 8008f7e:	e037      	b.n	8008ff0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	691a      	ldr	r2, [r3, #16]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	4413      	add	r3, r2
 8008f8a:	1e5a      	subs	r2, r3, #1
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f94:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	8afa      	ldrh	r2, [r7, #22]
 8008f9c:	fb03 f202 	mul.w	r2, r3, r2
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb0:	691a      	ldr	r2, [r3, #16]
 8008fb2:	8afb      	ldrh	r3, [r7, #22]
 8008fb4:	04d9      	lsls	r1, r3, #19
 8008fb6:	4b38      	ldr	r3, [pc, #224]	@ (8009098 <USB_EPStartXfer+0x538>)
 8008fb8:	400b      	ands	r3, r1
 8008fba:	69b9      	ldr	r1, [r7, #24]
 8008fbc:	0148      	lsls	r0, r1, #5
 8008fbe:	69f9      	ldr	r1, [r7, #28]
 8008fc0:	4401      	add	r1, r0
 8008fc2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd6:	691a      	ldr	r2, [r3, #16]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
 8008fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fe0:	69b9      	ldr	r1, [r7, #24]
 8008fe2:	0148      	lsls	r0, r1, #5
 8008fe4:	69f9      	ldr	r1, [r7, #28]
 8008fe6:	4401      	add	r1, r0
 8008fe8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008fec:	4313      	orrs	r3, r2
 8008fee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008ff0:	79fb      	ldrb	r3, [r7, #7]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d10d      	bne.n	8009012 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d009      	beq.n	8009012 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	68d9      	ldr	r1, [r3, #12]
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	4413      	add	r3, r2
 800900a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800900e:	460a      	mov	r2, r1
 8009010:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	791b      	ldrb	r3, [r3, #4]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d128      	bne.n	800906c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009026:	2b00      	cmp	r3, #0
 8009028:	d110      	bne.n	800904c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	440a      	add	r2, r1
 8009040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009044:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009048:	6013      	str	r3, [r2, #0]
 800904a:	e00f      	b.n	800906c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	0151      	lsls	r1, r2, #5
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	440a      	add	r2, r1
 8009062:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800906a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	0151      	lsls	r1, r2, #5
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	440a      	add	r2, r1
 8009082:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009086:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800908a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3720      	adds	r7, #32
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	1ff80000 	.word	0x1ff80000

0800909c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d14a      	bne.n	8009150 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090d2:	f040 8086 	bne.w	80091e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	7812      	ldrb	r2, [r2, #0]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80090f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	7812      	ldrb	r2, [r2, #0]
 800910e:	0151      	lsls	r1, r2, #5
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	440a      	add	r2, r1
 8009114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009118:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800911c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f242 7210 	movw	r2, #10000	@ 0x2710
 800912a:	4293      	cmp	r3, r2
 800912c:	d902      	bls.n	8009134 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	75fb      	strb	r3, [r7, #23]
          break;
 8009132:	e056      	b.n	80091e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009148:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800914c:	d0e7      	beq.n	800911e <USB_EPStopXfer+0x82>
 800914e:	e048      	b.n	80091e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	4413      	add	r3, r2
 800915a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009164:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009168:	d13b      	bne.n	80091e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	7812      	ldrb	r2, [r2, #0]
 800917e:	0151      	lsls	r1, r2, #5
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	440a      	add	r2, r1
 8009184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009188:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800918c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	7812      	ldrb	r2, [r2, #0]
 80091a2:	0151      	lsls	r1, r2, #5
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	440a      	add	r2, r1
 80091a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3301      	adds	r3, #1
 80091b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80091be:	4293      	cmp	r3, r2
 80091c0:	d902      	bls.n	80091c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	75fb      	strb	r3, [r7, #23]
          break;
 80091c6:	e00c      	b.n	80091e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091e0:	d0e7      	beq.n	80091b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	371c      	adds	r7, #28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b089      	sub	sp, #36	@ 0x24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	4611      	mov	r1, r2
 80091fc:	461a      	mov	r2, r3
 80091fe:	460b      	mov	r3, r1
 8009200:	71fb      	strb	r3, [r7, #7]
 8009202:	4613      	mov	r3, r2
 8009204:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800920e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009212:	2b00      	cmp	r3, #0
 8009214:	d123      	bne.n	800925e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009216:	88bb      	ldrh	r3, [r7, #4]
 8009218:	3303      	adds	r3, #3
 800921a:	089b      	lsrs	r3, r3, #2
 800921c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800921e:	2300      	movs	r3, #0
 8009220:	61bb      	str	r3, [r7, #24]
 8009222:	e018      	b.n	8009256 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	031a      	lsls	r2, r3, #12
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	4413      	add	r3, r2
 800922c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009230:	461a      	mov	r2, r3
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	3301      	adds	r3, #1
 800923c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	3301      	adds	r3, #1
 8009242:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	3301      	adds	r3, #1
 8009248:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	3301      	adds	r3, #1
 800924e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	3301      	adds	r3, #1
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	429a      	cmp	r2, r3
 800925c:	d3e2      	bcc.n	8009224 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3724      	adds	r7, #36	@ 0x24
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800926c:	b480      	push	{r7}
 800926e:	b08b      	sub	sp, #44	@ 0x2c
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4613      	mov	r3, r2
 8009278:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	089b      	lsrs	r3, r3, #2
 8009286:	b29b      	uxth	r3, r3
 8009288:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800928a:	88fb      	ldrh	r3, [r7, #6]
 800928c:	f003 0303 	and.w	r3, r3, #3
 8009290:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009292:	2300      	movs	r3, #0
 8009294:	623b      	str	r3, [r7, #32]
 8009296:	e014      	b.n	80092c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80092a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a6:	3301      	adds	r3, #1
 80092a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80092aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ac:	3301      	adds	r3, #1
 80092ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b2:	3301      	adds	r3, #1
 80092b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80092b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b8:	3301      	adds	r3, #1
 80092ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	3301      	adds	r3, #1
 80092c0:	623b      	str	r3, [r7, #32]
 80092c2:	6a3a      	ldr	r2, [r7, #32]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d3e6      	bcc.n	8009298 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80092ca:	8bfb      	ldrh	r3, [r7, #30]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d01e      	beq.n	800930e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092da:	461a      	mov	r2, r3
 80092dc:	f107 0310 	add.w	r3, r7, #16
 80092e0:	6812      	ldr	r2, [r2, #0]
 80092e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	fa22 f303 	lsr.w	r3, r2, r3
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f4:	701a      	strb	r2, [r3, #0]
      i++;
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	3301      	adds	r3, #1
 80092fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80092fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fe:	3301      	adds	r3, #1
 8009300:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009302:	8bfb      	ldrh	r3, [r7, #30]
 8009304:	3b01      	subs	r3, #1
 8009306:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009308:	8bfb      	ldrh	r3, [r7, #30]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1ea      	bne.n	80092e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800930e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009310:	4618      	mov	r0, r3
 8009312:	372c      	adds	r7, #44	@ 0x2c
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d12c      	bne.n	8009392 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4413      	add	r3, r2
 8009340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	db12      	blt.n	8009370 <USB_EPSetStall+0x54>
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00f      	beq.n	8009370 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	0151      	lsls	r1, r2, #5
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	440a      	add	r2, r1
 8009366:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800936a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800936e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	440a      	add	r2, r1
 8009386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800938a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	e02b      	b.n	80093ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	4413      	add	r3, r2
 800939a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	db12      	blt.n	80093ca <USB_EPSetStall+0xae>
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00f      	beq.n	80093ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80093c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80093e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d128      	bne.n	8009466 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	0151      	lsls	r1, r2, #5
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	440a      	add	r2, r1
 800942a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800942e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009432:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	791b      	ldrb	r3, [r3, #4]
 8009438:	2b03      	cmp	r3, #3
 800943a:	d003      	beq.n	8009444 <USB_EPClearStall+0x4c>
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	791b      	ldrb	r3, [r3, #4]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d138      	bne.n	80094b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	0151      	lsls	r1, r2, #5
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	440a      	add	r2, r1
 800945a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800945e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	e027      	b.n	80094b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	440a      	add	r2, r1
 800947c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009480:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009484:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	791b      	ldrb	r3, [r3, #4]
 800948a:	2b03      	cmp	r3, #3
 800948c:	d003      	beq.n	8009496 <USB_EPClearStall+0x9e>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	791b      	ldrb	r3, [r3, #4]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d10f      	bne.n	80094b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80094e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80094f8:	68f9      	ldr	r1, [r7, #12]
 80094fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094fe:	4313      	orrs	r3, r2
 8009500:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800952a:	f023 0303 	bic.w	r3, r3, #3
 800952e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800953e:	f023 0302 	bic.w	r3, r3, #2
 8009542:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3714      	adds	r7, #20
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009552:	b480      	push	{r7}
 8009554:	b085      	sub	sp, #20
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800956c:	f023 0303 	bic.w	r3, r3, #3
 8009570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009580:	f043 0302 	orr.w	r3, r3, #2
 8009584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4013      	ands	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095ac:	68fb      	ldr	r3, [r7, #12]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b085      	sub	sp, #20
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	4013      	ands	r3, r2
 80095dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	0c1b      	lsrs	r3, r3, #16
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	4013      	ands	r3, r2
 8009610:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	b29b      	uxth	r3, r3
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009622:	b480      	push	{r7}
 8009624:	b085      	sub	sp, #20
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	4013      	ands	r3, r2
 800964e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009650:	68bb      	ldr	r3, [r7, #8]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800965e:	b480      	push	{r7}
 8009660:	b087      	sub	sp, #28
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800967e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009680:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	f003 030f 	and.w	r3, r3, #15
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	fa22 f303 	lsr.w	r3, r2, r3
 800968e:	01db      	lsls	r3, r3, #7
 8009690:	b2db      	uxtb	r3, r3
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4313      	orrs	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4013      	ands	r3, r2
 80096aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096ac:	68bb      	ldr	r3, [r7, #8]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	371c      	adds	r7, #28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	f003 0301 	and.w	r3, r3, #1
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b085      	sub	sp, #20
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80096f4:	f023 0307 	bic.w	r3, r3, #7
 80096f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800970c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	460b      	mov	r3, r1
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	333c      	adds	r3, #60	@ 0x3c
 8009732:	3304      	adds	r3, #4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	4a26      	ldr	r2, [pc, #152]	@ (80097d4 <USB_EP0_OutStart+0xb8>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d90a      	bls.n	8009756 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800974c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009750:	d101      	bne.n	8009756 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	e037      	b.n	80097c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800975c:	461a      	mov	r2, r3
 800975e:	2300      	movs	r3, #0
 8009760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009770:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009784:	f043 0318 	orr.w	r3, r3, #24
 8009788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009798:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800979c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800979e:	7afb      	ldrb	r3, [r7, #11]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d10f      	bne.n	80097c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097aa:	461a      	mov	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097be:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80097c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	4f54300a 	.word	0x4f54300a

080097d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	3301      	adds	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097f0:	d901      	bls.n	80097f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e01b      	b.n	800982e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	daf2      	bge.n	80097e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	f043 0201 	orr.w	r2, r3, #1
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3301      	adds	r3, #1
 8009812:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800981a:	d901      	bls.n	8009820 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e006      	b.n	800982e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b01      	cmp	r3, #1
 800982a:	d0f0      	beq.n	800980e <USB_CoreReset+0x36>

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
	...

0800983c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009848:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800984c:	f002 fccc 	bl	800c1e8 <USBD_static_malloc>
 8009850:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d109      	bne.n	800986c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	32b0      	adds	r2, #176	@ 0xb0
 8009862:	2100      	movs	r1, #0
 8009864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009868:	2302      	movs	r3, #2
 800986a:	e0d4      	b.n	8009a16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800986c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009870:	2100      	movs	r1, #0
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f004 fc4d 	bl	800e112 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	32b0      	adds	r2, #176	@ 0xb0
 8009882:	68f9      	ldr	r1, [r7, #12]
 8009884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	32b0      	adds	r2, #176	@ 0xb0
 8009892:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	7c1b      	ldrb	r3, [r3, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d138      	bne.n	8009916 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098a4:	4b5e      	ldr	r3, [pc, #376]	@ (8009a20 <USBD_CDC_Init+0x1e4>)
 80098a6:	7819      	ldrb	r1, [r3, #0]
 80098a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098ac:	2202      	movs	r2, #2
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f002 fb77 	bl	800bfa2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80098b4:	4b5a      	ldr	r3, [pc, #360]	@ (8009a20 <USBD_CDC_Init+0x1e4>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	f003 020f 	and.w	r2, r3, #15
 80098bc:	6879      	ldr	r1, [r7, #4]
 80098be:	4613      	mov	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	440b      	add	r3, r1
 80098c8:	3324      	adds	r3, #36	@ 0x24
 80098ca:	2201      	movs	r2, #1
 80098cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80098ce:	4b55      	ldr	r3, [pc, #340]	@ (8009a24 <USBD_CDC_Init+0x1e8>)
 80098d0:	7819      	ldrb	r1, [r3, #0]
 80098d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098d6:	2202      	movs	r2, #2
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f002 fb62 	bl	800bfa2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80098de:	4b51      	ldr	r3, [pc, #324]	@ (8009a24 <USBD_CDC_Init+0x1e8>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	f003 020f 	and.w	r2, r3, #15
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	440b      	add	r3, r1
 80098f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098f6:	2201      	movs	r2, #1
 80098f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80098fa:	4b4b      	ldr	r3, [pc, #300]	@ (8009a28 <USBD_CDC_Init+0x1ec>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 020f 	and.w	r2, r3, #15
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	3326      	adds	r3, #38	@ 0x26
 8009910:	2210      	movs	r2, #16
 8009912:	801a      	strh	r2, [r3, #0]
 8009914:	e035      	b.n	8009982 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009916:	4b42      	ldr	r3, [pc, #264]	@ (8009a20 <USBD_CDC_Init+0x1e4>)
 8009918:	7819      	ldrb	r1, [r3, #0]
 800991a:	2340      	movs	r3, #64	@ 0x40
 800991c:	2202      	movs	r2, #2
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f002 fb3f 	bl	800bfa2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009924:	4b3e      	ldr	r3, [pc, #248]	@ (8009a20 <USBD_CDC_Init+0x1e4>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 020f 	and.w	r2, r3, #15
 800992c:	6879      	ldr	r1, [r7, #4]
 800992e:	4613      	mov	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	440b      	add	r3, r1
 8009938:	3324      	adds	r3, #36	@ 0x24
 800993a:	2201      	movs	r2, #1
 800993c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800993e:	4b39      	ldr	r3, [pc, #228]	@ (8009a24 <USBD_CDC_Init+0x1e8>)
 8009940:	7819      	ldrb	r1, [r3, #0]
 8009942:	2340      	movs	r3, #64	@ 0x40
 8009944:	2202      	movs	r2, #2
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f002 fb2b 	bl	800bfa2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800994c:	4b35      	ldr	r3, [pc, #212]	@ (8009a24 <USBD_CDC_Init+0x1e8>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	f003 020f 	and.w	r2, r3, #15
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	440b      	add	r3, r1
 8009960:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009964:	2201      	movs	r2, #1
 8009966:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009968:	4b2f      	ldr	r3, [pc, #188]	@ (8009a28 <USBD_CDC_Init+0x1ec>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f003 020f 	and.w	r2, r3, #15
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	440b      	add	r3, r1
 800997c:	3326      	adds	r3, #38	@ 0x26
 800997e:	2210      	movs	r2, #16
 8009980:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009982:	4b29      	ldr	r3, [pc, #164]	@ (8009a28 <USBD_CDC_Init+0x1ec>)
 8009984:	7819      	ldrb	r1, [r3, #0]
 8009986:	2308      	movs	r3, #8
 8009988:	2203      	movs	r2, #3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f002 fb09 	bl	800bfa2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009990:	4b25      	ldr	r3, [pc, #148]	@ (8009a28 <USBD_CDC_Init+0x1ec>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	f003 020f 	and.w	r2, r3, #15
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	440b      	add	r3, r1
 80099a4:	3324      	adds	r3, #36	@ 0x24
 80099a6:	2201      	movs	r2, #1
 80099a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	33b0      	adds	r3, #176	@ 0xb0
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80099e0:	2302      	movs	r3, #2
 80099e2:	e018      	b.n	8009a16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	7c1b      	ldrb	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10a      	bne.n	8009a02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009a24 <USBD_CDC_Init+0x1e8>)
 80099ee:	7819      	ldrb	r1, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f002 fbc0 	bl	800c180 <USBD_LL_PrepareReceive>
 8009a00:	e008      	b.n	8009a14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a02:	4b08      	ldr	r3, [pc, #32]	@ (8009a24 <USBD_CDC_Init+0x1e8>)
 8009a04:	7819      	ldrb	r1, [r3, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a0c:	2340      	movs	r3, #64	@ 0x40
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f002 fbb6 	bl	800c180 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	200000bb 	.word	0x200000bb
 8009a24:	200000bc 	.word	0x200000bc
 8009a28:	200000bd 	.word	0x200000bd

08009a2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009a38:	4b3a      	ldr	r3, [pc, #232]	@ (8009b24 <USBD_CDC_DeInit+0xf8>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f002 fad5 	bl	800bfee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009a44:	4b37      	ldr	r3, [pc, #220]	@ (8009b24 <USBD_CDC_DeInit+0xf8>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	f003 020f 	and.w	r2, r3, #15
 8009a4c:	6879      	ldr	r1, [r7, #4]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	440b      	add	r3, r1
 8009a58:	3324      	adds	r3, #36	@ 0x24
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009a5e:	4b32      	ldr	r3, [pc, #200]	@ (8009b28 <USBD_CDC_DeInit+0xfc>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f002 fac2 	bl	800bfee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b28 <USBD_CDC_DeInit+0xfc>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	f003 020f 	and.w	r2, r3, #15
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	440b      	add	r3, r1
 8009a7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a82:	2200      	movs	r2, #0
 8009a84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009a86:	4b29      	ldr	r3, [pc, #164]	@ (8009b2c <USBD_CDC_DeInit+0x100>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f002 faae 	bl	800bfee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009a92:	4b26      	ldr	r3, [pc, #152]	@ (8009b2c <USBD_CDC_DeInit+0x100>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	f003 020f 	and.w	r2, r3, #15
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	440b      	add	r3, r1
 8009aa6:	3324      	adds	r3, #36	@ 0x24
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009aac:	4b1f      	ldr	r3, [pc, #124]	@ (8009b2c <USBD_CDC_DeInit+0x100>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	f003 020f 	and.w	r2, r3, #15
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	440b      	add	r3, r1
 8009ac0:	3326      	adds	r3, #38	@ 0x26
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	32b0      	adds	r2, #176	@ 0xb0
 8009ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01f      	beq.n	8009b18 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	33b0      	adds	r3, #176	@ 0xb0
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	32b0      	adds	r2, #176	@ 0xb0
 8009af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f002 fb82 	bl	800c204 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	32b0      	adds	r2, #176	@ 0xb0
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	200000bb 	.word	0x200000bb
 8009b28:	200000bc 	.word	0x200000bc
 8009b2c:	200000bd 	.word	0x200000bd

08009b30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	32b0      	adds	r2, #176	@ 0xb0
 8009b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e0bf      	b.n	8009ce0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d050      	beq.n	8009c0e <USBD_CDC_Setup+0xde>
 8009b6c:	2b20      	cmp	r3, #32
 8009b6e:	f040 80af 	bne.w	8009cd0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	88db      	ldrh	r3, [r3, #6]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d03a      	beq.n	8009bf0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	b25b      	sxtb	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	da1b      	bge.n	8009bbc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	33b0      	adds	r3, #176	@ 0xb0
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009b9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	88d2      	ldrh	r2, [r2, #6]
 8009ba0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	2b07      	cmp	r3, #7
 8009ba8:	bf28      	it	cs
 8009baa:	2307      	movcs	r3, #7
 8009bac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	89fa      	ldrh	r2, [r7, #14]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f001 fd93 	bl	800b6e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009bba:	e090      	b.n	8009cde <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	785a      	ldrb	r2, [r3, #1]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	88db      	ldrh	r3, [r3, #6]
 8009bca:	2b3f      	cmp	r3, #63	@ 0x3f
 8009bcc:	d803      	bhi.n	8009bd6 <USBD_CDC_Setup+0xa6>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	88db      	ldrh	r3, [r3, #6]
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	e000      	b.n	8009bd8 <USBD_CDC_Setup+0xa8>
 8009bd6:	2240      	movs	r2, #64	@ 0x40
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009bde:	6939      	ldr	r1, [r7, #16]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009be6:	461a      	mov	r2, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f001 fda5 	bl	800b738 <USBD_CtlPrepareRx>
      break;
 8009bee:	e076      	b.n	8009cde <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	33b0      	adds	r3, #176	@ 0xb0
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	7850      	ldrb	r0, [r2, #1]
 8009c06:	2200      	movs	r2, #0
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	4798      	blx	r3
      break;
 8009c0c:	e067      	b.n	8009cde <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	785b      	ldrb	r3, [r3, #1]
 8009c12:	2b0b      	cmp	r3, #11
 8009c14:	d851      	bhi.n	8009cba <USBD_CDC_Setup+0x18a>
 8009c16:	a201      	add	r2, pc, #4	@ (adr r2, 8009c1c <USBD_CDC_Setup+0xec>)
 8009c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1c:	08009c4d 	.word	0x08009c4d
 8009c20:	08009cc9 	.word	0x08009cc9
 8009c24:	08009cbb 	.word	0x08009cbb
 8009c28:	08009cbb 	.word	0x08009cbb
 8009c2c:	08009cbb 	.word	0x08009cbb
 8009c30:	08009cbb 	.word	0x08009cbb
 8009c34:	08009cbb 	.word	0x08009cbb
 8009c38:	08009cbb 	.word	0x08009cbb
 8009c3c:	08009cbb 	.word	0x08009cbb
 8009c40:	08009cbb 	.word	0x08009cbb
 8009c44:	08009c77 	.word	0x08009c77
 8009c48:	08009ca1 	.word	0x08009ca1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d107      	bne.n	8009c68 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c58:	f107 030a 	add.w	r3, r7, #10
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f001 fd3d 	bl	800b6e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c66:	e032      	b.n	8009cce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 fcbb 	bl	800b5e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c70:	2303      	movs	r3, #3
 8009c72:	75fb      	strb	r3, [r7, #23]
          break;
 8009c74:	e02b      	b.n	8009cce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d107      	bne.n	8009c92 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c82:	f107 030d 	add.w	r3, r7, #13
 8009c86:	2201      	movs	r2, #1
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 fd28 	bl	800b6e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c90:	e01d      	b.n	8009cce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f001 fca6 	bl	800b5e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c9e:	e016      	b.n	8009cce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d00f      	beq.n	8009ccc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f001 fc99 	bl	800b5e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009cb8:	e008      	b.n	8009ccc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f001 fc92 	bl	800b5e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8009cc6:	e002      	b.n	8009cce <USBD_CDC_Setup+0x19e>
          break;
 8009cc8:	bf00      	nop
 8009cca:	e008      	b.n	8009cde <USBD_CDC_Setup+0x1ae>
          break;
 8009ccc:	bf00      	nop
      }
      break;
 8009cce:	e006      	b.n	8009cde <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 fc87 	bl	800b5e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	75fb      	strb	r3, [r7, #23]
      break;
 8009cdc:	bf00      	nop
  }

  return (uint8_t)ret;
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3718      	adds	r7, #24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009cfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	32b0      	adds	r2, #176	@ 0xb0
 8009d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e065      	b.n	8009dde <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	32b0      	adds	r2, #176	@ 0xb0
 8009d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	f003 020f 	and.w	r2, r3, #15
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	440b      	add	r3, r1
 8009d34:	3318      	adds	r3, #24
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d02f      	beq.n	8009d9c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009d3c:	78fb      	ldrb	r3, [r7, #3]
 8009d3e:	f003 020f 	and.w	r2, r3, #15
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	440b      	add	r3, r1
 8009d4e:	3318      	adds	r3, #24
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	78fb      	ldrb	r3, [r7, #3]
 8009d54:	f003 010f 	and.w	r1, r3, #15
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	00db      	lsls	r3, r3, #3
 8009d5e:	440b      	add	r3, r1
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4403      	add	r3, r0
 8009d64:	331c      	adds	r3, #28
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d6c:	fb01 f303 	mul.w	r3, r1, r3
 8009d70:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d112      	bne.n	8009d9c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009d76:	78fb      	ldrb	r3, [r7, #3]
 8009d78:	f003 020f 	and.w	r2, r3, #15
 8009d7c:	6879      	ldr	r1, [r7, #4]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	440b      	add	r3, r1
 8009d88:	3318      	adds	r3, #24
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d8e:	78f9      	ldrb	r1, [r7, #3]
 8009d90:	2300      	movs	r3, #0
 8009d92:	2200      	movs	r2, #0
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f002 f9d2 	bl	800c13e <USBD_LL_Transmit>
 8009d9a:	e01f      	b.n	8009ddc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	33b0      	adds	r3, #176	@ 0xb0
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d010      	beq.n	8009ddc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	33b0      	adds	r3, #176	@ 0xb0
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009dd8:	78fa      	ldrb	r2, [r7, #3]
 8009dda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	460b      	mov	r3, r1
 8009df0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	32b0      	adds	r2, #176	@ 0xb0
 8009dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	32b0      	adds	r2, #176	@ 0xb0
 8009e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e01a      	b.n	8009e4e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e18:	78fb      	ldrb	r3, [r7, #3]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f002 f9d0 	bl	800c1c2 <USBD_LL_GetRxDataSize>
 8009e22:	4602      	mov	r2, r0
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	33b0      	adds	r3, #176	@ 0xb0
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4413      	add	r3, r2
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009e48:	4611      	mov	r1, r2
 8009e4a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	32b0      	adds	r2, #176	@ 0xb0
 8009e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e024      	b.n	8009ec2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	33b0      	adds	r3, #176	@ 0xb0
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d019      	beq.n	8009ec0 <USBD_CDC_EP0_RxReady+0x6a>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009e92:	2bff      	cmp	r3, #255	@ 0xff
 8009e94:	d014      	beq.n	8009ec0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	33b0      	adds	r3, #176	@ 0xb0
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009eae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009eb6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	22ff      	movs	r2, #255	@ 0xff
 8009ebc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ed4:	2182      	movs	r1, #130	@ 0x82
 8009ed6:	4818      	ldr	r0, [pc, #96]	@ (8009f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ed8:	f000 fd4f 	bl	800a97a <USBD_GetEpDesc>
 8009edc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ede:	2101      	movs	r1, #1
 8009ee0:	4815      	ldr	r0, [pc, #84]	@ (8009f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ee2:	f000 fd4a 	bl	800a97a <USBD_GetEpDesc>
 8009ee6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ee8:	2181      	movs	r1, #129	@ 0x81
 8009eea:	4813      	ldr	r0, [pc, #76]	@ (8009f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009eec:	f000 fd45 	bl	800a97a <USBD_GetEpDesc>
 8009ef0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2210      	movs	r2, #16
 8009efc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d006      	beq.n	8009f12 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f0c:	711a      	strb	r2, [r3, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d006      	beq.n	8009f26 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f20:	711a      	strb	r2, [r3, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2243      	movs	r2, #67	@ 0x43
 8009f2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f2c:	4b02      	ldr	r3, [pc, #8]	@ (8009f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20000078 	.word	0x20000078

08009f3c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f44:	2182      	movs	r1, #130	@ 0x82
 8009f46:	4818      	ldr	r0, [pc, #96]	@ (8009fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f48:	f000 fd17 	bl	800a97a <USBD_GetEpDesc>
 8009f4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f4e:	2101      	movs	r1, #1
 8009f50:	4815      	ldr	r0, [pc, #84]	@ (8009fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f52:	f000 fd12 	bl	800a97a <USBD_GetEpDesc>
 8009f56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f58:	2181      	movs	r1, #129	@ 0x81
 8009f5a:	4813      	ldr	r0, [pc, #76]	@ (8009fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f5c:	f000 fd0d 	bl	800a97a <USBD_GetEpDesc>
 8009f60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2210      	movs	r2, #16
 8009f6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d006      	beq.n	8009f82 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	2200      	movs	r2, #0
 8009f78:	711a      	strb	r2, [r3, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f042 0202 	orr.w	r2, r2, #2
 8009f80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d006      	beq.n	8009f96 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	711a      	strb	r2, [r3, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f042 0202 	orr.w	r2, r2, #2
 8009f94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2243      	movs	r2, #67	@ 0x43
 8009f9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f9c:	4b02      	ldr	r3, [pc, #8]	@ (8009fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000078 	.word	0x20000078

08009fac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fb4:	2182      	movs	r1, #130	@ 0x82
 8009fb6:	4818      	ldr	r0, [pc, #96]	@ (800a018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fb8:	f000 fcdf 	bl	800a97a <USBD_GetEpDesc>
 8009fbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	4815      	ldr	r0, [pc, #84]	@ (800a018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fc2:	f000 fcda 	bl	800a97a <USBD_GetEpDesc>
 8009fc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009fc8:	2181      	movs	r1, #129	@ 0x81
 8009fca:	4813      	ldr	r0, [pc, #76]	@ (800a018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fcc:	f000 fcd5 	bl	800a97a <USBD_GetEpDesc>
 8009fd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2210      	movs	r2, #16
 8009fdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d006      	beq.n	8009ff2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fec:	711a      	strb	r2, [r3, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d006      	beq.n	800a006 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a000:	711a      	strb	r2, [r3, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2243      	movs	r2, #67	@ 0x43
 800a00a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a00c:	4b02      	ldr	r3, [pc, #8]	@ (800a018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3718      	adds	r7, #24
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20000078 	.word	0x20000078

0800a01c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	220a      	movs	r2, #10
 800a028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a02a:	4b03      	ldr	r3, [pc, #12]	@ (800a038 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	20000034 	.word	0x20000034

0800a03c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a04c:	2303      	movs	r3, #3
 800a04e:	e009      	b.n	800a064 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	33b0      	adds	r3, #176	@ 0xb0
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a070:	b480      	push	{r7}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	32b0      	adds	r2, #176	@ 0xb0
 800a086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a092:	2303      	movs	r3, #3
 800a094:	e008      	b.n	800a0a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	371c      	adds	r7, #28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	32b0      	adds	r2, #176	@ 0xb0
 800a0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e004      	b.n	800a0e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
	...

0800a0f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	32b0      	adds	r2, #176	@ 0xb0
 800a102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a106:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a108:	2301      	movs	r3, #1
 800a10a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d101      	bne.n	800a116 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a112:	2303      	movs	r3, #3
 800a114:	e025      	b.n	800a162 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d11f      	bne.n	800a160 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2201      	movs	r2, #1
 800a124:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a128:	4b10      	ldr	r3, [pc, #64]	@ (800a16c <USBD_CDC_TransmitPacket+0x7c>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	f003 020f 	and.w	r2, r3, #15
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	4613      	mov	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4403      	add	r3, r0
 800a142:	3318      	adds	r3, #24
 800a144:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a146:	4b09      	ldr	r3, [pc, #36]	@ (800a16c <USBD_CDC_TransmitPacket+0x7c>)
 800a148:	7819      	ldrb	r1, [r3, #0]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f001 fff1 	bl	800c13e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a160:	7bfb      	ldrb	r3, [r7, #15]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	200000bb 	.word	0x200000bb

0800a170 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	32b0      	adds	r2, #176	@ 0xb0
 800a182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a186:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	32b0      	adds	r2, #176	@ 0xb0
 800a192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e018      	b.n	800a1d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	7c1b      	ldrb	r3, [r3, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10a      	bne.n	800a1bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d8 <USBD_CDC_ReceivePacket+0x68>)
 800a1a8:	7819      	ldrb	r1, [r3, #0]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 ffe3 	bl	800c180 <USBD_LL_PrepareReceive>
 800a1ba:	e008      	b.n	800a1ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1bc:	4b06      	ldr	r3, [pc, #24]	@ (800a1d8 <USBD_CDC_ReceivePacket+0x68>)
 800a1be:	7819      	ldrb	r1, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1c6:	2340      	movs	r3, #64	@ 0x40
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f001 ffd9 	bl	800c180 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	200000bc 	.word	0x200000bc

0800a1dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e01f      	b.n	800a234 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	79fa      	ldrb	r2, [r7, #7]
 800a226:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f001 fe53 	bl	800bed4 <USBD_LL_Init>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a250:	2303      	movs	r3, #3
 800a252:	e025      	b.n	800a2a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	32ae      	adds	r2, #174	@ 0xae
 800a266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00f      	beq.n	800a290 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	32ae      	adds	r2, #174	@ 0xae
 800a27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a280:	f107 020e 	add.w	r2, r7, #14
 800a284:	4610      	mov	r0, r2
 800a286:	4798      	blx	r3
 800a288:	4602      	mov	r2, r0
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 fe5b 	bl	800bf6c <USBD_LL_Start>
 800a2b6:	4603      	mov	r3, r0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b084      	sub	sp, #16
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d009      	beq.n	800a304 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	78fa      	ldrb	r2, [r7, #3]
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	4798      	blx	r3
 800a300:	4603      	mov	r3, r0
 800a302:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a304:	7bfb      	ldrb	r3, [r7, #15]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	78fa      	ldrb	r2, [r7, #3]
 800a328:	4611      	mov	r1, r2
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	4798      	blx	r3
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a334:	2303      	movs	r3, #3
 800a336:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a338:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	4618      	mov	r0, r3
 800a356:	f001 f90c 	bl	800b572 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a368:	461a      	mov	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a376:	f003 031f 	and.w	r3, r3, #31
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d01a      	beq.n	800a3b4 <USBD_LL_SetupStage+0x72>
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d822      	bhi.n	800a3c8 <USBD_LL_SetupStage+0x86>
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <USBD_LL_SetupStage+0x4a>
 800a386:	2b01      	cmp	r3, #1
 800a388:	d00a      	beq.n	800a3a0 <USBD_LL_SetupStage+0x5e>
 800a38a:	e01d      	b.n	800a3c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fb63 	bl	800aa60 <USBD_StdDevReq>
 800a39a:	4603      	mov	r3, r0
 800a39c:	73fb      	strb	r3, [r7, #15]
      break;
 800a39e:	e020      	b.n	800a3e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fbcb 	bl	800ab44 <USBD_StdItfReq>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b2:	e016      	b.n	800a3e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fc2d 	bl	800ac1c <USBD_StdEPReq>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c6:	e00c      	b.n	800a3e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f001 fe28 	bl	800c02c <USBD_LL_StallEP>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e0:	bf00      	nop
  }

  return ret;
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a3fe:	7afb      	ldrb	r3, [r7, #11]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d16e      	bne.n	800a4e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a40a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a412:	2b03      	cmp	r3, #3
 800a414:	f040 8098 	bne.w	800a548 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	689a      	ldr	r2, [r3, #8]
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	429a      	cmp	r2, r3
 800a422:	d913      	bls.n	800a44c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	1ad2      	subs	r2, r2, r3
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	4293      	cmp	r3, r2
 800a43c:	bf28      	it	cs
 800a43e:	4613      	movcs	r3, r2
 800a440:	461a      	mov	r2, r3
 800a442:	6879      	ldr	r1, [r7, #4]
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f001 f994 	bl	800b772 <USBD_CtlContinueRx>
 800a44a:	e07d      	b.n	800a548 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a452:	f003 031f 	and.w	r3, r3, #31
 800a456:	2b02      	cmp	r3, #2
 800a458:	d014      	beq.n	800a484 <USBD_LL_DataOutStage+0x98>
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d81d      	bhi.n	800a49a <USBD_LL_DataOutStage+0xae>
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d002      	beq.n	800a468 <USBD_LL_DataOutStage+0x7c>
 800a462:	2b01      	cmp	r3, #1
 800a464:	d003      	beq.n	800a46e <USBD_LL_DataOutStage+0x82>
 800a466:	e018      	b.n	800a49a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a468:	2300      	movs	r3, #0
 800a46a:	75bb      	strb	r3, [r7, #22]
            break;
 800a46c:	e018      	b.n	800a4a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a474:	b2db      	uxtb	r3, r3
 800a476:	4619      	mov	r1, r3
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 fa64 	bl	800a946 <USBD_CoreFindIF>
 800a47e:	4603      	mov	r3, r0
 800a480:	75bb      	strb	r3, [r7, #22]
            break;
 800a482:	e00d      	b.n	800a4a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	4619      	mov	r1, r3
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fa66 	bl	800a960 <USBD_CoreFindEP>
 800a494:	4603      	mov	r3, r0
 800a496:	75bb      	strb	r3, [r7, #22]
            break;
 800a498:	e002      	b.n	800a4a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	75bb      	strb	r3, [r7, #22]
            break;
 800a49e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a4a0:	7dbb      	ldrb	r3, [r7, #22]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d119      	bne.n	800a4da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d113      	bne.n	800a4da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a4b2:	7dba      	ldrb	r2, [r7, #22]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	32ae      	adds	r2, #174	@ 0xae
 800a4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00b      	beq.n	800a4da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a4c2:	7dba      	ldrb	r2, [r7, #22]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a4ca:	7dba      	ldrb	r2, [r7, #22]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	32ae      	adds	r2, #174	@ 0xae
 800a4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f001 f95a 	bl	800b794 <USBD_CtlSendStatus>
 800a4e0:	e032      	b.n	800a548 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a4e2:	7afb      	ldrb	r3, [r7, #11]
 800a4e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 fa37 	bl	800a960 <USBD_CoreFindEP>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4f6:	7dbb      	ldrb	r3, [r7, #22]
 800a4f8:	2bff      	cmp	r3, #255	@ 0xff
 800a4fa:	d025      	beq.n	800a548 <USBD_LL_DataOutStage+0x15c>
 800a4fc:	7dbb      	ldrb	r3, [r7, #22]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d122      	bne.n	800a548 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d117      	bne.n	800a53e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a50e:	7dba      	ldrb	r2, [r7, #22]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	32ae      	adds	r2, #174	@ 0xae
 800a514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00f      	beq.n	800a53e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a51e:	7dba      	ldrb	r2, [r7, #22]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a526:	7dba      	ldrb	r2, [r7, #22]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	32ae      	adds	r2, #174	@ 0xae
 800a52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	7afa      	ldrb	r2, [r7, #11]
 800a534:	4611      	mov	r1, r2
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	4798      	blx	r3
 800a53a:	4603      	mov	r3, r0
 800a53c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a544:	7dfb      	ldrb	r3, [r7, #23]
 800a546:	e000      	b.n	800a54a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b086      	sub	sp, #24
 800a556:	af00      	add	r7, sp, #0
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	460b      	mov	r3, r1
 800a55c:	607a      	str	r2, [r7, #4]
 800a55e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a560:	7afb      	ldrb	r3, [r7, #11]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d16f      	bne.n	800a646 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3314      	adds	r3, #20
 800a56a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a572:	2b02      	cmp	r3, #2
 800a574:	d15a      	bne.n	800a62c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	689a      	ldr	r2, [r3, #8]
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d914      	bls.n	800a5ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	689a      	ldr	r2, [r3, #8]
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	1ad2      	subs	r2, r2, r3
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	461a      	mov	r2, r3
 800a596:	6879      	ldr	r1, [r7, #4]
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f001 f8bc 	bl	800b716 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a59e:	2300      	movs	r3, #0
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f001 fdeb 	bl	800c180 <USBD_LL_PrepareReceive>
 800a5aa:	e03f      	b.n	800a62c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	68da      	ldr	r2, [r3, #12]
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d11c      	bne.n	800a5f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d316      	bcc.n	800a5f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d20f      	bcs.n	800a5f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f001 f89d 	bl	800b716 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f001 fdc8 	bl	800c180 <USBD_LL_PrepareReceive>
 800a5f0:	e01c      	b.n	800a62c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d10f      	bne.n	800a61e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d009      	beq.n	800a61e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a61e:	2180      	movs	r1, #128	@ 0x80
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f001 fd03 	bl	800c02c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f001 f8c7 	bl	800b7ba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d03a      	beq.n	800a6ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f7ff fe42 	bl	800a2c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a644:	e032      	b.n	800a6ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a646:	7afb      	ldrb	r3, [r7, #11]
 800a648:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	4619      	mov	r1, r3
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 f985 	bl	800a960 <USBD_CoreFindEP>
 800a656:	4603      	mov	r3, r0
 800a658:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	2bff      	cmp	r3, #255	@ 0xff
 800a65e:	d025      	beq.n	800a6ac <USBD_LL_DataInStage+0x15a>
 800a660:	7dfb      	ldrb	r3, [r7, #23]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d122      	bne.n	800a6ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d11c      	bne.n	800a6ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a672:	7dfa      	ldrb	r2, [r7, #23]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	32ae      	adds	r2, #174	@ 0xae
 800a678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d014      	beq.n	800a6ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a682:	7dfa      	ldrb	r2, [r7, #23]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a68a:	7dfa      	ldrb	r2, [r7, #23]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	32ae      	adds	r2, #174	@ 0xae
 800a690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a694:	695b      	ldr	r3, [r3, #20]
 800a696:	7afa      	ldrb	r2, [r7, #11]
 800a698:	4611      	mov	r1, r2
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	4798      	blx	r3
 800a69e:	4603      	mov	r3, r0
 800a6a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a6a2:	7dbb      	ldrb	r3, [r7, #22]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a6a8:	7dbb      	ldrb	r3, [r7, #22]
 800a6aa:	e000      	b.n	800a6ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d014      	beq.n	800a71c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00e      	beq.n	800a71c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6852      	ldr	r2, [r2, #4]
 800a70a:	b2d2      	uxtb	r2, r2
 800a70c:	4611      	mov	r1, r2
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	4798      	blx	r3
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a718:	2303      	movs	r3, #3
 800a71a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a71c:	2340      	movs	r3, #64	@ 0x40
 800a71e:	2200      	movs	r2, #0
 800a720:	2100      	movs	r1, #0
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f001 fc3d 	bl	800bfa2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2240      	movs	r2, #64	@ 0x40
 800a734:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a738:	2340      	movs	r3, #64	@ 0x40
 800a73a:	2200      	movs	r2, #0
 800a73c:	2180      	movs	r1, #128	@ 0x80
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f001 fc2f 	bl	800bfa2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2240      	movs	r2, #64	@ 0x40
 800a74e:	621a      	str	r2, [r3, #32]

  return ret;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	460b      	mov	r3, r1
 800a764:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	78fa      	ldrb	r2, [r7, #3]
 800a76a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d006      	beq.n	800a79c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a794:	b2da      	uxtb	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2204      	movs	r2, #4
 800a7a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	d106      	bne.n	800a7d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a7cc:	b2da      	uxtb	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b082      	sub	sp, #8
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d110      	bne.n	800a818 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00b      	beq.n	800a818 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a812:	69db      	ldr	r3, [r3, #28]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	460b      	mov	r3, r1
 800a82c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	32ae      	adds	r2, #174	@ 0xae
 800a838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a840:	2303      	movs	r3, #3
 800a842:	e01c      	b.n	800a87e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b03      	cmp	r3, #3
 800a84e:	d115      	bne.n	800a87c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	32ae      	adds	r2, #174	@ 0xae
 800a85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85e:	6a1b      	ldr	r3, [r3, #32]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00b      	beq.n	800a87c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	32ae      	adds	r2, #174	@ 0xae
 800a86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a872:	6a1b      	ldr	r3, [r3, #32]
 800a874:	78fa      	ldrb	r2, [r7, #3]
 800a876:	4611      	mov	r1, r2
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	460b      	mov	r3, r1
 800a890:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	32ae      	adds	r2, #174	@ 0xae
 800a89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e01c      	b.n	800a8e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d115      	bne.n	800a8e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	32ae      	adds	r2, #174	@ 0xae
 800a8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00b      	beq.n	800a8e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	32ae      	adds	r2, #174	@ 0xae
 800a8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d8:	78fa      	ldrb	r2, [r7, #3]
 800a8da:	4611      	mov	r1, r2
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b083      	sub	sp, #12
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00e      	beq.n	800a93c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	6852      	ldr	r2, [r2, #4]
 800a92a:	b2d2      	uxtb	r2, r2
 800a92c:	4611      	mov	r1, r2
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	4798      	blx	r3
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a938:	2303      	movs	r3, #3
 800a93a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a946:	b480      	push	{r7}
 800a948:	b083      	sub	sp, #12
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	460b      	mov	r3, r1
 800a950:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a952:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a954:	4618      	mov	r0, r3
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	460b      	mov	r3, r1
 800a96a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a96c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a96e:	4618      	mov	r0, r3
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b086      	sub	sp, #24
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a98e:	2300      	movs	r3, #0
 800a990:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	885b      	ldrh	r3, [r3, #2]
 800a996:	b29b      	uxth	r3, r3
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	7812      	ldrb	r2, [r2, #0]
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d91f      	bls.n	800a9e0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a9a6:	e013      	b.n	800a9d0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a9a8:	f107 030a 	add.w	r3, r7, #10
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6978      	ldr	r0, [r7, #20]
 800a9b0:	f000 f81b 	bl	800a9ea <USBD_GetNextDesc>
 800a9b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	785b      	ldrb	r3, [r3, #1]
 800a9ba:	2b05      	cmp	r3, #5
 800a9bc:	d108      	bne.n	800a9d0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	789b      	ldrb	r3, [r3, #2]
 800a9c6:	78fa      	ldrb	r2, [r7, #3]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d008      	beq.n	800a9de <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	897b      	ldrh	r3, [r7, #10]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d8e5      	bhi.n	800a9a8 <USBD_GetEpDesc+0x2e>
 800a9dc:	e000      	b.n	800a9e0 <USBD_GetEpDesc+0x66>
          break;
 800a9de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a9e0:	693b      	ldr	r3, [r7, #16]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3718      	adds	r7, #24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	881b      	ldrh	r3, [r3, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	7812      	ldrb	r2, [r2, #0]
 800aa00:	4413      	add	r3, r2
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4413      	add	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa14:	68fb      	ldr	r3, [r7, #12]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b087      	sub	sp, #28
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	3301      	adds	r3, #1
 800aa38:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa40:	8a3b      	ldrh	r3, [r7, #16]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	b21a      	sxth	r2, r3
 800aa46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	b21b      	sxth	r3, r3
 800aa4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa50:	89fb      	ldrh	r3, [r7, #14]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	371c      	adds	r7, #28
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
	...

0800aa60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa76:	2b40      	cmp	r3, #64	@ 0x40
 800aa78:	d005      	beq.n	800aa86 <USBD_StdDevReq+0x26>
 800aa7a:	2b40      	cmp	r3, #64	@ 0x40
 800aa7c:	d857      	bhi.n	800ab2e <USBD_StdDevReq+0xce>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00f      	beq.n	800aaa2 <USBD_StdDevReq+0x42>
 800aa82:	2b20      	cmp	r3, #32
 800aa84:	d153      	bne.n	800ab2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	32ae      	adds	r2, #174	@ 0xae
 800aa90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	4798      	blx	r3
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa0:	e04a      	b.n	800ab38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b09      	cmp	r3, #9
 800aaa8:	d83b      	bhi.n	800ab22 <USBD_StdDevReq+0xc2>
 800aaaa:	a201      	add	r2, pc, #4	@ (adr r2, 800aab0 <USBD_StdDevReq+0x50>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800ab05 	.word	0x0800ab05
 800aab4:	0800ab19 	.word	0x0800ab19
 800aab8:	0800ab23 	.word	0x0800ab23
 800aabc:	0800ab0f 	.word	0x0800ab0f
 800aac0:	0800ab23 	.word	0x0800ab23
 800aac4:	0800aae3 	.word	0x0800aae3
 800aac8:	0800aad9 	.word	0x0800aad9
 800aacc:	0800ab23 	.word	0x0800ab23
 800aad0:	0800aafb 	.word	0x0800aafb
 800aad4:	0800aaed 	.word	0x0800aaed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa3c 	bl	800af58 <USBD_GetDescriptor>
          break;
 800aae0:	e024      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fba1 	bl	800b22c <USBD_SetAddress>
          break;
 800aaea:	e01f      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fbe0 	bl	800b2b4 <USBD_SetConfig>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]
          break;
 800aaf8:	e018      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fc83 	bl	800b408 <USBD_GetConfig>
          break;
 800ab02:	e013      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fcb4 	bl	800b474 <USBD_GetStatus>
          break;
 800ab0c:	e00e      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fce3 	bl	800b4dc <USBD_SetFeature>
          break;
 800ab16:	e009      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fd07 	bl	800b52e <USBD_ClrFeature>
          break;
 800ab20:	e004      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fd5e 	bl	800b5e6 <USBD_CtlError>
          break;
 800ab2a:	bf00      	nop
      }
      break;
 800ab2c:	e004      	b.n	800ab38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fd58 	bl	800b5e6 <USBD_CtlError>
      break;
 800ab36:	bf00      	nop
  }

  return ret;
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop

0800ab44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab5a:	2b40      	cmp	r3, #64	@ 0x40
 800ab5c:	d005      	beq.n	800ab6a <USBD_StdItfReq+0x26>
 800ab5e:	2b40      	cmp	r3, #64	@ 0x40
 800ab60:	d852      	bhi.n	800ac08 <USBD_StdItfReq+0xc4>
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <USBD_StdItfReq+0x26>
 800ab66:	2b20      	cmp	r3, #32
 800ab68:	d14e      	bne.n	800ac08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	3b01      	subs	r3, #1
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d840      	bhi.n	800abfa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	889b      	ldrh	r3, [r3, #4]
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d836      	bhi.n	800abf0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	889b      	ldrh	r3, [r3, #4]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff fedb 	bl	800a946 <USBD_CoreFindIF>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	2bff      	cmp	r3, #255	@ 0xff
 800ab98:	d01d      	beq.n	800abd6 <USBD_StdItfReq+0x92>
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d11a      	bne.n	800abd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aba0:	7bba      	ldrb	r2, [r7, #14]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	32ae      	adds	r2, #174	@ 0xae
 800aba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00f      	beq.n	800abd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800abb0:	7bba      	ldrb	r2, [r7, #14]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800abb8:	7bba      	ldrb	r2, [r7, #14]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	32ae      	adds	r2, #174	@ 0xae
 800abbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	4798      	blx	r3
 800abca:	4603      	mov	r3, r0
 800abcc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800abce:	e004      	b.n	800abda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800abd0:	2303      	movs	r3, #3
 800abd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800abd4:	e001      	b.n	800abda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800abd6:	2303      	movs	r3, #3
 800abd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	88db      	ldrh	r3, [r3, #6]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d110      	bne.n	800ac04 <USBD_StdItfReq+0xc0>
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10d      	bne.n	800ac04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fdd3 	bl	800b794 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abee:	e009      	b.n	800ac04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fcf7 	bl	800b5e6 <USBD_CtlError>
          break;
 800abf8:	e004      	b.n	800ac04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fcf2 	bl	800b5e6 <USBD_CtlError>
          break;
 800ac02:	e000      	b.n	800ac06 <USBD_StdItfReq+0xc2>
          break;
 800ac04:	bf00      	nop
      }
      break;
 800ac06:	e004      	b.n	800ac12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fceb 	bl	800b5e6 <USBD_CtlError>
      break;
 800ac10:	bf00      	nop
  }

  return ret;
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	889b      	ldrh	r3, [r3, #4]
 800ac2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac38:	2b40      	cmp	r3, #64	@ 0x40
 800ac3a:	d007      	beq.n	800ac4c <USBD_StdEPReq+0x30>
 800ac3c:	2b40      	cmp	r3, #64	@ 0x40
 800ac3e:	f200 817f 	bhi.w	800af40 <USBD_StdEPReq+0x324>
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d02a      	beq.n	800ac9c <USBD_StdEPReq+0x80>
 800ac46:	2b20      	cmp	r3, #32
 800ac48:	f040 817a 	bne.w	800af40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff fe85 	bl	800a960 <USBD_CoreFindEP>
 800ac56:	4603      	mov	r3, r0
 800ac58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac5a:	7b7b      	ldrb	r3, [r7, #13]
 800ac5c:	2bff      	cmp	r3, #255	@ 0xff
 800ac5e:	f000 8174 	beq.w	800af4a <USBD_StdEPReq+0x32e>
 800ac62:	7b7b      	ldrb	r3, [r7, #13]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f040 8170 	bne.w	800af4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ac6a:	7b7a      	ldrb	r2, [r7, #13]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ac72:	7b7a      	ldrb	r2, [r7, #13]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	32ae      	adds	r2, #174	@ 0xae
 800ac78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 8163 	beq.w	800af4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ac84:	7b7a      	ldrb	r2, [r7, #13]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	32ae      	adds	r2, #174	@ 0xae
 800ac8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
 800ac96:	4603      	mov	r3, r0
 800ac98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ac9a:	e156      	b.n	800af4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	785b      	ldrb	r3, [r3, #1]
 800aca0:	2b03      	cmp	r3, #3
 800aca2:	d008      	beq.n	800acb6 <USBD_StdEPReq+0x9a>
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	f300 8145 	bgt.w	800af34 <USBD_StdEPReq+0x318>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 809b 	beq.w	800ade6 <USBD_StdEPReq+0x1ca>
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d03c      	beq.n	800ad2e <USBD_StdEPReq+0x112>
 800acb4:	e13e      	b.n	800af34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d002      	beq.n	800acc8 <USBD_StdEPReq+0xac>
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	d016      	beq.n	800acf4 <USBD_StdEPReq+0xd8>
 800acc6:	e02c      	b.n	800ad22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00d      	beq.n	800acea <USBD_StdEPReq+0xce>
 800acce:	7bbb      	ldrb	r3, [r7, #14]
 800acd0:	2b80      	cmp	r3, #128	@ 0x80
 800acd2:	d00a      	beq.n	800acea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800acd4:	7bbb      	ldrb	r3, [r7, #14]
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f001 f9a7 	bl	800c02c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800acde:	2180      	movs	r1, #128	@ 0x80
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f001 f9a3 	bl	800c02c <USBD_LL_StallEP>
 800ace6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ace8:	e020      	b.n	800ad2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fc7a 	bl	800b5e6 <USBD_CtlError>
              break;
 800acf2:	e01b      	b.n	800ad2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	885b      	ldrh	r3, [r3, #2]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10e      	bne.n	800ad1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00b      	beq.n	800ad1a <USBD_StdEPReq+0xfe>
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	2b80      	cmp	r3, #128	@ 0x80
 800ad06:	d008      	beq.n	800ad1a <USBD_StdEPReq+0xfe>
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	88db      	ldrh	r3, [r3, #6]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d104      	bne.n	800ad1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad10:	7bbb      	ldrb	r3, [r7, #14]
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f001 f989 	bl	800c02c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fd3a 	bl	800b794 <USBD_CtlSendStatus>

              break;
 800ad20:	e004      	b.n	800ad2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fc5e 	bl	800b5e6 <USBD_CtlError>
              break;
 800ad2a:	bf00      	nop
          }
          break;
 800ad2c:	e107      	b.n	800af3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d002      	beq.n	800ad40 <USBD_StdEPReq+0x124>
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d016      	beq.n	800ad6c <USBD_StdEPReq+0x150>
 800ad3e:	e04b      	b.n	800add8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00d      	beq.n	800ad62 <USBD_StdEPReq+0x146>
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
 800ad48:	2b80      	cmp	r3, #128	@ 0x80
 800ad4a:	d00a      	beq.n	800ad62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad4c:	7bbb      	ldrb	r3, [r7, #14]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f001 f96b 	bl	800c02c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad56:	2180      	movs	r1, #128	@ 0x80
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f001 f967 	bl	800c02c <USBD_LL_StallEP>
 800ad5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad60:	e040      	b.n	800ade4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fc3e 	bl	800b5e6 <USBD_CtlError>
              break;
 800ad6a:	e03b      	b.n	800ade4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	885b      	ldrh	r3, [r3, #2]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d136      	bne.n	800ade2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d004      	beq.n	800ad88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 f971 	bl	800c06a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fd03 	bl	800b794 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff fde4 	bl	800a960 <USBD_CoreFindEP>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad9c:	7b7b      	ldrb	r3, [r7, #13]
 800ad9e:	2bff      	cmp	r3, #255	@ 0xff
 800ada0:	d01f      	beq.n	800ade2 <USBD_StdEPReq+0x1c6>
 800ada2:	7b7b      	ldrb	r3, [r7, #13]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d11c      	bne.n	800ade2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ada8:	7b7a      	ldrb	r2, [r7, #13]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800adb0:	7b7a      	ldrb	r2, [r7, #13]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	32ae      	adds	r2, #174	@ 0xae
 800adb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d010      	beq.n	800ade2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800adc0:	7b7a      	ldrb	r2, [r7, #13]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	32ae      	adds	r2, #174	@ 0xae
 800adc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	4798      	blx	r3
 800add2:	4603      	mov	r3, r0
 800add4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800add6:	e004      	b.n	800ade2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fc03 	bl	800b5e6 <USBD_CtlError>
              break;
 800ade0:	e000      	b.n	800ade4 <USBD_StdEPReq+0x1c8>
              break;
 800ade2:	bf00      	nop
          }
          break;
 800ade4:	e0ab      	b.n	800af3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d002      	beq.n	800adf8 <USBD_StdEPReq+0x1dc>
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d032      	beq.n	800ae5c <USBD_StdEPReq+0x240>
 800adf6:	e097      	b.n	800af28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adf8:	7bbb      	ldrb	r3, [r7, #14]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d007      	beq.n	800ae0e <USBD_StdEPReq+0x1f2>
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
 800ae00:	2b80      	cmp	r3, #128	@ 0x80
 800ae02:	d004      	beq.n	800ae0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fbed 	bl	800b5e6 <USBD_CtlError>
                break;
 800ae0c:	e091      	b.n	800af32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	da0b      	bge.n	800ae2e <USBD_StdEPReq+0x212>
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	3310      	adds	r3, #16
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	4413      	add	r3, r2
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	e00b      	b.n	800ae46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae34:	4613      	mov	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	4413      	add	r3, r2
 800ae44:	3304      	adds	r3, #4
 800ae46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2202      	movs	r2, #2
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fc43 	bl	800b6e0 <USBD_CtlSendData>
              break;
 800ae5a:	e06a      	b.n	800af32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	da11      	bge.n	800ae88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae64:	7bbb      	ldrb	r3, [r7, #14]
 800ae66:	f003 020f 	and.w	r2, r3, #15
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4413      	add	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	440b      	add	r3, r1
 800ae76:	3324      	adds	r3, #36	@ 0x24
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d117      	bne.n	800aeae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fbb0 	bl	800b5e6 <USBD_CtlError>
                  break;
 800ae86:	e054      	b.n	800af32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	f003 020f 	and.w	r2, r3, #15
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	440b      	add	r3, r1
 800ae9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d104      	bne.n	800aeae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fb9d 	bl	800b5e6 <USBD_CtlError>
                  break;
 800aeac:	e041      	b.n	800af32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aeae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da0b      	bge.n	800aece <USBD_StdEPReq+0x2b2>
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aebc:	4613      	mov	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	3310      	adds	r3, #16
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	4413      	add	r3, r2
 800aeca:	3304      	adds	r3, #4
 800aecc:	e00b      	b.n	800aee6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	4413      	add	r3, r2
 800aee4:	3304      	adds	r3, #4
 800aee6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d002      	beq.n	800aef4 <USBD_StdEPReq+0x2d8>
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	2b80      	cmp	r3, #128	@ 0x80
 800aef2:	d103      	bne.n	800aefc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	e00e      	b.n	800af1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f001 f8d1 	bl	800c0a8 <USBD_LL_IsStallEP>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2201      	movs	r2, #1
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	e002      	b.n	800af1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2202      	movs	r2, #2
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fbdd 	bl	800b6e0 <USBD_CtlSendData>
              break;
 800af26:	e004      	b.n	800af32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fb5b 	bl	800b5e6 <USBD_CtlError>
              break;
 800af30:	bf00      	nop
          }
          break;
 800af32:	e004      	b.n	800af3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fb55 	bl	800b5e6 <USBD_CtlError>
          break;
 800af3c:	bf00      	nop
      }
      break;
 800af3e:	e005      	b.n	800af4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fb4f 	bl	800b5e6 <USBD_CtlError>
      break;
 800af48:	e000      	b.n	800af4c <USBD_StdEPReq+0x330>
      break;
 800af4a:	bf00      	nop
  }

  return ret;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	885b      	ldrh	r3, [r3, #2]
 800af72:	0a1b      	lsrs	r3, r3, #8
 800af74:	b29b      	uxth	r3, r3
 800af76:	3b01      	subs	r3, #1
 800af78:	2b06      	cmp	r3, #6
 800af7a:	f200 8128 	bhi.w	800b1ce <USBD_GetDescriptor+0x276>
 800af7e:	a201      	add	r2, pc, #4	@ (adr r2, 800af84 <USBD_GetDescriptor+0x2c>)
 800af80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af84:	0800afa1 	.word	0x0800afa1
 800af88:	0800afb9 	.word	0x0800afb9
 800af8c:	0800aff9 	.word	0x0800aff9
 800af90:	0800b1cf 	.word	0x0800b1cf
 800af94:	0800b1cf 	.word	0x0800b1cf
 800af98:	0800b16f 	.word	0x0800b16f
 800af9c:	0800b19b 	.word	0x0800b19b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	7c12      	ldrb	r2, [r2, #16]
 800afac:	f107 0108 	add.w	r1, r7, #8
 800afb0:	4610      	mov	r0, r2
 800afb2:	4798      	blx	r3
 800afb4:	60f8      	str	r0, [r7, #12]
      break;
 800afb6:	e112      	b.n	800b1de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	7c1b      	ldrb	r3, [r3, #16]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10d      	bne.n	800afdc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc8:	f107 0208 	add.w	r2, r7, #8
 800afcc:	4610      	mov	r0, r2
 800afce:	4798      	blx	r3
 800afd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3301      	adds	r3, #1
 800afd6:	2202      	movs	r2, #2
 800afd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800afda:	e100      	b.n	800b1de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe4:	f107 0208 	add.w	r2, r7, #8
 800afe8:	4610      	mov	r0, r2
 800afea:	4798      	blx	r3
 800afec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3301      	adds	r3, #1
 800aff2:	2202      	movs	r2, #2
 800aff4:	701a      	strb	r2, [r3, #0]
      break;
 800aff6:	e0f2      	b.n	800b1de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	885b      	ldrh	r3, [r3, #2]
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b05      	cmp	r3, #5
 800b000:	f200 80ac 	bhi.w	800b15c <USBD_GetDescriptor+0x204>
 800b004:	a201      	add	r2, pc, #4	@ (adr r2, 800b00c <USBD_GetDescriptor+0xb4>)
 800b006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00a:	bf00      	nop
 800b00c:	0800b025 	.word	0x0800b025
 800b010:	0800b059 	.word	0x0800b059
 800b014:	0800b08d 	.word	0x0800b08d
 800b018:	0800b0c1 	.word	0x0800b0c1
 800b01c:	0800b0f5 	.word	0x0800b0f5
 800b020:	0800b129 	.word	0x0800b129
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00b      	beq.n	800b048 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	7c12      	ldrb	r2, [r2, #16]
 800b03c:	f107 0108 	add.w	r1, r7, #8
 800b040:	4610      	mov	r0, r2
 800b042:	4798      	blx	r3
 800b044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b046:	e091      	b.n	800b16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 facb 	bl	800b5e6 <USBD_CtlError>
            err++;
 800b050:	7afb      	ldrb	r3, [r7, #11]
 800b052:	3301      	adds	r3, #1
 800b054:	72fb      	strb	r3, [r7, #11]
          break;
 800b056:	e089      	b.n	800b16c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00b      	beq.n	800b07c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	7c12      	ldrb	r2, [r2, #16]
 800b070:	f107 0108 	add.w	r1, r7, #8
 800b074:	4610      	mov	r0, r2
 800b076:	4798      	blx	r3
 800b078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b07a:	e077      	b.n	800b16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fab1 	bl	800b5e6 <USBD_CtlError>
            err++;
 800b084:	7afb      	ldrb	r3, [r7, #11]
 800b086:	3301      	adds	r3, #1
 800b088:	72fb      	strb	r3, [r7, #11]
          break;
 800b08a:	e06f      	b.n	800b16c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00b      	beq.n	800b0b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	7c12      	ldrb	r2, [r2, #16]
 800b0a4:	f107 0108 	add.w	r1, r7, #8
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	4798      	blx	r3
 800b0ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0ae:	e05d      	b.n	800b16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fa97 	bl	800b5e6 <USBD_CtlError>
            err++;
 800b0b8:	7afb      	ldrb	r3, [r7, #11]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b0be:	e055      	b.n	800b16c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00b      	beq.n	800b0e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	7c12      	ldrb	r2, [r2, #16]
 800b0d8:	f107 0108 	add.w	r1, r7, #8
 800b0dc:	4610      	mov	r0, r2
 800b0de:	4798      	blx	r3
 800b0e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0e2:	e043      	b.n	800b16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fa7d 	bl	800b5e6 <USBD_CtlError>
            err++;
 800b0ec:	7afb      	ldrb	r3, [r7, #11]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b0f2:	e03b      	b.n	800b16c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00b      	beq.n	800b118 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	7c12      	ldrb	r2, [r2, #16]
 800b10c:	f107 0108 	add.w	r1, r7, #8
 800b110:	4610      	mov	r0, r2
 800b112:	4798      	blx	r3
 800b114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b116:	e029      	b.n	800b16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fa63 	bl	800b5e6 <USBD_CtlError>
            err++;
 800b120:	7afb      	ldrb	r3, [r7, #11]
 800b122:	3301      	adds	r3, #1
 800b124:	72fb      	strb	r3, [r7, #11]
          break;
 800b126:	e021      	b.n	800b16c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00b      	beq.n	800b14c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	7c12      	ldrb	r2, [r2, #16]
 800b140:	f107 0108 	add.w	r1, r7, #8
 800b144:	4610      	mov	r0, r2
 800b146:	4798      	blx	r3
 800b148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b14a:	e00f      	b.n	800b16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fa49 	bl	800b5e6 <USBD_CtlError>
            err++;
 800b154:	7afb      	ldrb	r3, [r7, #11]
 800b156:	3301      	adds	r3, #1
 800b158:	72fb      	strb	r3, [r7, #11]
          break;
 800b15a:	e007      	b.n	800b16c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fa41 	bl	800b5e6 <USBD_CtlError>
          err++;
 800b164:	7afb      	ldrb	r3, [r7, #11]
 800b166:	3301      	adds	r3, #1
 800b168:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b16a:	bf00      	nop
      }
      break;
 800b16c:	e037      	b.n	800b1de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	7c1b      	ldrb	r3, [r3, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d109      	bne.n	800b18a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b17c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b17e:	f107 0208 	add.w	r2, r7, #8
 800b182:	4610      	mov	r0, r2
 800b184:	4798      	blx	r3
 800b186:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b188:	e029      	b.n	800b1de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fa2a 	bl	800b5e6 <USBD_CtlError>
        err++;
 800b192:	7afb      	ldrb	r3, [r7, #11]
 800b194:	3301      	adds	r3, #1
 800b196:	72fb      	strb	r3, [r7, #11]
      break;
 800b198:	e021      	b.n	800b1de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	7c1b      	ldrb	r3, [r3, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10d      	bne.n	800b1be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1aa:	f107 0208 	add.w	r2, r7, #8
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	4798      	blx	r3
 800b1b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	2207      	movs	r2, #7
 800b1ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1bc:	e00f      	b.n	800b1de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 fa10 	bl	800b5e6 <USBD_CtlError>
        err++;
 800b1c6:	7afb      	ldrb	r3, [r7, #11]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	72fb      	strb	r3, [r7, #11]
      break;
 800b1cc:	e007      	b.n	800b1de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fa08 	bl	800b5e6 <USBD_CtlError>
      err++;
 800b1d6:	7afb      	ldrb	r3, [r7, #11]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	72fb      	strb	r3, [r7, #11]
      break;
 800b1dc:	bf00      	nop
  }

  if (err != 0U)
 800b1de:	7afb      	ldrb	r3, [r7, #11]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d11e      	bne.n	800b222 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	88db      	ldrh	r3, [r3, #6]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d016      	beq.n	800b21a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b1ec:	893b      	ldrh	r3, [r7, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00e      	beq.n	800b210 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	88da      	ldrh	r2, [r3, #6]
 800b1f6:	893b      	ldrh	r3, [r7, #8]
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	bf28      	it	cs
 800b1fc:	4613      	movcs	r3, r2
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b202:	893b      	ldrh	r3, [r7, #8]
 800b204:	461a      	mov	r2, r3
 800b206:	68f9      	ldr	r1, [r7, #12]
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fa69 	bl	800b6e0 <USBD_CtlSendData>
 800b20e:	e009      	b.n	800b224 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f9e7 	bl	800b5e6 <USBD_CtlError>
 800b218:	e004      	b.n	800b224 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 faba 	bl	800b794 <USBD_CtlSendStatus>
 800b220:	e000      	b.n	800b224 <USBD_GetDescriptor+0x2cc>
    return;
 800b222:	bf00      	nop
  }
}
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop

0800b22c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	889b      	ldrh	r3, [r3, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d131      	bne.n	800b2a2 <USBD_SetAddress+0x76>
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	88db      	ldrh	r3, [r3, #6]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d12d      	bne.n	800b2a2 <USBD_SetAddress+0x76>
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	885b      	ldrh	r3, [r3, #2]
 800b24a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b24c:	d829      	bhi.n	800b2a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	885b      	ldrh	r3, [r3, #2]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b258:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b03      	cmp	r3, #3
 800b264:	d104      	bne.n	800b270 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f9bc 	bl	800b5e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b26e:	e01d      	b.n	800b2ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	7bfa      	ldrb	r2, [r7, #15]
 800b274:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b278:	7bfb      	ldrb	r3, [r7, #15]
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 ff3f 	bl	800c100 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fa86 	bl	800b794 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d004      	beq.n	800b298 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2202      	movs	r2, #2
 800b292:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b296:	e009      	b.n	800b2ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2a0:	e004      	b.n	800b2ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f99e 	bl	800b5e6 <USBD_CtlError>
  }
}
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	885b      	ldrh	r3, [r3, #2]
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	4b4e      	ldr	r3, [pc, #312]	@ (800b404 <USBD_SetConfig+0x150>)
 800b2ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b2cc:	4b4d      	ldr	r3, [pc, #308]	@ (800b404 <USBD_SetConfig+0x150>)
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d905      	bls.n	800b2e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f985 	bl	800b5e6 <USBD_CtlError>
    return USBD_FAIL;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e08c      	b.n	800b3fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d002      	beq.n	800b2f2 <USBD_SetConfig+0x3e>
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	d029      	beq.n	800b344 <USBD_SetConfig+0x90>
 800b2f0:	e075      	b.n	800b3de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b2f2:	4b44      	ldr	r3, [pc, #272]	@ (800b404 <USBD_SetConfig+0x150>)
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d020      	beq.n	800b33c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b2fa:	4b42      	ldr	r3, [pc, #264]	@ (800b404 <USBD_SetConfig+0x150>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	461a      	mov	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b304:	4b3f      	ldr	r3, [pc, #252]	@ (800b404 <USBD_SetConfig+0x150>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7fe ffe3 	bl	800a2d6 <USBD_SetClassConfig>
 800b310:	4603      	mov	r3, r0
 800b312:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b314:	7bfb      	ldrb	r3, [r7, #15]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d008      	beq.n	800b32c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f962 	bl	800b5e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2202      	movs	r2, #2
 800b326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b32a:	e065      	b.n	800b3f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fa31 	bl	800b794 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2203      	movs	r2, #3
 800b336:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b33a:	e05d      	b.n	800b3f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fa29 	bl	800b794 <USBD_CtlSendStatus>
      break;
 800b342:	e059      	b.n	800b3f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b344:	4b2f      	ldr	r3, [pc, #188]	@ (800b404 <USBD_SetConfig+0x150>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d112      	bne.n	800b372 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2202      	movs	r2, #2
 800b350:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b354:	4b2b      	ldr	r3, [pc, #172]	@ (800b404 <USBD_SetConfig+0x150>)
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	461a      	mov	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b35e:	4b29      	ldr	r3, [pc, #164]	@ (800b404 <USBD_SetConfig+0x150>)
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7fe ffd2 	bl	800a30e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fa12 	bl	800b794 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b370:	e042      	b.n	800b3f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b372:	4b24      	ldr	r3, [pc, #144]	@ (800b404 <USBD_SetConfig+0x150>)
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	461a      	mov	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d02a      	beq.n	800b3d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	b2db      	uxtb	r3, r3
 800b386:	4619      	mov	r1, r3
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f7fe ffc0 	bl	800a30e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b38e:	4b1d      	ldr	r3, [pc, #116]	@ (800b404 <USBD_SetConfig+0x150>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b398:	4b1a      	ldr	r3, [pc, #104]	@ (800b404 <USBD_SetConfig+0x150>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7fe ff99 	bl	800a2d6 <USBD_SetClassConfig>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00f      	beq.n	800b3ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f918 	bl	800b5e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fe ffa5 	bl	800a30e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2202      	movs	r2, #2
 800b3c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b3cc:	e014      	b.n	800b3f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 f9e0 	bl	800b794 <USBD_CtlSendStatus>
      break;
 800b3d4:	e010      	b.n	800b3f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f9dc 	bl	800b794 <USBD_CtlSendStatus>
      break;
 800b3dc:	e00c      	b.n	800b3f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f900 	bl	800b5e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3e6:	4b07      	ldr	r3, [pc, #28]	@ (800b404 <USBD_SetConfig+0x150>)
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7fe ff8e 	bl	800a30e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b3f6:	bf00      	nop
  }

  return ret;
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	200004e8 	.word	0x200004e8

0800b408 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	88db      	ldrh	r3, [r3, #6]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d004      	beq.n	800b424 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f8e2 	bl	800b5e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b422:	e023      	b.n	800b46c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	dc02      	bgt.n	800b436 <USBD_GetConfig+0x2e>
 800b430:	2b00      	cmp	r3, #0
 800b432:	dc03      	bgt.n	800b43c <USBD_GetConfig+0x34>
 800b434:	e015      	b.n	800b462 <USBD_GetConfig+0x5a>
 800b436:	2b03      	cmp	r3, #3
 800b438:	d00b      	beq.n	800b452 <USBD_GetConfig+0x4a>
 800b43a:	e012      	b.n	800b462 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3308      	adds	r3, #8
 800b446:	2201      	movs	r2, #1
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f948 	bl	800b6e0 <USBD_CtlSendData>
        break;
 800b450:	e00c      	b.n	800b46c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3304      	adds	r3, #4
 800b456:	2201      	movs	r2, #1
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f940 	bl	800b6e0 <USBD_CtlSendData>
        break;
 800b460:	e004      	b.n	800b46c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f8be 	bl	800b5e6 <USBD_CtlError>
        break;
 800b46a:	bf00      	nop
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b484:	b2db      	uxtb	r3, r3
 800b486:	3b01      	subs	r3, #1
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d81e      	bhi.n	800b4ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	88db      	ldrh	r3, [r3, #6]
 800b490:	2b02      	cmp	r3, #2
 800b492:	d004      	beq.n	800b49e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f8a5 	bl	800b5e6 <USBD_CtlError>
        break;
 800b49c:	e01a      	b.n	800b4d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d005      	beq.n	800b4ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	f043 0202 	orr.w	r2, r3, #2
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	330c      	adds	r3, #12
 800b4be:	2202      	movs	r2, #2
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f90c 	bl	800b6e0 <USBD_CtlSendData>
      break;
 800b4c8:	e004      	b.n	800b4d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f88a 	bl	800b5e6 <USBD_CtlError>
      break;
 800b4d2:	bf00      	nop
  }
}
 800b4d4:	bf00      	nop
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	885b      	ldrh	r3, [r3, #2]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d107      	bne.n	800b4fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f94c 	bl	800b794 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b4fc:	e013      	b.n	800b526 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	885b      	ldrh	r3, [r3, #2]
 800b502:	2b02      	cmp	r3, #2
 800b504:	d10b      	bne.n	800b51e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	889b      	ldrh	r3, [r3, #4]
 800b50a:	0a1b      	lsrs	r3, r3, #8
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f93c 	bl	800b794 <USBD_CtlSendStatus>
}
 800b51c:	e003      	b.n	800b526 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b51e:	6839      	ldr	r1, [r7, #0]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 f860 	bl	800b5e6 <USBD_CtlError>
}
 800b526:	bf00      	nop
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b082      	sub	sp, #8
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	3b01      	subs	r3, #1
 800b542:	2b02      	cmp	r3, #2
 800b544:	d80b      	bhi.n	800b55e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	885b      	ldrh	r3, [r3, #2]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d10c      	bne.n	800b568 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f91c 	bl	800b794 <USBD_CtlSendStatus>
      }
      break;
 800b55c:	e004      	b.n	800b568 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f840 	bl	800b5e6 <USBD_CtlError>
      break;
 800b566:	e000      	b.n	800b56a <USBD_ClrFeature+0x3c>
      break;
 800b568:	bf00      	nop
  }
}
 800b56a:	bf00      	nop
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b084      	sub	sp, #16
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	781a      	ldrb	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3301      	adds	r3, #1
 800b58c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	781a      	ldrb	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	3301      	adds	r3, #1
 800b59a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f7ff fa40 	bl	800aa22 <SWAPBYTE>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f7ff fa33 	bl	800aa22 <SWAPBYTE>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	461a      	mov	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f7ff fa26 	bl	800aa22 <SWAPBYTE>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	461a      	mov	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	80da      	strh	r2, [r3, #6]
}
 800b5de:	bf00      	nop
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b082      	sub	sp, #8
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5f0:	2180      	movs	r1, #128	@ 0x80
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fd1a 	bl	800c02c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fd16 	bl	800c02c <USBD_LL_StallEP>
}
 800b600:	bf00      	nop
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b614:	2300      	movs	r3, #0
 800b616:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d042      	beq.n	800b6a4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b622:	6938      	ldr	r0, [r7, #16]
 800b624:	f000 f842 	bl	800b6ac <USBD_GetLen>
 800b628:	4603      	mov	r3, r0
 800b62a:	3301      	adds	r3, #1
 800b62c:	005b      	lsls	r3, r3, #1
 800b62e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b632:	d808      	bhi.n	800b646 <USBD_GetString+0x3e>
 800b634:	6938      	ldr	r0, [r7, #16]
 800b636:	f000 f839 	bl	800b6ac <USBD_GetLen>
 800b63a:	4603      	mov	r3, r0
 800b63c:	3301      	adds	r3, #1
 800b63e:	b29b      	uxth	r3, r3
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	b29a      	uxth	r2, r3
 800b644:	e001      	b.n	800b64a <USBD_GetString+0x42>
 800b646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b64e:	7dfb      	ldrb	r3, [r7, #23]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	4413      	add	r3, r2
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	7812      	ldrb	r2, [r2, #0]
 800b658:	701a      	strb	r2, [r3, #0]
  idx++;
 800b65a:	7dfb      	ldrb	r3, [r7, #23]
 800b65c:	3301      	adds	r3, #1
 800b65e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b660:	7dfb      	ldrb	r3, [r7, #23]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	4413      	add	r3, r2
 800b666:	2203      	movs	r2, #3
 800b668:	701a      	strb	r2, [r3, #0]
  idx++;
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
 800b66c:	3301      	adds	r3, #1
 800b66e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b670:	e013      	b.n	800b69a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b672:	7dfb      	ldrb	r3, [r7, #23]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	4413      	add	r3, r2
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	7812      	ldrb	r2, [r2, #0]
 800b67c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	3301      	adds	r3, #1
 800b682:	613b      	str	r3, [r7, #16]
    idx++;
 800b684:	7dfb      	ldrb	r3, [r7, #23]
 800b686:	3301      	adds	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b68a:	7dfb      	ldrb	r3, [r7, #23]
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	4413      	add	r3, r2
 800b690:	2200      	movs	r2, #0
 800b692:	701a      	strb	r2, [r3, #0]
    idx++;
 800b694:	7dfb      	ldrb	r3, [r7, #23]
 800b696:	3301      	adds	r3, #1
 800b698:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1e7      	bne.n	800b672 <USBD_GetString+0x6a>
 800b6a2:	e000      	b.n	800b6a6 <USBD_GetString+0x9e>
    return;
 800b6a4:	bf00      	nop
  }
}
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b6bc:	e005      	b.n	800b6ca <USBD_GetLen+0x1e>
  {
    len++;
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1f5      	bne.n	800b6be <USBD_GetLen+0x12>
  }

  return len;
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	2100      	movs	r1, #0
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 fd19 	bl	800c13e <USBD_LL_Transmit>

  return USBD_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	60b9      	str	r1, [r7, #8]
 800b720:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	2100      	movs	r1, #0
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 fd08 	bl	800c13e <USBD_LL_Transmit>

  return USBD_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2203      	movs	r2, #3
 800b748:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	2100      	movs	r1, #0
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f000 fd0c 	bl	800c180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b084      	sub	sp, #16
 800b776:	af00      	add	r7, sp, #0
 800b778:	60f8      	str	r0, [r7, #12]
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	2100      	movs	r1, #0
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f000 fcfb 	bl	800c180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2204      	movs	r2, #4
 800b7a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fcc7 	bl	800c13e <USBD_LL_Transmit>

  return USBD_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b082      	sub	sp, #8
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2205      	movs	r2, #5
 800b7c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fcd5 	bl	800c180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	4912      	ldr	r1, [pc, #72]	@ (800b830 <MX_USB_DEVICE_Init+0x50>)
 800b7e8:	4812      	ldr	r0, [pc, #72]	@ (800b834 <MX_USB_DEVICE_Init+0x54>)
 800b7ea:	f7fe fcf7 	bl	800a1dc <USBD_Init>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b7f4:	f7f8 fe46 	bl	8004484 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b7f8:	490f      	ldr	r1, [pc, #60]	@ (800b838 <MX_USB_DEVICE_Init+0x58>)
 800b7fa:	480e      	ldr	r0, [pc, #56]	@ (800b834 <MX_USB_DEVICE_Init+0x54>)
 800b7fc:	f7fe fd1e 	bl	800a23c <USBD_RegisterClass>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b806:	f7f8 fe3d 	bl	8004484 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b80a:	490c      	ldr	r1, [pc, #48]	@ (800b83c <MX_USB_DEVICE_Init+0x5c>)
 800b80c:	4809      	ldr	r0, [pc, #36]	@ (800b834 <MX_USB_DEVICE_Init+0x54>)
 800b80e:	f7fe fc15 	bl	800a03c <USBD_CDC_RegisterInterface>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b818:	f7f8 fe34 	bl	8004484 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b81c:	4805      	ldr	r0, [pc, #20]	@ (800b834 <MX_USB_DEVICE_Init+0x54>)
 800b81e:	f7fe fd43 	bl	800a2a8 <USBD_Start>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d001      	beq.n	800b82c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b828:	f7f8 fe2c 	bl	8004484 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b82c:	bf00      	nop
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	200000d4 	.word	0x200000d4
 800b834:	200004ec 	.word	0x200004ec
 800b838:	20000040 	.word	0x20000040
 800b83c:	200000c0 	.word	0x200000c0

0800b840 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b844:	2200      	movs	r2, #0
 800b846:	4905      	ldr	r1, [pc, #20]	@ (800b85c <CDC_Init_FS+0x1c>)
 800b848:	4805      	ldr	r0, [pc, #20]	@ (800b860 <CDC_Init_FS+0x20>)
 800b84a:	f7fe fc11 	bl	800a070 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b84e:	4905      	ldr	r1, [pc, #20]	@ (800b864 <CDC_Init_FS+0x24>)
 800b850:	4803      	ldr	r0, [pc, #12]	@ (800b860 <CDC_Init_FS+0x20>)
 800b852:	f7fe fc2f 	bl	800a0b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b856:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b858:	4618      	mov	r0, r3
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	20000fc8 	.word	0x20000fc8
 800b860:	200004ec 	.word	0x200004ec
 800b864:	200007c8 	.word	0x200007c8

0800b868 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b868:	b480      	push	{r7}
 800b86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b86c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b86e:	4618      	mov	r0, r3
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	4603      	mov	r3, r0
 800b880:	6039      	str	r1, [r7, #0]
 800b882:	71fb      	strb	r3, [r7, #7]
 800b884:	4613      	mov	r3, r2
 800b886:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b888:	79fb      	ldrb	r3, [r7, #7]
 800b88a:	2b23      	cmp	r3, #35	@ 0x23
 800b88c:	d84a      	bhi.n	800b924 <CDC_Control_FS+0xac>
 800b88e:	a201      	add	r2, pc, #4	@ (adr r2, 800b894 <CDC_Control_FS+0x1c>)
 800b890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b894:	0800b925 	.word	0x0800b925
 800b898:	0800b925 	.word	0x0800b925
 800b89c:	0800b925 	.word	0x0800b925
 800b8a0:	0800b925 	.word	0x0800b925
 800b8a4:	0800b925 	.word	0x0800b925
 800b8a8:	0800b925 	.word	0x0800b925
 800b8ac:	0800b925 	.word	0x0800b925
 800b8b0:	0800b925 	.word	0x0800b925
 800b8b4:	0800b925 	.word	0x0800b925
 800b8b8:	0800b925 	.word	0x0800b925
 800b8bc:	0800b925 	.word	0x0800b925
 800b8c0:	0800b925 	.word	0x0800b925
 800b8c4:	0800b925 	.word	0x0800b925
 800b8c8:	0800b925 	.word	0x0800b925
 800b8cc:	0800b925 	.word	0x0800b925
 800b8d0:	0800b925 	.word	0x0800b925
 800b8d4:	0800b925 	.word	0x0800b925
 800b8d8:	0800b925 	.word	0x0800b925
 800b8dc:	0800b925 	.word	0x0800b925
 800b8e0:	0800b925 	.word	0x0800b925
 800b8e4:	0800b925 	.word	0x0800b925
 800b8e8:	0800b925 	.word	0x0800b925
 800b8ec:	0800b925 	.word	0x0800b925
 800b8f0:	0800b925 	.word	0x0800b925
 800b8f4:	0800b925 	.word	0x0800b925
 800b8f8:	0800b925 	.word	0x0800b925
 800b8fc:	0800b925 	.word	0x0800b925
 800b900:	0800b925 	.word	0x0800b925
 800b904:	0800b925 	.word	0x0800b925
 800b908:	0800b925 	.word	0x0800b925
 800b90c:	0800b925 	.word	0x0800b925
 800b910:	0800b925 	.word	0x0800b925
 800b914:	0800b925 	.word	0x0800b925
 800b918:	0800b925 	.word	0x0800b925
 800b91c:	0800b925 	.word	0x0800b925
 800b920:	0800b925 	.word	0x0800b925
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b924:	bf00      	nop
  }

  return (USBD_OK);
 800b926:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b928:	4618      	mov	r0, r3
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    dataSize = *Len;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a18      	ldr	r2, [pc, #96]	@ (800b9a4 <CDC_Receive_FS+0x70>)
 800b944:	6013      	str	r3, [r2, #0]

	Rxcount = 0;
 800b946:	4b18      	ldr	r3, [pc, #96]	@ (800b9a8 <CDC_Receive_FS+0x74>)
 800b948:	2200      	movs	r2, #0
 800b94a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataSize; i++)
 800b94c:	2300      	movs	r3, #0
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	e00f      	b.n	800b972 <CDC_Receive_FS+0x3e>
	{
		ReceivedData[Rxcount++] = Buf[i];
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	441a      	add	r2, r3
 800b958:	4b13      	ldr	r3, [pc, #76]	@ (800b9a8 <CDC_Receive_FS+0x74>)
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	1c59      	adds	r1, r3, #1
 800b95e:	b2c8      	uxtb	r0, r1
 800b960:	4911      	ldr	r1, [pc, #68]	@ (800b9a8 <CDC_Receive_FS+0x74>)
 800b962:	7008      	strb	r0, [r1, #0]
 800b964:	4619      	mov	r1, r3
 800b966:	7812      	ldrb	r2, [r2, #0]
 800b968:	4b10      	ldr	r3, [pc, #64]	@ (800b9ac <CDC_Receive_FS+0x78>)
 800b96a:	545a      	strb	r2, [r3, r1]
	for(int i = 0; i < dataSize; i++)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	3301      	adds	r3, #1
 800b970:	60fb      	str	r3, [r7, #12]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	4b0b      	ldr	r3, [pc, #44]	@ (800b9a4 <CDC_Receive_FS+0x70>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d3ea      	bcc.n	800b952 <CDC_Receive_FS+0x1e>
	}
	if(ReceivedData[0] == '?') check = 1;
 800b97c:	4b0b      	ldr	r3, [pc, #44]	@ (800b9ac <CDC_Receive_FS+0x78>)
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	2b3f      	cmp	r3, #63	@ 0x3f
 800b982:	d102      	bne.n	800b98a <CDC_Receive_FS+0x56>
 800b984:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b0 <CDC_Receive_FS+0x7c>)
 800b986:	2201      	movs	r2, #1
 800b988:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b98a:	6879      	ldr	r1, [r7, #4]
 800b98c:	4809      	ldr	r0, [pc, #36]	@ (800b9b4 <CDC_Receive_FS+0x80>)
 800b98e:	f7fe fb91 	bl	800a0b4 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b992:	4808      	ldr	r0, [pc, #32]	@ (800b9b4 <CDC_Receive_FS+0x80>)
 800b994:	f7fe fbec 	bl	800a170 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800b998:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	200017e0 	.word	0x200017e0
 800b9a8:	200017dc 	.word	0x200017dc
 800b9ac:	200017c8 	.word	0x200017c8
 800b9b0:	200017e4 	.word	0x200017e4
 800b9b4:	200004ec 	.word	0x200004ec

0800b9b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b9c8:	4b0d      	ldr	r3, [pc, #52]	@ (800ba00 <CDC_Transmit_FS+0x48>)
 800b9ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b9ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e00b      	b.n	800b9f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b9de:	887b      	ldrh	r3, [r7, #2]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	6879      	ldr	r1, [r7, #4]
 800b9e4:	4806      	ldr	r0, [pc, #24]	@ (800ba00 <CDC_Transmit_FS+0x48>)
 800b9e6:	f7fe fb43 	bl	800a070 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b9ea:	4805      	ldr	r0, [pc, #20]	@ (800ba00 <CDC_Transmit_FS+0x48>)
 800b9ec:	f7fe fb80 	bl	800a0f0 <USBD_CDC_TransmitPacket>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	200004ec 	.word	0x200004ec

0800ba04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b087      	sub	sp, #28
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ba16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	371c      	adds	r7, #28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
	...

0800ba28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	6039      	str	r1, [r7, #0]
 800ba32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	2212      	movs	r2, #18
 800ba38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ba3a:	4b03      	ldr	r3, [pc, #12]	@ (800ba48 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	200000f0 	.word	0x200000f0

0800ba4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	4603      	mov	r3, r0
 800ba54:	6039      	str	r1, [r7, #0]
 800ba56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba5e:	4b03      	ldr	r3, [pc, #12]	@ (800ba6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr
 800ba6c:	20000104 	.word	0x20000104

0800ba70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	4603      	mov	r3, r0
 800ba78:	6039      	str	r1, [r7, #0]
 800ba7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba7c:	79fb      	ldrb	r3, [r7, #7]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d105      	bne.n	800ba8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	4907      	ldr	r1, [pc, #28]	@ (800baa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba86:	4808      	ldr	r0, [pc, #32]	@ (800baa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba88:	f7ff fdbe 	bl	800b608 <USBD_GetString>
 800ba8c:	e004      	b.n	800ba98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	4904      	ldr	r1, [pc, #16]	@ (800baa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba92:	4805      	ldr	r0, [pc, #20]	@ (800baa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba94:	f7ff fdb8 	bl	800b608 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba98:	4b02      	ldr	r3, [pc, #8]	@ (800baa4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	200017e8 	.word	0x200017e8
 800baa8:	08011390 	.word	0x08011390

0800baac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	4603      	mov	r3, r0
 800bab4:	6039      	str	r1, [r7, #0]
 800bab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	4904      	ldr	r1, [pc, #16]	@ (800bacc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800babc:	4804      	ldr	r0, [pc, #16]	@ (800bad0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800babe:	f7ff fda3 	bl	800b608 <USBD_GetString>
  return USBD_StrDesc;
 800bac2:	4b02      	ldr	r3, [pc, #8]	@ (800bacc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	200017e8 	.word	0x200017e8
 800bad0:	080113a8 	.word	0x080113a8

0800bad4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	6039      	str	r1, [r7, #0]
 800bade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	221a      	movs	r2, #26
 800bae4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bae6:	f000 f843 	bl	800bb70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800baea:	4b02      	ldr	r3, [pc, #8]	@ (800baf4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800baec:	4618      	mov	r0, r3
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	20000108 	.word	0x20000108

0800baf8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	6039      	str	r1, [r7, #0]
 800bb02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d105      	bne.n	800bb16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	4907      	ldr	r1, [pc, #28]	@ (800bb2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb0e:	4808      	ldr	r0, [pc, #32]	@ (800bb30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb10:	f7ff fd7a 	bl	800b608 <USBD_GetString>
 800bb14:	e004      	b.n	800bb20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	4904      	ldr	r1, [pc, #16]	@ (800bb2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb1a:	4805      	ldr	r0, [pc, #20]	@ (800bb30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb1c:	f7ff fd74 	bl	800b608 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb20:	4b02      	ldr	r3, [pc, #8]	@ (800bb2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	200017e8 	.word	0x200017e8
 800bb30:	080113bc 	.word	0x080113bc

0800bb34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	6039      	str	r1, [r7, #0]
 800bb3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb40:	79fb      	ldrb	r3, [r7, #7]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d105      	bne.n	800bb52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	4907      	ldr	r1, [pc, #28]	@ (800bb68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb4a:	4808      	ldr	r0, [pc, #32]	@ (800bb6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb4c:	f7ff fd5c 	bl	800b608 <USBD_GetString>
 800bb50:	e004      	b.n	800bb5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	4904      	ldr	r1, [pc, #16]	@ (800bb68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb56:	4805      	ldr	r0, [pc, #20]	@ (800bb6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb58:	f7ff fd56 	bl	800b608 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb5c:	4b02      	ldr	r3, [pc, #8]	@ (800bb68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	200017e8 	.word	0x200017e8
 800bb6c:	080113c8 	.word	0x080113c8

0800bb70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb76:	4b0f      	ldr	r3, [pc, #60]	@ (800bbb4 <Get_SerialNum+0x44>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb8 <Get_SerialNum+0x48>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb82:	4b0e      	ldr	r3, [pc, #56]	@ (800bbbc <Get_SerialNum+0x4c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d009      	beq.n	800bbaa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb96:	2208      	movs	r2, #8
 800bb98:	4909      	ldr	r1, [pc, #36]	@ (800bbc0 <Get_SerialNum+0x50>)
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 f814 	bl	800bbc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bba0:	2204      	movs	r2, #4
 800bba2:	4908      	ldr	r1, [pc, #32]	@ (800bbc4 <Get_SerialNum+0x54>)
 800bba4:	68b8      	ldr	r0, [r7, #8]
 800bba6:	f000 f80f 	bl	800bbc8 <IntToUnicode>
  }
}
 800bbaa:	bf00      	nop
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	1fff7a10 	.word	0x1fff7a10
 800bbb8:	1fff7a14 	.word	0x1fff7a14
 800bbbc:	1fff7a18 	.word	0x1fff7a18
 800bbc0:	2000010a 	.word	0x2000010a
 800bbc4:	2000011a 	.word	0x2000011a

0800bbc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bbda:	2300      	movs	r3, #0
 800bbdc:	75fb      	strb	r3, [r7, #23]
 800bbde:	e027      	b.n	800bc30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	0f1b      	lsrs	r3, r3, #28
 800bbe4:	2b09      	cmp	r3, #9
 800bbe6:	d80b      	bhi.n	800bc00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	0f1b      	lsrs	r3, r3, #28
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	005b      	lsls	r3, r3, #1
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	440b      	add	r3, r1
 800bbf8:	3230      	adds	r2, #48	@ 0x30
 800bbfa:	b2d2      	uxtb	r2, r2
 800bbfc:	701a      	strb	r2, [r3, #0]
 800bbfe:	e00a      	b.n	800bc16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	0f1b      	lsrs	r3, r3, #28
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	7dfb      	ldrb	r3, [r7, #23]
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	440b      	add	r3, r1
 800bc10:	3237      	adds	r2, #55	@ 0x37
 800bc12:	b2d2      	uxtb	r2, r2
 800bc14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	011b      	lsls	r3, r3, #4
 800bc1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc1c:	7dfb      	ldrb	r3, [r7, #23]
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	3301      	adds	r3, #1
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	4413      	add	r3, r2
 800bc26:	2200      	movs	r2, #0
 800bc28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	75fb      	strb	r3, [r7, #23]
 800bc30:	7dfa      	ldrb	r2, [r7, #23]
 800bc32:	79fb      	ldrb	r3, [r7, #7]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d3d3      	bcc.n	800bbe0 <IntToUnicode+0x18>
  }
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
	...

0800bc48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08a      	sub	sp, #40	@ 0x28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc50:	f107 0314 	add.w	r3, r7, #20
 800bc54:	2200      	movs	r2, #0
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	605a      	str	r2, [r3, #4]
 800bc5a:	609a      	str	r2, [r3, #8]
 800bc5c:	60da      	str	r2, [r3, #12]
 800bc5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc68:	d13a      	bne.n	800bce0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	613b      	str	r3, [r7, #16]
 800bc6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bce8 <HAL_PCD_MspInit+0xa0>)
 800bc70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc72:	4a1d      	ldr	r2, [pc, #116]	@ (800bce8 <HAL_PCD_MspInit+0xa0>)
 800bc74:	f043 0301 	orr.w	r3, r3, #1
 800bc78:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc7a:	4b1b      	ldr	r3, [pc, #108]	@ (800bce8 <HAL_PCD_MspInit+0xa0>)
 800bc7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7e:	f003 0301 	and.w	r3, r3, #1
 800bc82:	613b      	str	r3, [r7, #16]
 800bc84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc86:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bc8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc8c:	2302      	movs	r3, #2
 800bc8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc90:	2300      	movs	r3, #0
 800bc92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc94:	2303      	movs	r3, #3
 800bc96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc98:	230a      	movs	r3, #10
 800bc9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc9c:	f107 0314 	add.w	r3, r7, #20
 800bca0:	4619      	mov	r1, r3
 800bca2:	4812      	ldr	r0, [pc, #72]	@ (800bcec <HAL_PCD_MspInit+0xa4>)
 800bca4:	f7f8 ffd0 	bl	8004c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bca8:	4b0f      	ldr	r3, [pc, #60]	@ (800bce8 <HAL_PCD_MspInit+0xa0>)
 800bcaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcac:	4a0e      	ldr	r2, [pc, #56]	@ (800bce8 <HAL_PCD_MspInit+0xa0>)
 800bcae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcb2:	6353      	str	r3, [r2, #52]	@ 0x34
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	4b0b      	ldr	r3, [pc, #44]	@ (800bce8 <HAL_PCD_MspInit+0xa0>)
 800bcba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcbc:	4a0a      	ldr	r2, [pc, #40]	@ (800bce8 <HAL_PCD_MspInit+0xa0>)
 800bcbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bcc2:	6453      	str	r3, [r2, #68]	@ 0x44
 800bcc4:	4b08      	ldr	r3, [pc, #32]	@ (800bce8 <HAL_PCD_MspInit+0xa0>)
 800bcc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bccc:	60fb      	str	r3, [r7, #12]
 800bcce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	2043      	movs	r0, #67	@ 0x43
 800bcd6:	f7f8 ff80 	bl	8004bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bcda:	2043      	movs	r0, #67	@ 0x43
 800bcdc:	f7f8 ff99 	bl	8004c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bce0:	bf00      	nop
 800bce2:	3728      	adds	r7, #40	@ 0x28
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	40023800 	.word	0x40023800
 800bcec:	40020000 	.word	0x40020000

0800bcf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bd04:	4619      	mov	r1, r3
 800bd06:	4610      	mov	r0, r2
 800bd08:	f7fe fb1b 	bl	800a342 <USBD_LL_SetupStage>
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bd26:	78fa      	ldrb	r2, [r7, #3]
 800bd28:	6879      	ldr	r1, [r7, #4]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	00db      	lsls	r3, r3, #3
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	440b      	add	r3, r1
 800bd34:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	78fb      	ldrb	r3, [r7, #3]
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	f7fe fb55 	bl	800a3ec <USBD_LL_DataOutStage>
}
 800bd42:	bf00      	nop
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b082      	sub	sp, #8
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	460b      	mov	r3, r1
 800bd54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bd5c:	78fa      	ldrb	r2, [r7, #3]
 800bd5e:	6879      	ldr	r1, [r7, #4]
 800bd60:	4613      	mov	r3, r2
 800bd62:	00db      	lsls	r3, r3, #3
 800bd64:	4413      	add	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	440b      	add	r3, r1
 800bd6a:	3320      	adds	r3, #32
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	78fb      	ldrb	r3, [r7, #3]
 800bd70:	4619      	mov	r1, r3
 800bd72:	f7fe fbee 	bl	800a552 <USBD_LL_DataInStage>
}
 800bd76:	bf00      	nop
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b082      	sub	sp, #8
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe fd28 	bl	800a7e2 <USBD_LL_SOF>
}
 800bd92:	bf00      	nop
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b084      	sub	sp, #16
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bda2:	2301      	movs	r3, #1
 800bda4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	79db      	ldrb	r3, [r3, #7]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d102      	bne.n	800bdb4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73fb      	strb	r3, [r7, #15]
 800bdb2:	e008      	b.n	800bdc6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	79db      	ldrb	r3, [r3, #7]
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	d102      	bne.n	800bdc2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	73fb      	strb	r3, [r7, #15]
 800bdc0:	e001      	b.n	800bdc6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bdc2:	f7f8 fb5f 	bl	8004484 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdcc:	7bfa      	ldrb	r2, [r7, #15]
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fe fcc2 	bl	800a75a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe fc6a 	bl	800a6b6 <USBD_LL_Reset>
}
 800bde2:	bf00      	nop
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
	...

0800bdec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fe fcbd 	bl	800a77a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	6812      	ldr	r2, [r2, #0]
 800be0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be12:	f043 0301 	orr.w	r3, r3, #1
 800be16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	7adb      	ldrb	r3, [r3, #11]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d005      	beq.n	800be2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be20:	4b04      	ldr	r3, [pc, #16]	@ (800be34 <HAL_PCD_SuspendCallback+0x48>)
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	4a03      	ldr	r2, [pc, #12]	@ (800be34 <HAL_PCD_SuspendCallback+0x48>)
 800be26:	f043 0306 	orr.w	r3, r3, #6
 800be2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be2c:	bf00      	nop
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	e000ed00 	.word	0xe000ed00

0800be38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fcb3 	bl	800a7b2 <USBD_LL_Resume>
}
 800be4c:	bf00      	nop
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	460b      	mov	r3, r1
 800be5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be66:	78fa      	ldrb	r2, [r7, #3]
 800be68:	4611      	mov	r1, r2
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe fd0b 	bl	800a886 <USBD_LL_IsoOUTIncomplete>
}
 800be70:	bf00      	nop
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be8a:	78fa      	ldrb	r2, [r7, #3]
 800be8c:	4611      	mov	r1, r2
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fe fcc7 	bl	800a822 <USBD_LL_IsoINIncomplete>
}
 800be94:	bf00      	nop
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fe fd1d 	bl	800a8ea <USBD_LL_DevConnected>
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fe fd1a 	bl	800a900 <USBD_LL_DevDisconnected>
}
 800becc:	bf00      	nop
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d13c      	bne.n	800bf5e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bee4:	4a20      	ldr	r2, [pc, #128]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a1e      	ldr	r2, [pc, #120]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bef0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bef4:	4b1c      	ldr	r3, [pc, #112]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bef6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800befa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800befc:	4b1a      	ldr	r3, [pc, #104]	@ (800bf68 <USBD_LL_Init+0x94>)
 800befe:	2204      	movs	r2, #4
 800bf00:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bf02:	4b19      	ldr	r3, [pc, #100]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf04:	2202      	movs	r2, #2
 800bf06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bf08:	4b17      	ldr	r3, [pc, #92]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf0e:	4b16      	ldr	r3, [pc, #88]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf10:	2202      	movs	r2, #2
 800bf12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bf14:	4b14      	ldr	r3, [pc, #80]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bf1a:	4b13      	ldr	r3, [pc, #76]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bf20:	4b11      	ldr	r3, [pc, #68]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf22:	2200      	movs	r2, #0
 800bf24:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bf26:	4b10      	ldr	r3, [pc, #64]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bf2c:	4b0e      	ldr	r3, [pc, #56]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf2e:	2200      	movs	r2, #0
 800bf30:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bf32:	480d      	ldr	r0, [pc, #52]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf34:	f7f9 f857 	bl	8004fe6 <HAL_PCD_Init>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d001      	beq.n	800bf42 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bf3e:	f7f8 faa1 	bl	8004484 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bf42:	2180      	movs	r1, #128	@ 0x80
 800bf44:	4808      	ldr	r0, [pc, #32]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf46:	f7fa fa84 	bl	8006452 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bf4a:	2240      	movs	r2, #64	@ 0x40
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	4806      	ldr	r0, [pc, #24]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf50:	f7fa fa38 	bl	80063c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bf54:	2280      	movs	r2, #128	@ 0x80
 800bf56:	2101      	movs	r1, #1
 800bf58:	4803      	ldr	r0, [pc, #12]	@ (800bf68 <USBD_LL_Init+0x94>)
 800bf5a:	f7fa fa33 	bl	80063c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	200019e8 	.word	0x200019e8

0800bf6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7f9 f93e 	bl	8005204 <HAL_PCD_Start>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 f942 	bl	800c218 <USBD_Get_USB_Status>
 800bf94:	4603      	mov	r3, r0
 800bf96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf98:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	4608      	mov	r0, r1
 800bfac:	4611      	mov	r1, r2
 800bfae:	461a      	mov	r2, r3
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	70fb      	strb	r3, [r7, #3]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70bb      	strb	r3, [r7, #2]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bfca:	78bb      	ldrb	r3, [r7, #2]
 800bfcc:	883a      	ldrh	r2, [r7, #0]
 800bfce:	78f9      	ldrb	r1, [r7, #3]
 800bfd0:	f7f9 fe12 	bl	8005bf8 <HAL_PCD_EP_Open>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 f91c 	bl	800c218 <USBD_Get_USB_Status>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	460b      	mov	r3, r1
 800bff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bffe:	2300      	movs	r3, #0
 800c000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c008:	78fa      	ldrb	r2, [r7, #3]
 800c00a:	4611      	mov	r1, r2
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7f9 fe5d 	bl	8005ccc <HAL_PCD_EP_Close>
 800c012:	4603      	mov	r3, r0
 800c014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 f8fd 	bl	800c218 <USBD_Get_USB_Status>
 800c01e:	4603      	mov	r3, r0
 800c020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c022:	7bbb      	ldrb	r3, [r7, #14]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	460b      	mov	r3, r1
 800c036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c046:	78fa      	ldrb	r2, [r7, #3]
 800c048:	4611      	mov	r1, r2
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7f9 ff15 	bl	8005e7a <HAL_PCD_EP_SetStall>
 800c050:	4603      	mov	r3, r0
 800c052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c054:	7bfb      	ldrb	r3, [r7, #15]
 800c056:	4618      	mov	r0, r3
 800c058:	f000 f8de 	bl	800c218 <USBD_Get_USB_Status>
 800c05c:	4603      	mov	r3, r0
 800c05e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c060:	7bbb      	ldrb	r3, [r7, #14]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b084      	sub	sp, #16
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	460b      	mov	r3, r1
 800c074:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c084:	78fa      	ldrb	r2, [r7, #3]
 800c086:	4611      	mov	r1, r2
 800c088:	4618      	mov	r0, r3
 800c08a:	f7f9 ff59 	bl	8005f40 <HAL_PCD_EP_ClrStall>
 800c08e:	4603      	mov	r3, r0
 800c090:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c092:	7bfb      	ldrb	r3, [r7, #15]
 800c094:	4618      	mov	r0, r3
 800c096:	f000 f8bf 	bl	800c218 <USBD_Get_USB_Status>
 800c09a:	4603      	mov	r3, r0
 800c09c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c0bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	da0b      	bge.n	800c0dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c0c4:	78fb      	ldrb	r3, [r7, #3]
 800c0c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0ca:	68f9      	ldr	r1, [r7, #12]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	00db      	lsls	r3, r3, #3
 800c0d0:	4413      	add	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	440b      	add	r3, r1
 800c0d6:	3316      	adds	r3, #22
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	e00b      	b.n	800c0f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c0dc:	78fb      	ldrb	r3, [r7, #3]
 800c0de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0e2:	68f9      	ldr	r1, [r7, #12]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	4413      	add	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	440b      	add	r3, r1
 800c0ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c0f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	460b      	mov	r3, r1
 800c10a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c10c:	2300      	movs	r3, #0
 800c10e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c110:	2300      	movs	r3, #0
 800c112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c11a:	78fa      	ldrb	r2, [r7, #3]
 800c11c:	4611      	mov	r1, r2
 800c11e:	4618      	mov	r0, r3
 800c120:	f7f9 fd46 	bl	8005bb0 <HAL_PCD_SetAddress>
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c128:	7bfb      	ldrb	r3, [r7, #15]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f000 f874 	bl	800c218 <USBD_Get_USB_Status>
 800c130:	4603      	mov	r3, r0
 800c132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c134:	7bbb      	ldrb	r3, [r7, #14]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b086      	sub	sp, #24
 800c142:	af00      	add	r7, sp, #0
 800c144:	60f8      	str	r0, [r7, #12]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	603b      	str	r3, [r7, #0]
 800c14a:	460b      	mov	r3, r1
 800c14c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c15c:	7af9      	ldrb	r1, [r7, #11]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	f7f9 fe50 	bl	8005e06 <HAL_PCD_EP_Transmit>
 800c166:	4603      	mov	r3, r0
 800c168:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
 800c16c:	4618      	mov	r0, r3
 800c16e:	f000 f853 	bl	800c218 <USBD_Get_USB_Status>
 800c172:	4603      	mov	r3, r0
 800c174:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c176:	7dbb      	ldrb	r3, [r7, #22]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	607a      	str	r2, [r7, #4]
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	460b      	mov	r3, r1
 800c18e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c194:	2300      	movs	r3, #0
 800c196:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c19e:	7af9      	ldrb	r1, [r7, #11]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	f7f9 fddc 	bl	8005d60 <HAL_PCD_EP_Receive>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ac:	7dfb      	ldrb	r3, [r7, #23]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 f832 	bl	800c218 <USBD_Get_USB_Status>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1d4:	78fa      	ldrb	r2, [r7, #3]
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7f9 fdfc 	bl	8005dd6 <HAL_PCD_EP_GetRxCount>
 800c1de:	4603      	mov	r3, r0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1f0:	4b03      	ldr	r3, [pc, #12]	@ (800c200 <USBD_static_malloc+0x18>)
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	370c      	adds	r7, #12
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	20001ecc 	.word	0x20001ecc

0800c204 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]

}
 800c20c:	bf00      	nop
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c226:	79fb      	ldrb	r3, [r7, #7]
 800c228:	2b03      	cmp	r3, #3
 800c22a:	d817      	bhi.n	800c25c <USBD_Get_USB_Status+0x44>
 800c22c:	a201      	add	r2, pc, #4	@ (adr r2, 800c234 <USBD_Get_USB_Status+0x1c>)
 800c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c245 	.word	0x0800c245
 800c238:	0800c24b 	.word	0x0800c24b
 800c23c:	0800c251 	.word	0x0800c251
 800c240:	0800c257 	.word	0x0800c257
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
    break;
 800c248:	e00b      	b.n	800c262 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c24a:	2303      	movs	r3, #3
 800c24c:	73fb      	strb	r3, [r7, #15]
    break;
 800c24e:	e008      	b.n	800c262 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c250:	2301      	movs	r3, #1
 800c252:	73fb      	strb	r3, [r7, #15]
    break;
 800c254:	e005      	b.n	800c262 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c256:	2303      	movs	r3, #3
 800c258:	73fb      	strb	r3, [r7, #15]
    break;
 800c25a:	e002      	b.n	800c262 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c25c:	2303      	movs	r3, #3
 800c25e:	73fb      	strb	r3, [r7, #15]
    break;
 800c260:	bf00      	nop
  }
  return usb_status;
 800c262:	7bfb      	ldrb	r3, [r7, #15]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3714      	adds	r7, #20
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <atoi>:
 800c270:	220a      	movs	r2, #10
 800c272:	2100      	movs	r1, #0
 800c274:	f000 bf86 	b.w	800d184 <strtol>

0800c278 <malloc>:
 800c278:	4b02      	ldr	r3, [pc, #8]	@ (800c284 <malloc+0xc>)
 800c27a:	4601      	mov	r1, r0
 800c27c:	6818      	ldr	r0, [r3, #0]
 800c27e:	f000 b82d 	b.w	800c2dc <_malloc_r>
 800c282:	bf00      	nop
 800c284:	2000029c 	.word	0x2000029c

0800c288 <free>:
 800c288:	4b02      	ldr	r3, [pc, #8]	@ (800c294 <free+0xc>)
 800c28a:	4601      	mov	r1, r0
 800c28c:	6818      	ldr	r0, [r3, #0]
 800c28e:	f002 bec7 	b.w	800f020 <_free_r>
 800c292:	bf00      	nop
 800c294:	2000029c 	.word	0x2000029c

0800c298 <sbrk_aligned>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	4e0f      	ldr	r6, [pc, #60]	@ (800c2d8 <sbrk_aligned+0x40>)
 800c29c:	460c      	mov	r4, r1
 800c29e:	6831      	ldr	r1, [r6, #0]
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	b911      	cbnz	r1, 800c2aa <sbrk_aligned+0x12>
 800c2a4:	f001 ffe4 	bl	800e270 <_sbrk_r>
 800c2a8:	6030      	str	r0, [r6, #0]
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f001 ffdf 	bl	800e270 <_sbrk_r>
 800c2b2:	1c43      	adds	r3, r0, #1
 800c2b4:	d103      	bne.n	800c2be <sbrk_aligned+0x26>
 800c2b6:	f04f 34ff 	mov.w	r4, #4294967295
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	bd70      	pop	{r4, r5, r6, pc}
 800c2be:	1cc4      	adds	r4, r0, #3
 800c2c0:	f024 0403 	bic.w	r4, r4, #3
 800c2c4:	42a0      	cmp	r0, r4
 800c2c6:	d0f8      	beq.n	800c2ba <sbrk_aligned+0x22>
 800c2c8:	1a21      	subs	r1, r4, r0
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f001 ffd0 	bl	800e270 <_sbrk_r>
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	d1f2      	bne.n	800c2ba <sbrk_aligned+0x22>
 800c2d4:	e7ef      	b.n	800c2b6 <sbrk_aligned+0x1e>
 800c2d6:	bf00      	nop
 800c2d8:	200020ec 	.word	0x200020ec

0800c2dc <_malloc_r>:
 800c2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e0:	1ccd      	adds	r5, r1, #3
 800c2e2:	f025 0503 	bic.w	r5, r5, #3
 800c2e6:	3508      	adds	r5, #8
 800c2e8:	2d0c      	cmp	r5, #12
 800c2ea:	bf38      	it	cc
 800c2ec:	250c      	movcc	r5, #12
 800c2ee:	2d00      	cmp	r5, #0
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	db01      	blt.n	800c2f8 <_malloc_r+0x1c>
 800c2f4:	42a9      	cmp	r1, r5
 800c2f6:	d904      	bls.n	800c302 <_malloc_r+0x26>
 800c2f8:	230c      	movs	r3, #12
 800c2fa:	6033      	str	r3, [r6, #0]
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3d8 <_malloc_r+0xfc>
 800c306:	f000 f869 	bl	800c3dc <__malloc_lock>
 800c30a:	f8d8 3000 	ldr.w	r3, [r8]
 800c30e:	461c      	mov	r4, r3
 800c310:	bb44      	cbnz	r4, 800c364 <_malloc_r+0x88>
 800c312:	4629      	mov	r1, r5
 800c314:	4630      	mov	r0, r6
 800c316:	f7ff ffbf 	bl	800c298 <sbrk_aligned>
 800c31a:	1c43      	adds	r3, r0, #1
 800c31c:	4604      	mov	r4, r0
 800c31e:	d158      	bne.n	800c3d2 <_malloc_r+0xf6>
 800c320:	f8d8 4000 	ldr.w	r4, [r8]
 800c324:	4627      	mov	r7, r4
 800c326:	2f00      	cmp	r7, #0
 800c328:	d143      	bne.n	800c3b2 <_malloc_r+0xd6>
 800c32a:	2c00      	cmp	r4, #0
 800c32c:	d04b      	beq.n	800c3c6 <_malloc_r+0xea>
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	4639      	mov	r1, r7
 800c332:	4630      	mov	r0, r6
 800c334:	eb04 0903 	add.w	r9, r4, r3
 800c338:	f001 ff9a 	bl	800e270 <_sbrk_r>
 800c33c:	4581      	cmp	r9, r0
 800c33e:	d142      	bne.n	800c3c6 <_malloc_r+0xea>
 800c340:	6821      	ldr	r1, [r4, #0]
 800c342:	1a6d      	subs	r5, r5, r1
 800c344:	4629      	mov	r1, r5
 800c346:	4630      	mov	r0, r6
 800c348:	f7ff ffa6 	bl	800c298 <sbrk_aligned>
 800c34c:	3001      	adds	r0, #1
 800c34e:	d03a      	beq.n	800c3c6 <_malloc_r+0xea>
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	442b      	add	r3, r5
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	f8d8 3000 	ldr.w	r3, [r8]
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	bb62      	cbnz	r2, 800c3b8 <_malloc_r+0xdc>
 800c35e:	f8c8 7000 	str.w	r7, [r8]
 800c362:	e00f      	b.n	800c384 <_malloc_r+0xa8>
 800c364:	6822      	ldr	r2, [r4, #0]
 800c366:	1b52      	subs	r2, r2, r5
 800c368:	d420      	bmi.n	800c3ac <_malloc_r+0xd0>
 800c36a:	2a0b      	cmp	r2, #11
 800c36c:	d917      	bls.n	800c39e <_malloc_r+0xc2>
 800c36e:	1961      	adds	r1, r4, r5
 800c370:	42a3      	cmp	r3, r4
 800c372:	6025      	str	r5, [r4, #0]
 800c374:	bf18      	it	ne
 800c376:	6059      	strne	r1, [r3, #4]
 800c378:	6863      	ldr	r3, [r4, #4]
 800c37a:	bf08      	it	eq
 800c37c:	f8c8 1000 	streq.w	r1, [r8]
 800c380:	5162      	str	r2, [r4, r5]
 800c382:	604b      	str	r3, [r1, #4]
 800c384:	4630      	mov	r0, r6
 800c386:	f000 f82f 	bl	800c3e8 <__malloc_unlock>
 800c38a:	f104 000b 	add.w	r0, r4, #11
 800c38e:	1d23      	adds	r3, r4, #4
 800c390:	f020 0007 	bic.w	r0, r0, #7
 800c394:	1ac2      	subs	r2, r0, r3
 800c396:	bf1c      	itt	ne
 800c398:	1a1b      	subne	r3, r3, r0
 800c39a:	50a3      	strne	r3, [r4, r2]
 800c39c:	e7af      	b.n	800c2fe <_malloc_r+0x22>
 800c39e:	6862      	ldr	r2, [r4, #4]
 800c3a0:	42a3      	cmp	r3, r4
 800c3a2:	bf0c      	ite	eq
 800c3a4:	f8c8 2000 	streq.w	r2, [r8]
 800c3a8:	605a      	strne	r2, [r3, #4]
 800c3aa:	e7eb      	b.n	800c384 <_malloc_r+0xa8>
 800c3ac:	4623      	mov	r3, r4
 800c3ae:	6864      	ldr	r4, [r4, #4]
 800c3b0:	e7ae      	b.n	800c310 <_malloc_r+0x34>
 800c3b2:	463c      	mov	r4, r7
 800c3b4:	687f      	ldr	r7, [r7, #4]
 800c3b6:	e7b6      	b.n	800c326 <_malloc_r+0x4a>
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	d1fb      	bne.n	800c3b8 <_malloc_r+0xdc>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	6053      	str	r3, [r2, #4]
 800c3c4:	e7de      	b.n	800c384 <_malloc_r+0xa8>
 800c3c6:	230c      	movs	r3, #12
 800c3c8:	6033      	str	r3, [r6, #0]
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f000 f80c 	bl	800c3e8 <__malloc_unlock>
 800c3d0:	e794      	b.n	800c2fc <_malloc_r+0x20>
 800c3d2:	6005      	str	r5, [r0, #0]
 800c3d4:	e7d6      	b.n	800c384 <_malloc_r+0xa8>
 800c3d6:	bf00      	nop
 800c3d8:	200020f0 	.word	0x200020f0

0800c3dc <__malloc_lock>:
 800c3dc:	4801      	ldr	r0, [pc, #4]	@ (800c3e4 <__malloc_lock+0x8>)
 800c3de:	f001 bf94 	b.w	800e30a <__retarget_lock_acquire_recursive>
 800c3e2:	bf00      	nop
 800c3e4:	20002234 	.word	0x20002234

0800c3e8 <__malloc_unlock>:
 800c3e8:	4801      	ldr	r0, [pc, #4]	@ (800c3f0 <__malloc_unlock+0x8>)
 800c3ea:	f001 bf8f 	b.w	800e30c <__retarget_lock_release_recursive>
 800c3ee:	bf00      	nop
 800c3f0:	20002234 	.word	0x20002234

0800c3f4 <realloc>:
 800c3f4:	4b02      	ldr	r3, [pc, #8]	@ (800c400 <realloc+0xc>)
 800c3f6:	460a      	mov	r2, r1
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	6818      	ldr	r0, [r3, #0]
 800c3fc:	f000 b802 	b.w	800c404 <_realloc_r>
 800c400:	2000029c 	.word	0x2000029c

0800c404 <_realloc_r>:
 800c404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c408:	4680      	mov	r8, r0
 800c40a:	4615      	mov	r5, r2
 800c40c:	460c      	mov	r4, r1
 800c40e:	b921      	cbnz	r1, 800c41a <_realloc_r+0x16>
 800c410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c414:	4611      	mov	r1, r2
 800c416:	f7ff bf61 	b.w	800c2dc <_malloc_r>
 800c41a:	b92a      	cbnz	r2, 800c428 <_realloc_r+0x24>
 800c41c:	f002 fe00 	bl	800f020 <_free_r>
 800c420:	2400      	movs	r4, #0
 800c422:	4620      	mov	r0, r4
 800c424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c428:	f003 fe42 	bl	80100b0 <_malloc_usable_size_r>
 800c42c:	4285      	cmp	r5, r0
 800c42e:	4606      	mov	r6, r0
 800c430:	d802      	bhi.n	800c438 <_realloc_r+0x34>
 800c432:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c436:	d8f4      	bhi.n	800c422 <_realloc_r+0x1e>
 800c438:	4629      	mov	r1, r5
 800c43a:	4640      	mov	r0, r8
 800c43c:	f7ff ff4e 	bl	800c2dc <_malloc_r>
 800c440:	4607      	mov	r7, r0
 800c442:	2800      	cmp	r0, #0
 800c444:	d0ec      	beq.n	800c420 <_realloc_r+0x1c>
 800c446:	42b5      	cmp	r5, r6
 800c448:	462a      	mov	r2, r5
 800c44a:	4621      	mov	r1, r4
 800c44c:	bf28      	it	cs
 800c44e:	4632      	movcs	r2, r6
 800c450:	f001 ff5d 	bl	800e30e <memcpy>
 800c454:	4621      	mov	r1, r4
 800c456:	4640      	mov	r0, r8
 800c458:	f002 fde2 	bl	800f020 <_free_r>
 800c45c:	463c      	mov	r4, r7
 800c45e:	e7e0      	b.n	800c422 <_realloc_r+0x1e>

0800c460 <sulp>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	4604      	mov	r4, r0
 800c464:	460d      	mov	r5, r1
 800c466:	ec45 4b10 	vmov	d0, r4, r5
 800c46a:	4616      	mov	r6, r2
 800c46c:	f003 fce2 	bl	800fe34 <__ulp>
 800c470:	ec51 0b10 	vmov	r0, r1, d0
 800c474:	b17e      	cbz	r6, 800c496 <sulp+0x36>
 800c476:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c47a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c47e:	2b00      	cmp	r3, #0
 800c480:	dd09      	ble.n	800c496 <sulp+0x36>
 800c482:	051b      	lsls	r3, r3, #20
 800c484:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c488:	2400      	movs	r4, #0
 800c48a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c48e:	4622      	mov	r2, r4
 800c490:	462b      	mov	r3, r5
 800c492:	f7f4 f8c1 	bl	8000618 <__aeabi_dmul>
 800c496:	ec41 0b10 	vmov	d0, r0, r1
 800c49a:	bd70      	pop	{r4, r5, r6, pc}
 800c49c:	0000      	movs	r0, r0
	...

0800c4a0 <_strtod_l>:
 800c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a4:	b09f      	sub	sp, #124	@ 0x7c
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	921a      	str	r2, [sp, #104]	@ 0x68
 800c4ae:	9005      	str	r0, [sp, #20]
 800c4b0:	f04f 0a00 	mov.w	sl, #0
 800c4b4:	f04f 0b00 	mov.w	fp, #0
 800c4b8:	460a      	mov	r2, r1
 800c4ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4bc:	7811      	ldrb	r1, [r2, #0]
 800c4be:	292b      	cmp	r1, #43	@ 0x2b
 800c4c0:	d04a      	beq.n	800c558 <_strtod_l+0xb8>
 800c4c2:	d838      	bhi.n	800c536 <_strtod_l+0x96>
 800c4c4:	290d      	cmp	r1, #13
 800c4c6:	d832      	bhi.n	800c52e <_strtod_l+0x8e>
 800c4c8:	2908      	cmp	r1, #8
 800c4ca:	d832      	bhi.n	800c532 <_strtod_l+0x92>
 800c4cc:	2900      	cmp	r1, #0
 800c4ce:	d03b      	beq.n	800c548 <_strtod_l+0xa8>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c4d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c4d6:	782a      	ldrb	r2, [r5, #0]
 800c4d8:	2a30      	cmp	r2, #48	@ 0x30
 800c4da:	f040 80b3 	bne.w	800c644 <_strtod_l+0x1a4>
 800c4de:	786a      	ldrb	r2, [r5, #1]
 800c4e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c4e4:	2a58      	cmp	r2, #88	@ 0x58
 800c4e6:	d16e      	bne.n	800c5c6 <_strtod_l+0x126>
 800c4e8:	9302      	str	r3, [sp, #8]
 800c4ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	ab1a      	add	r3, sp, #104	@ 0x68
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	4a8e      	ldr	r2, [pc, #568]	@ (800c72c <_strtod_l+0x28c>)
 800c4f4:	9805      	ldr	r0, [sp, #20]
 800c4f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c4f8:	a919      	add	r1, sp, #100	@ 0x64
 800c4fa:	f002 fe43 	bl	800f184 <__gethex>
 800c4fe:	f010 060f 	ands.w	r6, r0, #15
 800c502:	4604      	mov	r4, r0
 800c504:	d005      	beq.n	800c512 <_strtod_l+0x72>
 800c506:	2e06      	cmp	r6, #6
 800c508:	d128      	bne.n	800c55c <_strtod_l+0xbc>
 800c50a:	3501      	adds	r5, #1
 800c50c:	2300      	movs	r3, #0
 800c50e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c510:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c512:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c514:	2b00      	cmp	r3, #0
 800c516:	f040 858e 	bne.w	800d036 <_strtod_l+0xb96>
 800c51a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c51c:	b1cb      	cbz	r3, 800c552 <_strtod_l+0xb2>
 800c51e:	4652      	mov	r2, sl
 800c520:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c524:	ec43 2b10 	vmov	d0, r2, r3
 800c528:	b01f      	add	sp, #124	@ 0x7c
 800c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52e:	2920      	cmp	r1, #32
 800c530:	d1ce      	bne.n	800c4d0 <_strtod_l+0x30>
 800c532:	3201      	adds	r2, #1
 800c534:	e7c1      	b.n	800c4ba <_strtod_l+0x1a>
 800c536:	292d      	cmp	r1, #45	@ 0x2d
 800c538:	d1ca      	bne.n	800c4d0 <_strtod_l+0x30>
 800c53a:	2101      	movs	r1, #1
 800c53c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c53e:	1c51      	adds	r1, r2, #1
 800c540:	9119      	str	r1, [sp, #100]	@ 0x64
 800c542:	7852      	ldrb	r2, [r2, #1]
 800c544:	2a00      	cmp	r2, #0
 800c546:	d1c5      	bne.n	800c4d4 <_strtod_l+0x34>
 800c548:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c54a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f040 8570 	bne.w	800d032 <_strtod_l+0xb92>
 800c552:	4652      	mov	r2, sl
 800c554:	465b      	mov	r3, fp
 800c556:	e7e5      	b.n	800c524 <_strtod_l+0x84>
 800c558:	2100      	movs	r1, #0
 800c55a:	e7ef      	b.n	800c53c <_strtod_l+0x9c>
 800c55c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c55e:	b13a      	cbz	r2, 800c570 <_strtod_l+0xd0>
 800c560:	2135      	movs	r1, #53	@ 0x35
 800c562:	a81c      	add	r0, sp, #112	@ 0x70
 800c564:	f003 fd60 	bl	8010028 <__copybits>
 800c568:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c56a:	9805      	ldr	r0, [sp, #20]
 800c56c:	f003 f92e 	bl	800f7cc <_Bfree>
 800c570:	3e01      	subs	r6, #1
 800c572:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c574:	2e04      	cmp	r6, #4
 800c576:	d806      	bhi.n	800c586 <_strtod_l+0xe6>
 800c578:	e8df f006 	tbb	[pc, r6]
 800c57c:	201d0314 	.word	0x201d0314
 800c580:	14          	.byte	0x14
 800c581:	00          	.byte	0x00
 800c582:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c586:	05e1      	lsls	r1, r4, #23
 800c588:	bf48      	it	mi
 800c58a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c58e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c592:	0d1b      	lsrs	r3, r3, #20
 800c594:	051b      	lsls	r3, r3, #20
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1bb      	bne.n	800c512 <_strtod_l+0x72>
 800c59a:	f001 fe8b 	bl	800e2b4 <__errno>
 800c59e:	2322      	movs	r3, #34	@ 0x22
 800c5a0:	6003      	str	r3, [r0, #0]
 800c5a2:	e7b6      	b.n	800c512 <_strtod_l+0x72>
 800c5a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c5a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c5ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c5b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c5b4:	e7e7      	b.n	800c586 <_strtod_l+0xe6>
 800c5b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c734 <_strtod_l+0x294>
 800c5ba:	e7e4      	b.n	800c586 <_strtod_l+0xe6>
 800c5bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c5c0:	f04f 3aff 	mov.w	sl, #4294967295
 800c5c4:	e7df      	b.n	800c586 <_strtod_l+0xe6>
 800c5c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5c8:	1c5a      	adds	r2, r3, #1
 800c5ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5cc:	785b      	ldrb	r3, [r3, #1]
 800c5ce:	2b30      	cmp	r3, #48	@ 0x30
 800c5d0:	d0f9      	beq.n	800c5c6 <_strtod_l+0x126>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d09d      	beq.n	800c512 <_strtod_l+0x72>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9308      	str	r3, [sp, #32]
 800c5e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5e4:	461f      	mov	r7, r3
 800c5e6:	220a      	movs	r2, #10
 800c5e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c5ea:	7805      	ldrb	r5, [r0, #0]
 800c5ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c5f0:	b2d9      	uxtb	r1, r3
 800c5f2:	2909      	cmp	r1, #9
 800c5f4:	d928      	bls.n	800c648 <_strtod_l+0x1a8>
 800c5f6:	494e      	ldr	r1, [pc, #312]	@ (800c730 <_strtod_l+0x290>)
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f001 fd92 	bl	800e122 <strncmp>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d032      	beq.n	800c668 <_strtod_l+0x1c8>
 800c602:	2000      	movs	r0, #0
 800c604:	462a      	mov	r2, r5
 800c606:	4681      	mov	r9, r0
 800c608:	463d      	mov	r5, r7
 800c60a:	4603      	mov	r3, r0
 800c60c:	2a65      	cmp	r2, #101	@ 0x65
 800c60e:	d001      	beq.n	800c614 <_strtod_l+0x174>
 800c610:	2a45      	cmp	r2, #69	@ 0x45
 800c612:	d114      	bne.n	800c63e <_strtod_l+0x19e>
 800c614:	b91d      	cbnz	r5, 800c61e <_strtod_l+0x17e>
 800c616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c618:	4302      	orrs	r2, r0
 800c61a:	d095      	beq.n	800c548 <_strtod_l+0xa8>
 800c61c:	2500      	movs	r5, #0
 800c61e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c620:	1c62      	adds	r2, r4, #1
 800c622:	9219      	str	r2, [sp, #100]	@ 0x64
 800c624:	7862      	ldrb	r2, [r4, #1]
 800c626:	2a2b      	cmp	r2, #43	@ 0x2b
 800c628:	d077      	beq.n	800c71a <_strtod_l+0x27a>
 800c62a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c62c:	d07b      	beq.n	800c726 <_strtod_l+0x286>
 800c62e:	f04f 0c00 	mov.w	ip, #0
 800c632:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c636:	2909      	cmp	r1, #9
 800c638:	f240 8082 	bls.w	800c740 <_strtod_l+0x2a0>
 800c63c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c63e:	f04f 0800 	mov.w	r8, #0
 800c642:	e0a2      	b.n	800c78a <_strtod_l+0x2ea>
 800c644:	2300      	movs	r3, #0
 800c646:	e7c7      	b.n	800c5d8 <_strtod_l+0x138>
 800c648:	2f08      	cmp	r7, #8
 800c64a:	bfd5      	itete	le
 800c64c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c64e:	9908      	ldrgt	r1, [sp, #32]
 800c650:	fb02 3301 	mlale	r3, r2, r1, r3
 800c654:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c658:	f100 0001 	add.w	r0, r0, #1
 800c65c:	bfd4      	ite	le
 800c65e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c660:	9308      	strgt	r3, [sp, #32]
 800c662:	3701      	adds	r7, #1
 800c664:	9019      	str	r0, [sp, #100]	@ 0x64
 800c666:	e7bf      	b.n	800c5e8 <_strtod_l+0x148>
 800c668:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c66a:	1c5a      	adds	r2, r3, #1
 800c66c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c66e:	785a      	ldrb	r2, [r3, #1]
 800c670:	b37f      	cbz	r7, 800c6d2 <_strtod_l+0x232>
 800c672:	4681      	mov	r9, r0
 800c674:	463d      	mov	r5, r7
 800c676:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c67a:	2b09      	cmp	r3, #9
 800c67c:	d912      	bls.n	800c6a4 <_strtod_l+0x204>
 800c67e:	2301      	movs	r3, #1
 800c680:	e7c4      	b.n	800c60c <_strtod_l+0x16c>
 800c682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	9219      	str	r2, [sp, #100]	@ 0x64
 800c688:	785a      	ldrb	r2, [r3, #1]
 800c68a:	3001      	adds	r0, #1
 800c68c:	2a30      	cmp	r2, #48	@ 0x30
 800c68e:	d0f8      	beq.n	800c682 <_strtod_l+0x1e2>
 800c690:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c694:	2b08      	cmp	r3, #8
 800c696:	f200 84d3 	bhi.w	800d040 <_strtod_l+0xba0>
 800c69a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c69c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c69e:	4681      	mov	r9, r0
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	3a30      	subs	r2, #48	@ 0x30
 800c6a6:	f100 0301 	add.w	r3, r0, #1
 800c6aa:	d02a      	beq.n	800c702 <_strtod_l+0x262>
 800c6ac:	4499      	add	r9, r3
 800c6ae:	eb00 0c05 	add.w	ip, r0, r5
 800c6b2:	462b      	mov	r3, r5
 800c6b4:	210a      	movs	r1, #10
 800c6b6:	4563      	cmp	r3, ip
 800c6b8:	d10d      	bne.n	800c6d6 <_strtod_l+0x236>
 800c6ba:	1c69      	adds	r1, r5, #1
 800c6bc:	4401      	add	r1, r0
 800c6be:	4428      	add	r0, r5
 800c6c0:	2808      	cmp	r0, #8
 800c6c2:	dc16      	bgt.n	800c6f2 <_strtod_l+0x252>
 800c6c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c6c6:	230a      	movs	r3, #10
 800c6c8:	fb03 2300 	mla	r3, r3, r0, r2
 800c6cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e018      	b.n	800c704 <_strtod_l+0x264>
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	e7da      	b.n	800c68c <_strtod_l+0x1ec>
 800c6d6:	2b08      	cmp	r3, #8
 800c6d8:	f103 0301 	add.w	r3, r3, #1
 800c6dc:	dc03      	bgt.n	800c6e6 <_strtod_l+0x246>
 800c6de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c6e0:	434e      	muls	r6, r1
 800c6e2:	960a      	str	r6, [sp, #40]	@ 0x28
 800c6e4:	e7e7      	b.n	800c6b6 <_strtod_l+0x216>
 800c6e6:	2b10      	cmp	r3, #16
 800c6e8:	bfde      	ittt	le
 800c6ea:	9e08      	ldrle	r6, [sp, #32]
 800c6ec:	434e      	mulle	r6, r1
 800c6ee:	9608      	strle	r6, [sp, #32]
 800c6f0:	e7e1      	b.n	800c6b6 <_strtod_l+0x216>
 800c6f2:	280f      	cmp	r0, #15
 800c6f4:	dceb      	bgt.n	800c6ce <_strtod_l+0x22e>
 800c6f6:	9808      	ldr	r0, [sp, #32]
 800c6f8:	230a      	movs	r3, #10
 800c6fa:	fb03 2300 	mla	r3, r3, r0, r2
 800c6fe:	9308      	str	r3, [sp, #32]
 800c700:	e7e5      	b.n	800c6ce <_strtod_l+0x22e>
 800c702:	4629      	mov	r1, r5
 800c704:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c706:	1c50      	adds	r0, r2, #1
 800c708:	9019      	str	r0, [sp, #100]	@ 0x64
 800c70a:	7852      	ldrb	r2, [r2, #1]
 800c70c:	4618      	mov	r0, r3
 800c70e:	460d      	mov	r5, r1
 800c710:	e7b1      	b.n	800c676 <_strtod_l+0x1d6>
 800c712:	f04f 0900 	mov.w	r9, #0
 800c716:	2301      	movs	r3, #1
 800c718:	e77d      	b.n	800c616 <_strtod_l+0x176>
 800c71a:	f04f 0c00 	mov.w	ip, #0
 800c71e:	1ca2      	adds	r2, r4, #2
 800c720:	9219      	str	r2, [sp, #100]	@ 0x64
 800c722:	78a2      	ldrb	r2, [r4, #2]
 800c724:	e785      	b.n	800c632 <_strtod_l+0x192>
 800c726:	f04f 0c01 	mov.w	ip, #1
 800c72a:	e7f8      	b.n	800c71e <_strtod_l+0x27e>
 800c72c:	08011418 	.word	0x08011418
 800c730:	08011400 	.word	0x08011400
 800c734:	7ff00000 	.word	0x7ff00000
 800c738:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c73a:	1c51      	adds	r1, r2, #1
 800c73c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c73e:	7852      	ldrb	r2, [r2, #1]
 800c740:	2a30      	cmp	r2, #48	@ 0x30
 800c742:	d0f9      	beq.n	800c738 <_strtod_l+0x298>
 800c744:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c748:	2908      	cmp	r1, #8
 800c74a:	f63f af78 	bhi.w	800c63e <_strtod_l+0x19e>
 800c74e:	3a30      	subs	r2, #48	@ 0x30
 800c750:	920e      	str	r2, [sp, #56]	@ 0x38
 800c752:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c754:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c756:	f04f 080a 	mov.w	r8, #10
 800c75a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c75c:	1c56      	adds	r6, r2, #1
 800c75e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c760:	7852      	ldrb	r2, [r2, #1]
 800c762:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c766:	f1be 0f09 	cmp.w	lr, #9
 800c76a:	d939      	bls.n	800c7e0 <_strtod_l+0x340>
 800c76c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c76e:	1a76      	subs	r6, r6, r1
 800c770:	2e08      	cmp	r6, #8
 800c772:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c776:	dc03      	bgt.n	800c780 <_strtod_l+0x2e0>
 800c778:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c77a:	4588      	cmp	r8, r1
 800c77c:	bfa8      	it	ge
 800c77e:	4688      	movge	r8, r1
 800c780:	f1bc 0f00 	cmp.w	ip, #0
 800c784:	d001      	beq.n	800c78a <_strtod_l+0x2ea>
 800c786:	f1c8 0800 	rsb	r8, r8, #0
 800c78a:	2d00      	cmp	r5, #0
 800c78c:	d14e      	bne.n	800c82c <_strtod_l+0x38c>
 800c78e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c790:	4308      	orrs	r0, r1
 800c792:	f47f aebe 	bne.w	800c512 <_strtod_l+0x72>
 800c796:	2b00      	cmp	r3, #0
 800c798:	f47f aed6 	bne.w	800c548 <_strtod_l+0xa8>
 800c79c:	2a69      	cmp	r2, #105	@ 0x69
 800c79e:	d028      	beq.n	800c7f2 <_strtod_l+0x352>
 800c7a0:	dc25      	bgt.n	800c7ee <_strtod_l+0x34e>
 800c7a2:	2a49      	cmp	r2, #73	@ 0x49
 800c7a4:	d025      	beq.n	800c7f2 <_strtod_l+0x352>
 800c7a6:	2a4e      	cmp	r2, #78	@ 0x4e
 800c7a8:	f47f aece 	bne.w	800c548 <_strtod_l+0xa8>
 800c7ac:	499b      	ldr	r1, [pc, #620]	@ (800ca1c <_strtod_l+0x57c>)
 800c7ae:	a819      	add	r0, sp, #100	@ 0x64
 800c7b0:	f002 ff0a 	bl	800f5c8 <__match>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	f43f aec7 	beq.w	800c548 <_strtod_l+0xa8>
 800c7ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	2b28      	cmp	r3, #40	@ 0x28
 800c7c0:	d12e      	bne.n	800c820 <_strtod_l+0x380>
 800c7c2:	4997      	ldr	r1, [pc, #604]	@ (800ca20 <_strtod_l+0x580>)
 800c7c4:	aa1c      	add	r2, sp, #112	@ 0x70
 800c7c6:	a819      	add	r0, sp, #100	@ 0x64
 800c7c8:	f002 ff12 	bl	800f5f0 <__hexnan>
 800c7cc:	2805      	cmp	r0, #5
 800c7ce:	d127      	bne.n	800c820 <_strtod_l+0x380>
 800c7d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c7d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c7d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c7da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c7de:	e698      	b.n	800c512 <_strtod_l+0x72>
 800c7e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c7e2:	fb08 2101 	mla	r1, r8, r1, r2
 800c7e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c7ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7ec:	e7b5      	b.n	800c75a <_strtod_l+0x2ba>
 800c7ee:	2a6e      	cmp	r2, #110	@ 0x6e
 800c7f0:	e7da      	b.n	800c7a8 <_strtod_l+0x308>
 800c7f2:	498c      	ldr	r1, [pc, #560]	@ (800ca24 <_strtod_l+0x584>)
 800c7f4:	a819      	add	r0, sp, #100	@ 0x64
 800c7f6:	f002 fee7 	bl	800f5c8 <__match>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	f43f aea4 	beq.w	800c548 <_strtod_l+0xa8>
 800c800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c802:	4989      	ldr	r1, [pc, #548]	@ (800ca28 <_strtod_l+0x588>)
 800c804:	3b01      	subs	r3, #1
 800c806:	a819      	add	r0, sp, #100	@ 0x64
 800c808:	9319      	str	r3, [sp, #100]	@ 0x64
 800c80a:	f002 fedd 	bl	800f5c8 <__match>
 800c80e:	b910      	cbnz	r0, 800c816 <_strtod_l+0x376>
 800c810:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c812:	3301      	adds	r3, #1
 800c814:	9319      	str	r3, [sp, #100]	@ 0x64
 800c816:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ca38 <_strtod_l+0x598>
 800c81a:	f04f 0a00 	mov.w	sl, #0
 800c81e:	e678      	b.n	800c512 <_strtod_l+0x72>
 800c820:	4882      	ldr	r0, [pc, #520]	@ (800ca2c <_strtod_l+0x58c>)
 800c822:	f001 fd85 	bl	800e330 <nan>
 800c826:	ec5b ab10 	vmov	sl, fp, d0
 800c82a:	e672      	b.n	800c512 <_strtod_l+0x72>
 800c82c:	eba8 0309 	sub.w	r3, r8, r9
 800c830:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c832:	9309      	str	r3, [sp, #36]	@ 0x24
 800c834:	2f00      	cmp	r7, #0
 800c836:	bf08      	it	eq
 800c838:	462f      	moveq	r7, r5
 800c83a:	2d10      	cmp	r5, #16
 800c83c:	462c      	mov	r4, r5
 800c83e:	bfa8      	it	ge
 800c840:	2410      	movge	r4, #16
 800c842:	f7f3 fe6f 	bl	8000524 <__aeabi_ui2d>
 800c846:	2d09      	cmp	r5, #9
 800c848:	4682      	mov	sl, r0
 800c84a:	468b      	mov	fp, r1
 800c84c:	dc13      	bgt.n	800c876 <_strtod_l+0x3d6>
 800c84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c850:	2b00      	cmp	r3, #0
 800c852:	f43f ae5e 	beq.w	800c512 <_strtod_l+0x72>
 800c856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c858:	dd78      	ble.n	800c94c <_strtod_l+0x4ac>
 800c85a:	2b16      	cmp	r3, #22
 800c85c:	dc5f      	bgt.n	800c91e <_strtod_l+0x47e>
 800c85e:	4974      	ldr	r1, [pc, #464]	@ (800ca30 <_strtod_l+0x590>)
 800c860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c864:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c868:	4652      	mov	r2, sl
 800c86a:	465b      	mov	r3, fp
 800c86c:	f7f3 fed4 	bl	8000618 <__aeabi_dmul>
 800c870:	4682      	mov	sl, r0
 800c872:	468b      	mov	fp, r1
 800c874:	e64d      	b.n	800c512 <_strtod_l+0x72>
 800c876:	4b6e      	ldr	r3, [pc, #440]	@ (800ca30 <_strtod_l+0x590>)
 800c878:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c87c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c880:	f7f3 feca 	bl	8000618 <__aeabi_dmul>
 800c884:	4682      	mov	sl, r0
 800c886:	9808      	ldr	r0, [sp, #32]
 800c888:	468b      	mov	fp, r1
 800c88a:	f7f3 fe4b 	bl	8000524 <__aeabi_ui2d>
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	4650      	mov	r0, sl
 800c894:	4659      	mov	r1, fp
 800c896:	f7f3 fd09 	bl	80002ac <__adddf3>
 800c89a:	2d0f      	cmp	r5, #15
 800c89c:	4682      	mov	sl, r0
 800c89e:	468b      	mov	fp, r1
 800c8a0:	ddd5      	ble.n	800c84e <_strtod_l+0x3ae>
 800c8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a4:	1b2c      	subs	r4, r5, r4
 800c8a6:	441c      	add	r4, r3
 800c8a8:	2c00      	cmp	r4, #0
 800c8aa:	f340 8096 	ble.w	800c9da <_strtod_l+0x53a>
 800c8ae:	f014 030f 	ands.w	r3, r4, #15
 800c8b2:	d00a      	beq.n	800c8ca <_strtod_l+0x42a>
 800c8b4:	495e      	ldr	r1, [pc, #376]	@ (800ca30 <_strtod_l+0x590>)
 800c8b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c8ba:	4652      	mov	r2, sl
 800c8bc:	465b      	mov	r3, fp
 800c8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8c2:	f7f3 fea9 	bl	8000618 <__aeabi_dmul>
 800c8c6:	4682      	mov	sl, r0
 800c8c8:	468b      	mov	fp, r1
 800c8ca:	f034 040f 	bics.w	r4, r4, #15
 800c8ce:	d073      	beq.n	800c9b8 <_strtod_l+0x518>
 800c8d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c8d4:	dd48      	ble.n	800c968 <_strtod_l+0x4c8>
 800c8d6:	2400      	movs	r4, #0
 800c8d8:	46a0      	mov	r8, r4
 800c8da:	940a      	str	r4, [sp, #40]	@ 0x28
 800c8dc:	46a1      	mov	r9, r4
 800c8de:	9a05      	ldr	r2, [sp, #20]
 800c8e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ca38 <_strtod_l+0x598>
 800c8e4:	2322      	movs	r3, #34	@ 0x22
 800c8e6:	6013      	str	r3, [r2, #0]
 800c8e8:	f04f 0a00 	mov.w	sl, #0
 800c8ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f43f ae0f 	beq.w	800c512 <_strtod_l+0x72>
 800c8f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8f6:	9805      	ldr	r0, [sp, #20]
 800c8f8:	f002 ff68 	bl	800f7cc <_Bfree>
 800c8fc:	9805      	ldr	r0, [sp, #20]
 800c8fe:	4649      	mov	r1, r9
 800c900:	f002 ff64 	bl	800f7cc <_Bfree>
 800c904:	9805      	ldr	r0, [sp, #20]
 800c906:	4641      	mov	r1, r8
 800c908:	f002 ff60 	bl	800f7cc <_Bfree>
 800c90c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c90e:	9805      	ldr	r0, [sp, #20]
 800c910:	f002 ff5c 	bl	800f7cc <_Bfree>
 800c914:	9805      	ldr	r0, [sp, #20]
 800c916:	4621      	mov	r1, r4
 800c918:	f002 ff58 	bl	800f7cc <_Bfree>
 800c91c:	e5f9      	b.n	800c512 <_strtod_l+0x72>
 800c91e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c920:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c924:	4293      	cmp	r3, r2
 800c926:	dbbc      	blt.n	800c8a2 <_strtod_l+0x402>
 800c928:	4c41      	ldr	r4, [pc, #260]	@ (800ca30 <_strtod_l+0x590>)
 800c92a:	f1c5 050f 	rsb	r5, r5, #15
 800c92e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c932:	4652      	mov	r2, sl
 800c934:	465b      	mov	r3, fp
 800c936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c93a:	f7f3 fe6d 	bl	8000618 <__aeabi_dmul>
 800c93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c940:	1b5d      	subs	r5, r3, r5
 800c942:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c946:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c94a:	e78f      	b.n	800c86c <_strtod_l+0x3cc>
 800c94c:	3316      	adds	r3, #22
 800c94e:	dba8      	blt.n	800c8a2 <_strtod_l+0x402>
 800c950:	4b37      	ldr	r3, [pc, #220]	@ (800ca30 <_strtod_l+0x590>)
 800c952:	eba9 0808 	sub.w	r8, r9, r8
 800c956:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c95a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c95e:	4650      	mov	r0, sl
 800c960:	4659      	mov	r1, fp
 800c962:	f7f3 ff83 	bl	800086c <__aeabi_ddiv>
 800c966:	e783      	b.n	800c870 <_strtod_l+0x3d0>
 800c968:	4b32      	ldr	r3, [pc, #200]	@ (800ca34 <_strtod_l+0x594>)
 800c96a:	9308      	str	r3, [sp, #32]
 800c96c:	2300      	movs	r3, #0
 800c96e:	1124      	asrs	r4, r4, #4
 800c970:	4650      	mov	r0, sl
 800c972:	4659      	mov	r1, fp
 800c974:	461e      	mov	r6, r3
 800c976:	2c01      	cmp	r4, #1
 800c978:	dc21      	bgt.n	800c9be <_strtod_l+0x51e>
 800c97a:	b10b      	cbz	r3, 800c980 <_strtod_l+0x4e0>
 800c97c:	4682      	mov	sl, r0
 800c97e:	468b      	mov	fp, r1
 800c980:	492c      	ldr	r1, [pc, #176]	@ (800ca34 <_strtod_l+0x594>)
 800c982:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c986:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c98a:	4652      	mov	r2, sl
 800c98c:	465b      	mov	r3, fp
 800c98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c992:	f7f3 fe41 	bl	8000618 <__aeabi_dmul>
 800c996:	4b28      	ldr	r3, [pc, #160]	@ (800ca38 <_strtod_l+0x598>)
 800c998:	460a      	mov	r2, r1
 800c99a:	400b      	ands	r3, r1
 800c99c:	4927      	ldr	r1, [pc, #156]	@ (800ca3c <_strtod_l+0x59c>)
 800c99e:	428b      	cmp	r3, r1
 800c9a0:	4682      	mov	sl, r0
 800c9a2:	d898      	bhi.n	800c8d6 <_strtod_l+0x436>
 800c9a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c9a8:	428b      	cmp	r3, r1
 800c9aa:	bf86      	itte	hi
 800c9ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ca40 <_strtod_l+0x5a0>
 800c9b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800c9b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	9308      	str	r3, [sp, #32]
 800c9bc:	e07a      	b.n	800cab4 <_strtod_l+0x614>
 800c9be:	07e2      	lsls	r2, r4, #31
 800c9c0:	d505      	bpl.n	800c9ce <_strtod_l+0x52e>
 800c9c2:	9b08      	ldr	r3, [sp, #32]
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f7f3 fe26 	bl	8000618 <__aeabi_dmul>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	9a08      	ldr	r2, [sp, #32]
 800c9d0:	3208      	adds	r2, #8
 800c9d2:	3601      	adds	r6, #1
 800c9d4:	1064      	asrs	r4, r4, #1
 800c9d6:	9208      	str	r2, [sp, #32]
 800c9d8:	e7cd      	b.n	800c976 <_strtod_l+0x4d6>
 800c9da:	d0ed      	beq.n	800c9b8 <_strtod_l+0x518>
 800c9dc:	4264      	negs	r4, r4
 800c9de:	f014 020f 	ands.w	r2, r4, #15
 800c9e2:	d00a      	beq.n	800c9fa <_strtod_l+0x55a>
 800c9e4:	4b12      	ldr	r3, [pc, #72]	@ (800ca30 <_strtod_l+0x590>)
 800c9e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9ea:	4650      	mov	r0, sl
 800c9ec:	4659      	mov	r1, fp
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	f7f3 ff3b 	bl	800086c <__aeabi_ddiv>
 800c9f6:	4682      	mov	sl, r0
 800c9f8:	468b      	mov	fp, r1
 800c9fa:	1124      	asrs	r4, r4, #4
 800c9fc:	d0dc      	beq.n	800c9b8 <_strtod_l+0x518>
 800c9fe:	2c1f      	cmp	r4, #31
 800ca00:	dd20      	ble.n	800ca44 <_strtod_l+0x5a4>
 800ca02:	2400      	movs	r4, #0
 800ca04:	46a0      	mov	r8, r4
 800ca06:	940a      	str	r4, [sp, #40]	@ 0x28
 800ca08:	46a1      	mov	r9, r4
 800ca0a:	9a05      	ldr	r2, [sp, #20]
 800ca0c:	2322      	movs	r3, #34	@ 0x22
 800ca0e:	f04f 0a00 	mov.w	sl, #0
 800ca12:	f04f 0b00 	mov.w	fp, #0
 800ca16:	6013      	str	r3, [r2, #0]
 800ca18:	e768      	b.n	800c8ec <_strtod_l+0x44c>
 800ca1a:	bf00      	nop
 800ca1c:	08011566 	.word	0x08011566
 800ca20:	08011404 	.word	0x08011404
 800ca24:	0801155e 	.word	0x0801155e
 800ca28:	08011648 	.word	0x08011648
 800ca2c:	08011644 	.word	0x08011644
 800ca30:	080117a8 	.word	0x080117a8
 800ca34:	08011780 	.word	0x08011780
 800ca38:	7ff00000 	.word	0x7ff00000
 800ca3c:	7ca00000 	.word	0x7ca00000
 800ca40:	7fefffff 	.word	0x7fefffff
 800ca44:	f014 0310 	ands.w	r3, r4, #16
 800ca48:	bf18      	it	ne
 800ca4a:	236a      	movne	r3, #106	@ 0x6a
 800ca4c:	4ea9      	ldr	r6, [pc, #676]	@ (800ccf4 <_strtod_l+0x854>)
 800ca4e:	9308      	str	r3, [sp, #32]
 800ca50:	4650      	mov	r0, sl
 800ca52:	4659      	mov	r1, fp
 800ca54:	2300      	movs	r3, #0
 800ca56:	07e2      	lsls	r2, r4, #31
 800ca58:	d504      	bpl.n	800ca64 <_strtod_l+0x5c4>
 800ca5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca5e:	f7f3 fddb 	bl	8000618 <__aeabi_dmul>
 800ca62:	2301      	movs	r3, #1
 800ca64:	1064      	asrs	r4, r4, #1
 800ca66:	f106 0608 	add.w	r6, r6, #8
 800ca6a:	d1f4      	bne.n	800ca56 <_strtod_l+0x5b6>
 800ca6c:	b10b      	cbz	r3, 800ca72 <_strtod_l+0x5d2>
 800ca6e:	4682      	mov	sl, r0
 800ca70:	468b      	mov	fp, r1
 800ca72:	9b08      	ldr	r3, [sp, #32]
 800ca74:	b1b3      	cbz	r3, 800caa4 <_strtod_l+0x604>
 800ca76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ca7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	4659      	mov	r1, fp
 800ca82:	dd0f      	ble.n	800caa4 <_strtod_l+0x604>
 800ca84:	2b1f      	cmp	r3, #31
 800ca86:	dd55      	ble.n	800cb34 <_strtod_l+0x694>
 800ca88:	2b34      	cmp	r3, #52	@ 0x34
 800ca8a:	bfde      	ittt	le
 800ca8c:	f04f 33ff 	movle.w	r3, #4294967295
 800ca90:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ca94:	4093      	lslle	r3, r2
 800ca96:	f04f 0a00 	mov.w	sl, #0
 800ca9a:	bfcc      	ite	gt
 800ca9c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800caa0:	ea03 0b01 	andle.w	fp, r3, r1
 800caa4:	2200      	movs	r2, #0
 800caa6:	2300      	movs	r3, #0
 800caa8:	4650      	mov	r0, sl
 800caaa:	4659      	mov	r1, fp
 800caac:	f7f4 f81c 	bl	8000ae8 <__aeabi_dcmpeq>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d1a6      	bne.n	800ca02 <_strtod_l+0x562>
 800cab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800caba:	9805      	ldr	r0, [sp, #20]
 800cabc:	462b      	mov	r3, r5
 800cabe:	463a      	mov	r2, r7
 800cac0:	f002 feec 	bl	800f89c <__s2b>
 800cac4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cac6:	2800      	cmp	r0, #0
 800cac8:	f43f af05 	beq.w	800c8d6 <_strtod_l+0x436>
 800cacc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cace:	2a00      	cmp	r2, #0
 800cad0:	eba9 0308 	sub.w	r3, r9, r8
 800cad4:	bfa8      	it	ge
 800cad6:	2300      	movge	r3, #0
 800cad8:	9312      	str	r3, [sp, #72]	@ 0x48
 800cada:	2400      	movs	r4, #0
 800cadc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cae0:	9316      	str	r3, [sp, #88]	@ 0x58
 800cae2:	46a0      	mov	r8, r4
 800cae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cae6:	9805      	ldr	r0, [sp, #20]
 800cae8:	6859      	ldr	r1, [r3, #4]
 800caea:	f002 fe2f 	bl	800f74c <_Balloc>
 800caee:	4681      	mov	r9, r0
 800caf0:	2800      	cmp	r0, #0
 800caf2:	f43f aef4 	beq.w	800c8de <_strtod_l+0x43e>
 800caf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caf8:	691a      	ldr	r2, [r3, #16]
 800cafa:	3202      	adds	r2, #2
 800cafc:	f103 010c 	add.w	r1, r3, #12
 800cb00:	0092      	lsls	r2, r2, #2
 800cb02:	300c      	adds	r0, #12
 800cb04:	f001 fc03 	bl	800e30e <memcpy>
 800cb08:	ec4b ab10 	vmov	d0, sl, fp
 800cb0c:	9805      	ldr	r0, [sp, #20]
 800cb0e:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb10:	a91b      	add	r1, sp, #108	@ 0x6c
 800cb12:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cb16:	f003 f9fd 	bl	800ff14 <__d2b>
 800cb1a:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f43f aede 	beq.w	800c8de <_strtod_l+0x43e>
 800cb22:	9805      	ldr	r0, [sp, #20]
 800cb24:	2101      	movs	r1, #1
 800cb26:	f002 ff4f 	bl	800f9c8 <__i2b>
 800cb2a:	4680      	mov	r8, r0
 800cb2c:	b948      	cbnz	r0, 800cb42 <_strtod_l+0x6a2>
 800cb2e:	f04f 0800 	mov.w	r8, #0
 800cb32:	e6d4      	b.n	800c8de <_strtod_l+0x43e>
 800cb34:	f04f 32ff 	mov.w	r2, #4294967295
 800cb38:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3c:	ea03 0a0a 	and.w	sl, r3, sl
 800cb40:	e7b0      	b.n	800caa4 <_strtod_l+0x604>
 800cb42:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cb44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cb46:	2d00      	cmp	r5, #0
 800cb48:	bfab      	itete	ge
 800cb4a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cb4c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cb4e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cb50:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cb52:	bfac      	ite	ge
 800cb54:	18ef      	addge	r7, r5, r3
 800cb56:	1b5e      	sublt	r6, r3, r5
 800cb58:	9b08      	ldr	r3, [sp, #32]
 800cb5a:	1aed      	subs	r5, r5, r3
 800cb5c:	4415      	add	r5, r2
 800cb5e:	4b66      	ldr	r3, [pc, #408]	@ (800ccf8 <_strtod_l+0x858>)
 800cb60:	3d01      	subs	r5, #1
 800cb62:	429d      	cmp	r5, r3
 800cb64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cb68:	da50      	bge.n	800cc0c <_strtod_l+0x76c>
 800cb6a:	1b5b      	subs	r3, r3, r5
 800cb6c:	2b1f      	cmp	r3, #31
 800cb6e:	eba2 0203 	sub.w	r2, r2, r3
 800cb72:	f04f 0101 	mov.w	r1, #1
 800cb76:	dc3d      	bgt.n	800cbf4 <_strtod_l+0x754>
 800cb78:	fa01 f303 	lsl.w	r3, r1, r3
 800cb7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb7e:	2300      	movs	r3, #0
 800cb80:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb82:	18bd      	adds	r5, r7, r2
 800cb84:	9b08      	ldr	r3, [sp, #32]
 800cb86:	42af      	cmp	r7, r5
 800cb88:	4416      	add	r6, r2
 800cb8a:	441e      	add	r6, r3
 800cb8c:	463b      	mov	r3, r7
 800cb8e:	bfa8      	it	ge
 800cb90:	462b      	movge	r3, r5
 800cb92:	42b3      	cmp	r3, r6
 800cb94:	bfa8      	it	ge
 800cb96:	4633      	movge	r3, r6
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	bfc2      	ittt	gt
 800cb9c:	1aed      	subgt	r5, r5, r3
 800cb9e:	1af6      	subgt	r6, r6, r3
 800cba0:	1aff      	subgt	r7, r7, r3
 800cba2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	dd16      	ble.n	800cbd6 <_strtod_l+0x736>
 800cba8:	4641      	mov	r1, r8
 800cbaa:	9805      	ldr	r0, [sp, #20]
 800cbac:	461a      	mov	r2, r3
 800cbae:	f002 ffcb 	bl	800fb48 <__pow5mult>
 800cbb2:	4680      	mov	r8, r0
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	d0ba      	beq.n	800cb2e <_strtod_l+0x68e>
 800cbb8:	4601      	mov	r1, r0
 800cbba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbbc:	9805      	ldr	r0, [sp, #20]
 800cbbe:	f002 ff19 	bl	800f9f4 <__multiply>
 800cbc2:	900e      	str	r0, [sp, #56]	@ 0x38
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	f43f ae8a 	beq.w	800c8de <_strtod_l+0x43e>
 800cbca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbcc:	9805      	ldr	r0, [sp, #20]
 800cbce:	f002 fdfd 	bl	800f7cc <_Bfree>
 800cbd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbd4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbd6:	2d00      	cmp	r5, #0
 800cbd8:	dc1d      	bgt.n	800cc16 <_strtod_l+0x776>
 800cbda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	dd23      	ble.n	800cc28 <_strtod_l+0x788>
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cbe4:	9805      	ldr	r0, [sp, #20]
 800cbe6:	f002 ffaf 	bl	800fb48 <__pow5mult>
 800cbea:	4681      	mov	r9, r0
 800cbec:	b9e0      	cbnz	r0, 800cc28 <_strtod_l+0x788>
 800cbee:	f04f 0900 	mov.w	r9, #0
 800cbf2:	e674      	b.n	800c8de <_strtod_l+0x43e>
 800cbf4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cbf8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cbfc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cc00:	35e2      	adds	r5, #226	@ 0xe2
 800cc02:	fa01 f305 	lsl.w	r3, r1, r5
 800cc06:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc08:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cc0a:	e7ba      	b.n	800cb82 <_strtod_l+0x6e2>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc10:	2301      	movs	r3, #1
 800cc12:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc14:	e7b5      	b.n	800cb82 <_strtod_l+0x6e2>
 800cc16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc18:	9805      	ldr	r0, [sp, #20]
 800cc1a:	462a      	mov	r2, r5
 800cc1c:	f002 ffee 	bl	800fbfc <__lshift>
 800cc20:	901a      	str	r0, [sp, #104]	@ 0x68
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d1d9      	bne.n	800cbda <_strtod_l+0x73a>
 800cc26:	e65a      	b.n	800c8de <_strtod_l+0x43e>
 800cc28:	2e00      	cmp	r6, #0
 800cc2a:	dd07      	ble.n	800cc3c <_strtod_l+0x79c>
 800cc2c:	4649      	mov	r1, r9
 800cc2e:	9805      	ldr	r0, [sp, #20]
 800cc30:	4632      	mov	r2, r6
 800cc32:	f002 ffe3 	bl	800fbfc <__lshift>
 800cc36:	4681      	mov	r9, r0
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d0d8      	beq.n	800cbee <_strtod_l+0x74e>
 800cc3c:	2f00      	cmp	r7, #0
 800cc3e:	dd08      	ble.n	800cc52 <_strtod_l+0x7b2>
 800cc40:	4641      	mov	r1, r8
 800cc42:	9805      	ldr	r0, [sp, #20]
 800cc44:	463a      	mov	r2, r7
 800cc46:	f002 ffd9 	bl	800fbfc <__lshift>
 800cc4a:	4680      	mov	r8, r0
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f43f ae46 	beq.w	800c8de <_strtod_l+0x43e>
 800cc52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc54:	9805      	ldr	r0, [sp, #20]
 800cc56:	464a      	mov	r2, r9
 800cc58:	f003 f858 	bl	800fd0c <__mdiff>
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	f43f ae3d 	beq.w	800c8de <_strtod_l+0x43e>
 800cc64:	68c3      	ldr	r3, [r0, #12]
 800cc66:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc68:	2300      	movs	r3, #0
 800cc6a:	60c3      	str	r3, [r0, #12]
 800cc6c:	4641      	mov	r1, r8
 800cc6e:	f003 f831 	bl	800fcd4 <__mcmp>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	da46      	bge.n	800cd04 <_strtod_l+0x864>
 800cc76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc78:	ea53 030a 	orrs.w	r3, r3, sl
 800cc7c:	d16c      	bne.n	800cd58 <_strtod_l+0x8b8>
 800cc7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d168      	bne.n	800cd58 <_strtod_l+0x8b8>
 800cc86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc8a:	0d1b      	lsrs	r3, r3, #20
 800cc8c:	051b      	lsls	r3, r3, #20
 800cc8e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cc92:	d961      	bls.n	800cd58 <_strtod_l+0x8b8>
 800cc94:	6963      	ldr	r3, [r4, #20]
 800cc96:	b913      	cbnz	r3, 800cc9e <_strtod_l+0x7fe>
 800cc98:	6923      	ldr	r3, [r4, #16]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	dd5c      	ble.n	800cd58 <_strtod_l+0x8b8>
 800cc9e:	4621      	mov	r1, r4
 800cca0:	2201      	movs	r2, #1
 800cca2:	9805      	ldr	r0, [sp, #20]
 800cca4:	f002 ffaa 	bl	800fbfc <__lshift>
 800cca8:	4641      	mov	r1, r8
 800ccaa:	4604      	mov	r4, r0
 800ccac:	f003 f812 	bl	800fcd4 <__mcmp>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	dd51      	ble.n	800cd58 <_strtod_l+0x8b8>
 800ccb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccb8:	9a08      	ldr	r2, [sp, #32]
 800ccba:	0d1b      	lsrs	r3, r3, #20
 800ccbc:	051b      	lsls	r3, r3, #20
 800ccbe:	2a00      	cmp	r2, #0
 800ccc0:	d06b      	beq.n	800cd9a <_strtod_l+0x8fa>
 800ccc2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ccc6:	d868      	bhi.n	800cd9a <_strtod_l+0x8fa>
 800ccc8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cccc:	f67f ae9d 	bls.w	800ca0a <_strtod_l+0x56a>
 800ccd0:	4b0a      	ldr	r3, [pc, #40]	@ (800ccfc <_strtod_l+0x85c>)
 800ccd2:	4650      	mov	r0, sl
 800ccd4:	4659      	mov	r1, fp
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f7f3 fc9e 	bl	8000618 <__aeabi_dmul>
 800ccdc:	4b08      	ldr	r3, [pc, #32]	@ (800cd00 <_strtod_l+0x860>)
 800ccde:	400b      	ands	r3, r1
 800cce0:	4682      	mov	sl, r0
 800cce2:	468b      	mov	fp, r1
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f47f ae05 	bne.w	800c8f4 <_strtod_l+0x454>
 800ccea:	9a05      	ldr	r2, [sp, #20]
 800ccec:	2322      	movs	r3, #34	@ 0x22
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	e600      	b.n	800c8f4 <_strtod_l+0x454>
 800ccf2:	bf00      	nop
 800ccf4:	08011430 	.word	0x08011430
 800ccf8:	fffffc02 	.word	0xfffffc02
 800ccfc:	39500000 	.word	0x39500000
 800cd00:	7ff00000 	.word	0x7ff00000
 800cd04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cd08:	d165      	bne.n	800cdd6 <_strtod_l+0x936>
 800cd0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd10:	b35a      	cbz	r2, 800cd6a <_strtod_l+0x8ca>
 800cd12:	4a9f      	ldr	r2, [pc, #636]	@ (800cf90 <_strtod_l+0xaf0>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d12b      	bne.n	800cd70 <_strtod_l+0x8d0>
 800cd18:	9b08      	ldr	r3, [sp, #32]
 800cd1a:	4651      	mov	r1, sl
 800cd1c:	b303      	cbz	r3, 800cd60 <_strtod_l+0x8c0>
 800cd1e:	4b9d      	ldr	r3, [pc, #628]	@ (800cf94 <_strtod_l+0xaf4>)
 800cd20:	465a      	mov	r2, fp
 800cd22:	4013      	ands	r3, r2
 800cd24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cd28:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2c:	d81b      	bhi.n	800cd66 <_strtod_l+0x8c6>
 800cd2e:	0d1b      	lsrs	r3, r3, #20
 800cd30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd34:	fa02 f303 	lsl.w	r3, r2, r3
 800cd38:	4299      	cmp	r1, r3
 800cd3a:	d119      	bne.n	800cd70 <_strtod_l+0x8d0>
 800cd3c:	4b96      	ldr	r3, [pc, #600]	@ (800cf98 <_strtod_l+0xaf8>)
 800cd3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d102      	bne.n	800cd4a <_strtod_l+0x8aa>
 800cd44:	3101      	adds	r1, #1
 800cd46:	f43f adca 	beq.w	800c8de <_strtod_l+0x43e>
 800cd4a:	4b92      	ldr	r3, [pc, #584]	@ (800cf94 <_strtod_l+0xaf4>)
 800cd4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd4e:	401a      	ands	r2, r3
 800cd50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cd54:	f04f 0a00 	mov.w	sl, #0
 800cd58:	9b08      	ldr	r3, [sp, #32]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1b8      	bne.n	800ccd0 <_strtod_l+0x830>
 800cd5e:	e5c9      	b.n	800c8f4 <_strtod_l+0x454>
 800cd60:	f04f 33ff 	mov.w	r3, #4294967295
 800cd64:	e7e8      	b.n	800cd38 <_strtod_l+0x898>
 800cd66:	4613      	mov	r3, r2
 800cd68:	e7e6      	b.n	800cd38 <_strtod_l+0x898>
 800cd6a:	ea53 030a 	orrs.w	r3, r3, sl
 800cd6e:	d0a1      	beq.n	800ccb4 <_strtod_l+0x814>
 800cd70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd72:	b1db      	cbz	r3, 800cdac <_strtod_l+0x90c>
 800cd74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd76:	4213      	tst	r3, r2
 800cd78:	d0ee      	beq.n	800cd58 <_strtod_l+0x8b8>
 800cd7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd7c:	9a08      	ldr	r2, [sp, #32]
 800cd7e:	4650      	mov	r0, sl
 800cd80:	4659      	mov	r1, fp
 800cd82:	b1bb      	cbz	r3, 800cdb4 <_strtod_l+0x914>
 800cd84:	f7ff fb6c 	bl	800c460 <sulp>
 800cd88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd8c:	ec53 2b10 	vmov	r2, r3, d0
 800cd90:	f7f3 fa8c 	bl	80002ac <__adddf3>
 800cd94:	4682      	mov	sl, r0
 800cd96:	468b      	mov	fp, r1
 800cd98:	e7de      	b.n	800cd58 <_strtod_l+0x8b8>
 800cd9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cd9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cda2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cda6:	f04f 3aff 	mov.w	sl, #4294967295
 800cdaa:	e7d5      	b.n	800cd58 <_strtod_l+0x8b8>
 800cdac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cdae:	ea13 0f0a 	tst.w	r3, sl
 800cdb2:	e7e1      	b.n	800cd78 <_strtod_l+0x8d8>
 800cdb4:	f7ff fb54 	bl	800c460 <sulp>
 800cdb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdbc:	ec53 2b10 	vmov	r2, r3, d0
 800cdc0:	f7f3 fa72 	bl	80002a8 <__aeabi_dsub>
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	4682      	mov	sl, r0
 800cdca:	468b      	mov	fp, r1
 800cdcc:	f7f3 fe8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	d0c1      	beq.n	800cd58 <_strtod_l+0x8b8>
 800cdd4:	e619      	b.n	800ca0a <_strtod_l+0x56a>
 800cdd6:	4641      	mov	r1, r8
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f003 f8f3 	bl	800ffc4 <__ratio>
 800cdde:	ec57 6b10 	vmov	r6, r7, d0
 800cde2:	2200      	movs	r2, #0
 800cde4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cde8:	4630      	mov	r0, r6
 800cdea:	4639      	mov	r1, r7
 800cdec:	f7f3 fe90 	bl	8000b10 <__aeabi_dcmple>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d06f      	beq.n	800ced4 <_strtod_l+0xa34>
 800cdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d17a      	bne.n	800cef0 <_strtod_l+0xa50>
 800cdfa:	f1ba 0f00 	cmp.w	sl, #0
 800cdfe:	d158      	bne.n	800ceb2 <_strtod_l+0xa12>
 800ce00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d15a      	bne.n	800cec0 <_strtod_l+0xa20>
 800ce0a:	4b64      	ldr	r3, [pc, #400]	@ (800cf9c <_strtod_l+0xafc>)
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	4630      	mov	r0, r6
 800ce10:	4639      	mov	r1, r7
 800ce12:	f7f3 fe73 	bl	8000afc <__aeabi_dcmplt>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d159      	bne.n	800cece <_strtod_l+0xa2e>
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	4639      	mov	r1, r7
 800ce1e:	4b60      	ldr	r3, [pc, #384]	@ (800cfa0 <_strtod_l+0xb00>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	f7f3 fbf9 	bl	8000618 <__aeabi_dmul>
 800ce26:	4606      	mov	r6, r0
 800ce28:	460f      	mov	r7, r1
 800ce2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ce2e:	9606      	str	r6, [sp, #24]
 800ce30:	9307      	str	r3, [sp, #28]
 800ce32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce36:	4d57      	ldr	r5, [pc, #348]	@ (800cf94 <_strtod_l+0xaf4>)
 800ce38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ce3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce3e:	401d      	ands	r5, r3
 800ce40:	4b58      	ldr	r3, [pc, #352]	@ (800cfa4 <_strtod_l+0xb04>)
 800ce42:	429d      	cmp	r5, r3
 800ce44:	f040 80b2 	bne.w	800cfac <_strtod_l+0xb0c>
 800ce48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ce4e:	ec4b ab10 	vmov	d0, sl, fp
 800ce52:	f002 ffef 	bl	800fe34 <__ulp>
 800ce56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce5a:	ec51 0b10 	vmov	r0, r1, d0
 800ce5e:	f7f3 fbdb 	bl	8000618 <__aeabi_dmul>
 800ce62:	4652      	mov	r2, sl
 800ce64:	465b      	mov	r3, fp
 800ce66:	f7f3 fa21 	bl	80002ac <__adddf3>
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	4949      	ldr	r1, [pc, #292]	@ (800cf94 <_strtod_l+0xaf4>)
 800ce6e:	4a4e      	ldr	r2, [pc, #312]	@ (800cfa8 <_strtod_l+0xb08>)
 800ce70:	4019      	ands	r1, r3
 800ce72:	4291      	cmp	r1, r2
 800ce74:	4682      	mov	sl, r0
 800ce76:	d942      	bls.n	800cefe <_strtod_l+0xa5e>
 800ce78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce7a:	4b47      	ldr	r3, [pc, #284]	@ (800cf98 <_strtod_l+0xaf8>)
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d103      	bne.n	800ce88 <_strtod_l+0x9e8>
 800ce80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce82:	3301      	adds	r3, #1
 800ce84:	f43f ad2b 	beq.w	800c8de <_strtod_l+0x43e>
 800ce88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cf98 <_strtod_l+0xaf8>
 800ce8c:	f04f 3aff 	mov.w	sl, #4294967295
 800ce90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce92:	9805      	ldr	r0, [sp, #20]
 800ce94:	f002 fc9a 	bl	800f7cc <_Bfree>
 800ce98:	9805      	ldr	r0, [sp, #20]
 800ce9a:	4649      	mov	r1, r9
 800ce9c:	f002 fc96 	bl	800f7cc <_Bfree>
 800cea0:	9805      	ldr	r0, [sp, #20]
 800cea2:	4641      	mov	r1, r8
 800cea4:	f002 fc92 	bl	800f7cc <_Bfree>
 800cea8:	9805      	ldr	r0, [sp, #20]
 800ceaa:	4621      	mov	r1, r4
 800ceac:	f002 fc8e 	bl	800f7cc <_Bfree>
 800ceb0:	e618      	b.n	800cae4 <_strtod_l+0x644>
 800ceb2:	f1ba 0f01 	cmp.w	sl, #1
 800ceb6:	d103      	bne.n	800cec0 <_strtod_l+0xa20>
 800ceb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f43f ada5 	beq.w	800ca0a <_strtod_l+0x56a>
 800cec0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cf70 <_strtod_l+0xad0>
 800cec4:	4f35      	ldr	r7, [pc, #212]	@ (800cf9c <_strtod_l+0xafc>)
 800cec6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ceca:	2600      	movs	r6, #0
 800cecc:	e7b1      	b.n	800ce32 <_strtod_l+0x992>
 800cece:	4f34      	ldr	r7, [pc, #208]	@ (800cfa0 <_strtod_l+0xb00>)
 800ced0:	2600      	movs	r6, #0
 800ced2:	e7aa      	b.n	800ce2a <_strtod_l+0x98a>
 800ced4:	4b32      	ldr	r3, [pc, #200]	@ (800cfa0 <_strtod_l+0xb00>)
 800ced6:	4630      	mov	r0, r6
 800ced8:	4639      	mov	r1, r7
 800ceda:	2200      	movs	r2, #0
 800cedc:	f7f3 fb9c 	bl	8000618 <__aeabi_dmul>
 800cee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cee2:	4606      	mov	r6, r0
 800cee4:	460f      	mov	r7, r1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d09f      	beq.n	800ce2a <_strtod_l+0x98a>
 800ceea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ceee:	e7a0      	b.n	800ce32 <_strtod_l+0x992>
 800cef0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cf78 <_strtod_l+0xad8>
 800cef4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cef8:	ec57 6b17 	vmov	r6, r7, d7
 800cefc:	e799      	b.n	800ce32 <_strtod_l+0x992>
 800cefe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cf02:	9b08      	ldr	r3, [sp, #32]
 800cf04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1c1      	bne.n	800ce90 <_strtod_l+0x9f0>
 800cf0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf10:	0d1b      	lsrs	r3, r3, #20
 800cf12:	051b      	lsls	r3, r3, #20
 800cf14:	429d      	cmp	r5, r3
 800cf16:	d1bb      	bne.n	800ce90 <_strtod_l+0x9f0>
 800cf18:	4630      	mov	r0, r6
 800cf1a:	4639      	mov	r1, r7
 800cf1c:	f7f3 fedc 	bl	8000cd8 <__aeabi_d2lz>
 800cf20:	f7f3 fb4c 	bl	80005bc <__aeabi_l2d>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	4630      	mov	r0, r6
 800cf2a:	4639      	mov	r1, r7
 800cf2c:	f7f3 f9bc 	bl	80002a8 <__aeabi_dsub>
 800cf30:	460b      	mov	r3, r1
 800cf32:	4602      	mov	r2, r0
 800cf34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cf38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cf3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf3e:	ea46 060a 	orr.w	r6, r6, sl
 800cf42:	431e      	orrs	r6, r3
 800cf44:	d06f      	beq.n	800d026 <_strtod_l+0xb86>
 800cf46:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf80 <_strtod_l+0xae0>)
 800cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4c:	f7f3 fdd6 	bl	8000afc <__aeabi_dcmplt>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	f47f accf 	bne.w	800c8f4 <_strtod_l+0x454>
 800cf56:	a30c      	add	r3, pc, #48	@ (adr r3, 800cf88 <_strtod_l+0xae8>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf60:	f7f3 fdea 	bl	8000b38 <__aeabi_dcmpgt>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d093      	beq.n	800ce90 <_strtod_l+0x9f0>
 800cf68:	e4c4      	b.n	800c8f4 <_strtod_l+0x454>
 800cf6a:	bf00      	nop
 800cf6c:	f3af 8000 	nop.w
 800cf70:	00000000 	.word	0x00000000
 800cf74:	bff00000 	.word	0xbff00000
 800cf78:	00000000 	.word	0x00000000
 800cf7c:	3ff00000 	.word	0x3ff00000
 800cf80:	94a03595 	.word	0x94a03595
 800cf84:	3fdfffff 	.word	0x3fdfffff
 800cf88:	35afe535 	.word	0x35afe535
 800cf8c:	3fe00000 	.word	0x3fe00000
 800cf90:	000fffff 	.word	0x000fffff
 800cf94:	7ff00000 	.word	0x7ff00000
 800cf98:	7fefffff 	.word	0x7fefffff
 800cf9c:	3ff00000 	.word	0x3ff00000
 800cfa0:	3fe00000 	.word	0x3fe00000
 800cfa4:	7fe00000 	.word	0x7fe00000
 800cfa8:	7c9fffff 	.word	0x7c9fffff
 800cfac:	9b08      	ldr	r3, [sp, #32]
 800cfae:	b323      	cbz	r3, 800cffa <_strtod_l+0xb5a>
 800cfb0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cfb4:	d821      	bhi.n	800cffa <_strtod_l+0xb5a>
 800cfb6:	a328      	add	r3, pc, #160	@ (adr r3, 800d058 <_strtod_l+0xbb8>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	f7f3 fda6 	bl	8000b10 <__aeabi_dcmple>
 800cfc4:	b1a0      	cbz	r0, 800cff0 <_strtod_l+0xb50>
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	4630      	mov	r0, r6
 800cfca:	f7f3 fdfd 	bl	8000bc8 <__aeabi_d2uiz>
 800cfce:	2801      	cmp	r0, #1
 800cfd0:	bf38      	it	cc
 800cfd2:	2001      	movcc	r0, #1
 800cfd4:	f7f3 faa6 	bl	8000524 <__aeabi_ui2d>
 800cfd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfda:	4606      	mov	r6, r0
 800cfdc:	460f      	mov	r7, r1
 800cfde:	b9fb      	cbnz	r3, 800d020 <_strtod_l+0xb80>
 800cfe0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cfe4:	9014      	str	r0, [sp, #80]	@ 0x50
 800cfe6:	9315      	str	r3, [sp, #84]	@ 0x54
 800cfe8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cfec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cff0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cff2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cff6:	1b5b      	subs	r3, r3, r5
 800cff8:	9311      	str	r3, [sp, #68]	@ 0x44
 800cffa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cffe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d002:	f002 ff17 	bl	800fe34 <__ulp>
 800d006:	4650      	mov	r0, sl
 800d008:	ec53 2b10 	vmov	r2, r3, d0
 800d00c:	4659      	mov	r1, fp
 800d00e:	f7f3 fb03 	bl	8000618 <__aeabi_dmul>
 800d012:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d016:	f7f3 f949 	bl	80002ac <__adddf3>
 800d01a:	4682      	mov	sl, r0
 800d01c:	468b      	mov	fp, r1
 800d01e:	e770      	b.n	800cf02 <_strtod_l+0xa62>
 800d020:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d024:	e7e0      	b.n	800cfe8 <_strtod_l+0xb48>
 800d026:	a30e      	add	r3, pc, #56	@ (adr r3, 800d060 <_strtod_l+0xbc0>)
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	f7f3 fd66 	bl	8000afc <__aeabi_dcmplt>
 800d030:	e798      	b.n	800cf64 <_strtod_l+0xac4>
 800d032:	2300      	movs	r3, #0
 800d034:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d036:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d03a:	6013      	str	r3, [r2, #0]
 800d03c:	f7ff ba6d 	b.w	800c51a <_strtod_l+0x7a>
 800d040:	2a65      	cmp	r2, #101	@ 0x65
 800d042:	f43f ab66 	beq.w	800c712 <_strtod_l+0x272>
 800d046:	2a45      	cmp	r2, #69	@ 0x45
 800d048:	f43f ab63 	beq.w	800c712 <_strtod_l+0x272>
 800d04c:	2301      	movs	r3, #1
 800d04e:	f7ff bb9e 	b.w	800c78e <_strtod_l+0x2ee>
 800d052:	bf00      	nop
 800d054:	f3af 8000 	nop.w
 800d058:	ffc00000 	.word	0xffc00000
 800d05c:	41dfffff 	.word	0x41dfffff
 800d060:	94a03595 	.word	0x94a03595
 800d064:	3fcfffff 	.word	0x3fcfffff

0800d068 <_strtod_r>:
 800d068:	4b01      	ldr	r3, [pc, #4]	@ (800d070 <_strtod_r+0x8>)
 800d06a:	f7ff ba19 	b.w	800c4a0 <_strtod_l>
 800d06e:	bf00      	nop
 800d070:	20000130 	.word	0x20000130

0800d074 <strtod>:
 800d074:	460a      	mov	r2, r1
 800d076:	4601      	mov	r1, r0
 800d078:	4802      	ldr	r0, [pc, #8]	@ (800d084 <strtod+0x10>)
 800d07a:	4b03      	ldr	r3, [pc, #12]	@ (800d088 <strtod+0x14>)
 800d07c:	6800      	ldr	r0, [r0, #0]
 800d07e:	f7ff ba0f 	b.w	800c4a0 <_strtod_l>
 800d082:	bf00      	nop
 800d084:	2000029c 	.word	0x2000029c
 800d088:	20000130 	.word	0x20000130

0800d08c <_strtol_l.constprop.0>:
 800d08c:	2b24      	cmp	r3, #36	@ 0x24
 800d08e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d092:	4686      	mov	lr, r0
 800d094:	4690      	mov	r8, r2
 800d096:	d801      	bhi.n	800d09c <_strtol_l.constprop.0+0x10>
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d106      	bne.n	800d0aa <_strtol_l.constprop.0+0x1e>
 800d09c:	f001 f90a 	bl	800e2b4 <__errno>
 800d0a0:	2316      	movs	r3, #22
 800d0a2:	6003      	str	r3, [r0, #0]
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0aa:	4834      	ldr	r0, [pc, #208]	@ (800d17c <_strtol_l.constprop.0+0xf0>)
 800d0ac:	460d      	mov	r5, r1
 800d0ae:	462a      	mov	r2, r5
 800d0b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0b4:	5d06      	ldrb	r6, [r0, r4]
 800d0b6:	f016 0608 	ands.w	r6, r6, #8
 800d0ba:	d1f8      	bne.n	800d0ae <_strtol_l.constprop.0+0x22>
 800d0bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800d0be:	d12d      	bne.n	800d11c <_strtol_l.constprop.0+0x90>
 800d0c0:	782c      	ldrb	r4, [r5, #0]
 800d0c2:	2601      	movs	r6, #1
 800d0c4:	1c95      	adds	r5, r2, #2
 800d0c6:	f033 0210 	bics.w	r2, r3, #16
 800d0ca:	d109      	bne.n	800d0e0 <_strtol_l.constprop.0+0x54>
 800d0cc:	2c30      	cmp	r4, #48	@ 0x30
 800d0ce:	d12a      	bne.n	800d126 <_strtol_l.constprop.0+0x9a>
 800d0d0:	782a      	ldrb	r2, [r5, #0]
 800d0d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d0d6:	2a58      	cmp	r2, #88	@ 0x58
 800d0d8:	d125      	bne.n	800d126 <_strtol_l.constprop.0+0x9a>
 800d0da:	786c      	ldrb	r4, [r5, #1]
 800d0dc:	2310      	movs	r3, #16
 800d0de:	3502      	adds	r5, #2
 800d0e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d0e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	fbbc f9f3 	udiv	r9, ip, r3
 800d0ee:	4610      	mov	r0, r2
 800d0f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800d0f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d0f8:	2f09      	cmp	r7, #9
 800d0fa:	d81b      	bhi.n	800d134 <_strtol_l.constprop.0+0xa8>
 800d0fc:	463c      	mov	r4, r7
 800d0fe:	42a3      	cmp	r3, r4
 800d100:	dd27      	ble.n	800d152 <_strtol_l.constprop.0+0xc6>
 800d102:	1c57      	adds	r7, r2, #1
 800d104:	d007      	beq.n	800d116 <_strtol_l.constprop.0+0x8a>
 800d106:	4581      	cmp	r9, r0
 800d108:	d320      	bcc.n	800d14c <_strtol_l.constprop.0+0xc0>
 800d10a:	d101      	bne.n	800d110 <_strtol_l.constprop.0+0x84>
 800d10c:	45a2      	cmp	sl, r4
 800d10e:	db1d      	blt.n	800d14c <_strtol_l.constprop.0+0xc0>
 800d110:	fb00 4003 	mla	r0, r0, r3, r4
 800d114:	2201      	movs	r2, #1
 800d116:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d11a:	e7eb      	b.n	800d0f4 <_strtol_l.constprop.0+0x68>
 800d11c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d11e:	bf04      	itt	eq
 800d120:	782c      	ldrbeq	r4, [r5, #0]
 800d122:	1c95      	addeq	r5, r2, #2
 800d124:	e7cf      	b.n	800d0c6 <_strtol_l.constprop.0+0x3a>
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1da      	bne.n	800d0e0 <_strtol_l.constprop.0+0x54>
 800d12a:	2c30      	cmp	r4, #48	@ 0x30
 800d12c:	bf0c      	ite	eq
 800d12e:	2308      	moveq	r3, #8
 800d130:	230a      	movne	r3, #10
 800d132:	e7d5      	b.n	800d0e0 <_strtol_l.constprop.0+0x54>
 800d134:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d138:	2f19      	cmp	r7, #25
 800d13a:	d801      	bhi.n	800d140 <_strtol_l.constprop.0+0xb4>
 800d13c:	3c37      	subs	r4, #55	@ 0x37
 800d13e:	e7de      	b.n	800d0fe <_strtol_l.constprop.0+0x72>
 800d140:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d144:	2f19      	cmp	r7, #25
 800d146:	d804      	bhi.n	800d152 <_strtol_l.constprop.0+0xc6>
 800d148:	3c57      	subs	r4, #87	@ 0x57
 800d14a:	e7d8      	b.n	800d0fe <_strtol_l.constprop.0+0x72>
 800d14c:	f04f 32ff 	mov.w	r2, #4294967295
 800d150:	e7e1      	b.n	800d116 <_strtol_l.constprop.0+0x8a>
 800d152:	1c53      	adds	r3, r2, #1
 800d154:	d108      	bne.n	800d168 <_strtol_l.constprop.0+0xdc>
 800d156:	2322      	movs	r3, #34	@ 0x22
 800d158:	f8ce 3000 	str.w	r3, [lr]
 800d15c:	4660      	mov	r0, ip
 800d15e:	f1b8 0f00 	cmp.w	r8, #0
 800d162:	d0a0      	beq.n	800d0a6 <_strtol_l.constprop.0+0x1a>
 800d164:	1e69      	subs	r1, r5, #1
 800d166:	e006      	b.n	800d176 <_strtol_l.constprop.0+0xea>
 800d168:	b106      	cbz	r6, 800d16c <_strtol_l.constprop.0+0xe0>
 800d16a:	4240      	negs	r0, r0
 800d16c:	f1b8 0f00 	cmp.w	r8, #0
 800d170:	d099      	beq.n	800d0a6 <_strtol_l.constprop.0+0x1a>
 800d172:	2a00      	cmp	r2, #0
 800d174:	d1f6      	bne.n	800d164 <_strtol_l.constprop.0+0xd8>
 800d176:	f8c8 1000 	str.w	r1, [r8]
 800d17a:	e794      	b.n	800d0a6 <_strtol_l.constprop.0+0x1a>
 800d17c:	08011459 	.word	0x08011459

0800d180 <_strtol_r>:
 800d180:	f7ff bf84 	b.w	800d08c <_strtol_l.constprop.0>

0800d184 <strtol>:
 800d184:	4613      	mov	r3, r2
 800d186:	460a      	mov	r2, r1
 800d188:	4601      	mov	r1, r0
 800d18a:	4802      	ldr	r0, [pc, #8]	@ (800d194 <strtol+0x10>)
 800d18c:	6800      	ldr	r0, [r0, #0]
 800d18e:	f7ff bf7d 	b.w	800d08c <_strtol_l.constprop.0>
 800d192:	bf00      	nop
 800d194:	2000029c 	.word	0x2000029c

0800d198 <__cvt>:
 800d198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d19c:	ec57 6b10 	vmov	r6, r7, d0
 800d1a0:	2f00      	cmp	r7, #0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	463b      	mov	r3, r7
 800d1a8:	bfbb      	ittet	lt
 800d1aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d1ae:	461f      	movlt	r7, r3
 800d1b0:	2300      	movge	r3, #0
 800d1b2:	232d      	movlt	r3, #45	@ 0x2d
 800d1b4:	700b      	strb	r3, [r1, #0]
 800d1b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d1bc:	4691      	mov	r9, r2
 800d1be:	f023 0820 	bic.w	r8, r3, #32
 800d1c2:	bfbc      	itt	lt
 800d1c4:	4632      	movlt	r2, r6
 800d1c6:	4616      	movlt	r6, r2
 800d1c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d1cc:	d005      	beq.n	800d1da <__cvt+0x42>
 800d1ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d1d2:	d100      	bne.n	800d1d6 <__cvt+0x3e>
 800d1d4:	3401      	adds	r4, #1
 800d1d6:	2102      	movs	r1, #2
 800d1d8:	e000      	b.n	800d1dc <__cvt+0x44>
 800d1da:	2103      	movs	r1, #3
 800d1dc:	ab03      	add	r3, sp, #12
 800d1de:	9301      	str	r3, [sp, #4]
 800d1e0:	ab02      	add	r3, sp, #8
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	ec47 6b10 	vmov	d0, r6, r7
 800d1e8:	4653      	mov	r3, sl
 800d1ea:	4622      	mov	r2, r4
 800d1ec:	f001 f954 	bl	800e498 <_dtoa_r>
 800d1f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d1f4:	4605      	mov	r5, r0
 800d1f6:	d119      	bne.n	800d22c <__cvt+0x94>
 800d1f8:	f019 0f01 	tst.w	r9, #1
 800d1fc:	d00e      	beq.n	800d21c <__cvt+0x84>
 800d1fe:	eb00 0904 	add.w	r9, r0, r4
 800d202:	2200      	movs	r2, #0
 800d204:	2300      	movs	r3, #0
 800d206:	4630      	mov	r0, r6
 800d208:	4639      	mov	r1, r7
 800d20a:	f7f3 fc6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d20e:	b108      	cbz	r0, 800d214 <__cvt+0x7c>
 800d210:	f8cd 900c 	str.w	r9, [sp, #12]
 800d214:	2230      	movs	r2, #48	@ 0x30
 800d216:	9b03      	ldr	r3, [sp, #12]
 800d218:	454b      	cmp	r3, r9
 800d21a:	d31e      	bcc.n	800d25a <__cvt+0xc2>
 800d21c:	9b03      	ldr	r3, [sp, #12]
 800d21e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d220:	1b5b      	subs	r3, r3, r5
 800d222:	4628      	mov	r0, r5
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	b004      	add	sp, #16
 800d228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d230:	eb00 0904 	add.w	r9, r0, r4
 800d234:	d1e5      	bne.n	800d202 <__cvt+0x6a>
 800d236:	7803      	ldrb	r3, [r0, #0]
 800d238:	2b30      	cmp	r3, #48	@ 0x30
 800d23a:	d10a      	bne.n	800d252 <__cvt+0xba>
 800d23c:	2200      	movs	r2, #0
 800d23e:	2300      	movs	r3, #0
 800d240:	4630      	mov	r0, r6
 800d242:	4639      	mov	r1, r7
 800d244:	f7f3 fc50 	bl	8000ae8 <__aeabi_dcmpeq>
 800d248:	b918      	cbnz	r0, 800d252 <__cvt+0xba>
 800d24a:	f1c4 0401 	rsb	r4, r4, #1
 800d24e:	f8ca 4000 	str.w	r4, [sl]
 800d252:	f8da 3000 	ldr.w	r3, [sl]
 800d256:	4499      	add	r9, r3
 800d258:	e7d3      	b.n	800d202 <__cvt+0x6a>
 800d25a:	1c59      	adds	r1, r3, #1
 800d25c:	9103      	str	r1, [sp, #12]
 800d25e:	701a      	strb	r2, [r3, #0]
 800d260:	e7d9      	b.n	800d216 <__cvt+0x7e>

0800d262 <__exponent>:
 800d262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d264:	2900      	cmp	r1, #0
 800d266:	bfba      	itte	lt
 800d268:	4249      	neglt	r1, r1
 800d26a:	232d      	movlt	r3, #45	@ 0x2d
 800d26c:	232b      	movge	r3, #43	@ 0x2b
 800d26e:	2909      	cmp	r1, #9
 800d270:	7002      	strb	r2, [r0, #0]
 800d272:	7043      	strb	r3, [r0, #1]
 800d274:	dd29      	ble.n	800d2ca <__exponent+0x68>
 800d276:	f10d 0307 	add.w	r3, sp, #7
 800d27a:	461d      	mov	r5, r3
 800d27c:	270a      	movs	r7, #10
 800d27e:	461a      	mov	r2, r3
 800d280:	fbb1 f6f7 	udiv	r6, r1, r7
 800d284:	fb07 1416 	mls	r4, r7, r6, r1
 800d288:	3430      	adds	r4, #48	@ 0x30
 800d28a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d28e:	460c      	mov	r4, r1
 800d290:	2c63      	cmp	r4, #99	@ 0x63
 800d292:	f103 33ff 	add.w	r3, r3, #4294967295
 800d296:	4631      	mov	r1, r6
 800d298:	dcf1      	bgt.n	800d27e <__exponent+0x1c>
 800d29a:	3130      	adds	r1, #48	@ 0x30
 800d29c:	1e94      	subs	r4, r2, #2
 800d29e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d2a2:	1c41      	adds	r1, r0, #1
 800d2a4:	4623      	mov	r3, r4
 800d2a6:	42ab      	cmp	r3, r5
 800d2a8:	d30a      	bcc.n	800d2c0 <__exponent+0x5e>
 800d2aa:	f10d 0309 	add.w	r3, sp, #9
 800d2ae:	1a9b      	subs	r3, r3, r2
 800d2b0:	42ac      	cmp	r4, r5
 800d2b2:	bf88      	it	hi
 800d2b4:	2300      	movhi	r3, #0
 800d2b6:	3302      	adds	r3, #2
 800d2b8:	4403      	add	r3, r0
 800d2ba:	1a18      	subs	r0, r3, r0
 800d2bc:	b003      	add	sp, #12
 800d2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d2c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d2c8:	e7ed      	b.n	800d2a6 <__exponent+0x44>
 800d2ca:	2330      	movs	r3, #48	@ 0x30
 800d2cc:	3130      	adds	r1, #48	@ 0x30
 800d2ce:	7083      	strb	r3, [r0, #2]
 800d2d0:	70c1      	strb	r1, [r0, #3]
 800d2d2:	1d03      	adds	r3, r0, #4
 800d2d4:	e7f1      	b.n	800d2ba <__exponent+0x58>
	...

0800d2d8 <_printf_float>:
 800d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2dc:	b08d      	sub	sp, #52	@ 0x34
 800d2de:	460c      	mov	r4, r1
 800d2e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d2e4:	4616      	mov	r6, r2
 800d2e6:	461f      	mov	r7, r3
 800d2e8:	4605      	mov	r5, r0
 800d2ea:	f000 ff89 	bl	800e200 <_localeconv_r>
 800d2ee:	6803      	ldr	r3, [r0, #0]
 800d2f0:	9304      	str	r3, [sp, #16]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7f2 ffcc 	bl	8000290 <strlen>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d300:	9005      	str	r0, [sp, #20]
 800d302:	3307      	adds	r3, #7
 800d304:	f023 0307 	bic.w	r3, r3, #7
 800d308:	f103 0208 	add.w	r2, r3, #8
 800d30c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d310:	f8d4 b000 	ldr.w	fp, [r4]
 800d314:	f8c8 2000 	str.w	r2, [r8]
 800d318:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d31c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d320:	9307      	str	r3, [sp, #28]
 800d322:	f8cd 8018 	str.w	r8, [sp, #24]
 800d326:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d32a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d32e:	4b9c      	ldr	r3, [pc, #624]	@ (800d5a0 <_printf_float+0x2c8>)
 800d330:	f04f 32ff 	mov.w	r2, #4294967295
 800d334:	f7f3 fc0a 	bl	8000b4c <__aeabi_dcmpun>
 800d338:	bb70      	cbnz	r0, 800d398 <_printf_float+0xc0>
 800d33a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d33e:	4b98      	ldr	r3, [pc, #608]	@ (800d5a0 <_printf_float+0x2c8>)
 800d340:	f04f 32ff 	mov.w	r2, #4294967295
 800d344:	f7f3 fbe4 	bl	8000b10 <__aeabi_dcmple>
 800d348:	bb30      	cbnz	r0, 800d398 <_printf_float+0xc0>
 800d34a:	2200      	movs	r2, #0
 800d34c:	2300      	movs	r3, #0
 800d34e:	4640      	mov	r0, r8
 800d350:	4649      	mov	r1, r9
 800d352:	f7f3 fbd3 	bl	8000afc <__aeabi_dcmplt>
 800d356:	b110      	cbz	r0, 800d35e <_printf_float+0x86>
 800d358:	232d      	movs	r3, #45	@ 0x2d
 800d35a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d35e:	4a91      	ldr	r2, [pc, #580]	@ (800d5a4 <_printf_float+0x2cc>)
 800d360:	4b91      	ldr	r3, [pc, #580]	@ (800d5a8 <_printf_float+0x2d0>)
 800d362:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d366:	bf94      	ite	ls
 800d368:	4690      	movls	r8, r2
 800d36a:	4698      	movhi	r8, r3
 800d36c:	2303      	movs	r3, #3
 800d36e:	6123      	str	r3, [r4, #16]
 800d370:	f02b 0304 	bic.w	r3, fp, #4
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	f04f 0900 	mov.w	r9, #0
 800d37a:	9700      	str	r7, [sp, #0]
 800d37c:	4633      	mov	r3, r6
 800d37e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d380:	4621      	mov	r1, r4
 800d382:	4628      	mov	r0, r5
 800d384:	f000 f9d2 	bl	800d72c <_printf_common>
 800d388:	3001      	adds	r0, #1
 800d38a:	f040 808d 	bne.w	800d4a8 <_printf_float+0x1d0>
 800d38e:	f04f 30ff 	mov.w	r0, #4294967295
 800d392:	b00d      	add	sp, #52	@ 0x34
 800d394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d398:	4642      	mov	r2, r8
 800d39a:	464b      	mov	r3, r9
 800d39c:	4640      	mov	r0, r8
 800d39e:	4649      	mov	r1, r9
 800d3a0:	f7f3 fbd4 	bl	8000b4c <__aeabi_dcmpun>
 800d3a4:	b140      	cbz	r0, 800d3b8 <_printf_float+0xe0>
 800d3a6:	464b      	mov	r3, r9
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	bfbc      	itt	lt
 800d3ac:	232d      	movlt	r3, #45	@ 0x2d
 800d3ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d3b2:	4a7e      	ldr	r2, [pc, #504]	@ (800d5ac <_printf_float+0x2d4>)
 800d3b4:	4b7e      	ldr	r3, [pc, #504]	@ (800d5b0 <_printf_float+0x2d8>)
 800d3b6:	e7d4      	b.n	800d362 <_printf_float+0x8a>
 800d3b8:	6863      	ldr	r3, [r4, #4]
 800d3ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d3be:	9206      	str	r2, [sp, #24]
 800d3c0:	1c5a      	adds	r2, r3, #1
 800d3c2:	d13b      	bne.n	800d43c <_printf_float+0x164>
 800d3c4:	2306      	movs	r3, #6
 800d3c6:	6063      	str	r3, [r4, #4]
 800d3c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	6022      	str	r2, [r4, #0]
 800d3d0:	9303      	str	r3, [sp, #12]
 800d3d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800d3d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d3d8:	ab09      	add	r3, sp, #36	@ 0x24
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	6861      	ldr	r1, [r4, #4]
 800d3de:	ec49 8b10 	vmov	d0, r8, r9
 800d3e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	f7ff fed6 	bl	800d198 <__cvt>
 800d3ec:	9b06      	ldr	r3, [sp, #24]
 800d3ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3f0:	2b47      	cmp	r3, #71	@ 0x47
 800d3f2:	4680      	mov	r8, r0
 800d3f4:	d129      	bne.n	800d44a <_printf_float+0x172>
 800d3f6:	1cc8      	adds	r0, r1, #3
 800d3f8:	db02      	blt.n	800d400 <_printf_float+0x128>
 800d3fa:	6863      	ldr	r3, [r4, #4]
 800d3fc:	4299      	cmp	r1, r3
 800d3fe:	dd41      	ble.n	800d484 <_printf_float+0x1ac>
 800d400:	f1aa 0a02 	sub.w	sl, sl, #2
 800d404:	fa5f fa8a 	uxtb.w	sl, sl
 800d408:	3901      	subs	r1, #1
 800d40a:	4652      	mov	r2, sl
 800d40c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d410:	9109      	str	r1, [sp, #36]	@ 0x24
 800d412:	f7ff ff26 	bl	800d262 <__exponent>
 800d416:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d418:	1813      	adds	r3, r2, r0
 800d41a:	2a01      	cmp	r2, #1
 800d41c:	4681      	mov	r9, r0
 800d41e:	6123      	str	r3, [r4, #16]
 800d420:	dc02      	bgt.n	800d428 <_printf_float+0x150>
 800d422:	6822      	ldr	r2, [r4, #0]
 800d424:	07d2      	lsls	r2, r2, #31
 800d426:	d501      	bpl.n	800d42c <_printf_float+0x154>
 800d428:	3301      	adds	r3, #1
 800d42a:	6123      	str	r3, [r4, #16]
 800d42c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d430:	2b00      	cmp	r3, #0
 800d432:	d0a2      	beq.n	800d37a <_printf_float+0xa2>
 800d434:	232d      	movs	r3, #45	@ 0x2d
 800d436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d43a:	e79e      	b.n	800d37a <_printf_float+0xa2>
 800d43c:	9a06      	ldr	r2, [sp, #24]
 800d43e:	2a47      	cmp	r2, #71	@ 0x47
 800d440:	d1c2      	bne.n	800d3c8 <_printf_float+0xf0>
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1c0      	bne.n	800d3c8 <_printf_float+0xf0>
 800d446:	2301      	movs	r3, #1
 800d448:	e7bd      	b.n	800d3c6 <_printf_float+0xee>
 800d44a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d44e:	d9db      	bls.n	800d408 <_printf_float+0x130>
 800d450:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d454:	d118      	bne.n	800d488 <_printf_float+0x1b0>
 800d456:	2900      	cmp	r1, #0
 800d458:	6863      	ldr	r3, [r4, #4]
 800d45a:	dd0b      	ble.n	800d474 <_printf_float+0x19c>
 800d45c:	6121      	str	r1, [r4, #16]
 800d45e:	b913      	cbnz	r3, 800d466 <_printf_float+0x18e>
 800d460:	6822      	ldr	r2, [r4, #0]
 800d462:	07d0      	lsls	r0, r2, #31
 800d464:	d502      	bpl.n	800d46c <_printf_float+0x194>
 800d466:	3301      	adds	r3, #1
 800d468:	440b      	add	r3, r1
 800d46a:	6123      	str	r3, [r4, #16]
 800d46c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d46e:	f04f 0900 	mov.w	r9, #0
 800d472:	e7db      	b.n	800d42c <_printf_float+0x154>
 800d474:	b913      	cbnz	r3, 800d47c <_printf_float+0x1a4>
 800d476:	6822      	ldr	r2, [r4, #0]
 800d478:	07d2      	lsls	r2, r2, #31
 800d47a:	d501      	bpl.n	800d480 <_printf_float+0x1a8>
 800d47c:	3302      	adds	r3, #2
 800d47e:	e7f4      	b.n	800d46a <_printf_float+0x192>
 800d480:	2301      	movs	r3, #1
 800d482:	e7f2      	b.n	800d46a <_printf_float+0x192>
 800d484:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d48a:	4299      	cmp	r1, r3
 800d48c:	db05      	blt.n	800d49a <_printf_float+0x1c2>
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	6121      	str	r1, [r4, #16]
 800d492:	07d8      	lsls	r0, r3, #31
 800d494:	d5ea      	bpl.n	800d46c <_printf_float+0x194>
 800d496:	1c4b      	adds	r3, r1, #1
 800d498:	e7e7      	b.n	800d46a <_printf_float+0x192>
 800d49a:	2900      	cmp	r1, #0
 800d49c:	bfd4      	ite	le
 800d49e:	f1c1 0202 	rsble	r2, r1, #2
 800d4a2:	2201      	movgt	r2, #1
 800d4a4:	4413      	add	r3, r2
 800d4a6:	e7e0      	b.n	800d46a <_printf_float+0x192>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	055a      	lsls	r2, r3, #21
 800d4ac:	d407      	bmi.n	800d4be <_printf_float+0x1e6>
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	4642      	mov	r2, r8
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	47b8      	blx	r7
 800d4b8:	3001      	adds	r0, #1
 800d4ba:	d12b      	bne.n	800d514 <_printf_float+0x23c>
 800d4bc:	e767      	b.n	800d38e <_printf_float+0xb6>
 800d4be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d4c2:	f240 80dd 	bls.w	800d680 <_printf_float+0x3a8>
 800d4c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	f7f3 fb0b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d033      	beq.n	800d53e <_printf_float+0x266>
 800d4d6:	4a37      	ldr	r2, [pc, #220]	@ (800d5b4 <_printf_float+0x2dc>)
 800d4d8:	2301      	movs	r3, #1
 800d4da:	4631      	mov	r1, r6
 800d4dc:	4628      	mov	r0, r5
 800d4de:	47b8      	blx	r7
 800d4e0:	3001      	adds	r0, #1
 800d4e2:	f43f af54 	beq.w	800d38e <_printf_float+0xb6>
 800d4e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d4ea:	4543      	cmp	r3, r8
 800d4ec:	db02      	blt.n	800d4f4 <_printf_float+0x21c>
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	07d8      	lsls	r0, r3, #31
 800d4f2:	d50f      	bpl.n	800d514 <_printf_float+0x23c>
 800d4f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4f8:	4631      	mov	r1, r6
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	47b8      	blx	r7
 800d4fe:	3001      	adds	r0, #1
 800d500:	f43f af45 	beq.w	800d38e <_printf_float+0xb6>
 800d504:	f04f 0900 	mov.w	r9, #0
 800d508:	f108 38ff 	add.w	r8, r8, #4294967295
 800d50c:	f104 0a1a 	add.w	sl, r4, #26
 800d510:	45c8      	cmp	r8, r9
 800d512:	dc09      	bgt.n	800d528 <_printf_float+0x250>
 800d514:	6823      	ldr	r3, [r4, #0]
 800d516:	079b      	lsls	r3, r3, #30
 800d518:	f100 8103 	bmi.w	800d722 <_printf_float+0x44a>
 800d51c:	68e0      	ldr	r0, [r4, #12]
 800d51e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d520:	4298      	cmp	r0, r3
 800d522:	bfb8      	it	lt
 800d524:	4618      	movlt	r0, r3
 800d526:	e734      	b.n	800d392 <_printf_float+0xba>
 800d528:	2301      	movs	r3, #1
 800d52a:	4652      	mov	r2, sl
 800d52c:	4631      	mov	r1, r6
 800d52e:	4628      	mov	r0, r5
 800d530:	47b8      	blx	r7
 800d532:	3001      	adds	r0, #1
 800d534:	f43f af2b 	beq.w	800d38e <_printf_float+0xb6>
 800d538:	f109 0901 	add.w	r9, r9, #1
 800d53c:	e7e8      	b.n	800d510 <_printf_float+0x238>
 800d53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d540:	2b00      	cmp	r3, #0
 800d542:	dc39      	bgt.n	800d5b8 <_printf_float+0x2e0>
 800d544:	4a1b      	ldr	r2, [pc, #108]	@ (800d5b4 <_printf_float+0x2dc>)
 800d546:	2301      	movs	r3, #1
 800d548:	4631      	mov	r1, r6
 800d54a:	4628      	mov	r0, r5
 800d54c:	47b8      	blx	r7
 800d54e:	3001      	adds	r0, #1
 800d550:	f43f af1d 	beq.w	800d38e <_printf_float+0xb6>
 800d554:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d558:	ea59 0303 	orrs.w	r3, r9, r3
 800d55c:	d102      	bne.n	800d564 <_printf_float+0x28c>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	07d9      	lsls	r1, r3, #31
 800d562:	d5d7      	bpl.n	800d514 <_printf_float+0x23c>
 800d564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d568:	4631      	mov	r1, r6
 800d56a:	4628      	mov	r0, r5
 800d56c:	47b8      	blx	r7
 800d56e:	3001      	adds	r0, #1
 800d570:	f43f af0d 	beq.w	800d38e <_printf_float+0xb6>
 800d574:	f04f 0a00 	mov.w	sl, #0
 800d578:	f104 0b1a 	add.w	fp, r4, #26
 800d57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d57e:	425b      	negs	r3, r3
 800d580:	4553      	cmp	r3, sl
 800d582:	dc01      	bgt.n	800d588 <_printf_float+0x2b0>
 800d584:	464b      	mov	r3, r9
 800d586:	e793      	b.n	800d4b0 <_printf_float+0x1d8>
 800d588:	2301      	movs	r3, #1
 800d58a:	465a      	mov	r2, fp
 800d58c:	4631      	mov	r1, r6
 800d58e:	4628      	mov	r0, r5
 800d590:	47b8      	blx	r7
 800d592:	3001      	adds	r0, #1
 800d594:	f43f aefb 	beq.w	800d38e <_printf_float+0xb6>
 800d598:	f10a 0a01 	add.w	sl, sl, #1
 800d59c:	e7ee      	b.n	800d57c <_printf_float+0x2a4>
 800d59e:	bf00      	nop
 800d5a0:	7fefffff 	.word	0x7fefffff
 800d5a4:	08011559 	.word	0x08011559
 800d5a8:	0801155d 	.word	0x0801155d
 800d5ac:	08011561 	.word	0x08011561
 800d5b0:	08011565 	.word	0x08011565
 800d5b4:	08011897 	.word	0x08011897
 800d5b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d5ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d5be:	4553      	cmp	r3, sl
 800d5c0:	bfa8      	it	ge
 800d5c2:	4653      	movge	r3, sl
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	4699      	mov	r9, r3
 800d5c8:	dc36      	bgt.n	800d638 <_printf_float+0x360>
 800d5ca:	f04f 0b00 	mov.w	fp, #0
 800d5ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5d2:	f104 021a 	add.w	r2, r4, #26
 800d5d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d5d8:	9306      	str	r3, [sp, #24]
 800d5da:	eba3 0309 	sub.w	r3, r3, r9
 800d5de:	455b      	cmp	r3, fp
 800d5e0:	dc31      	bgt.n	800d646 <_printf_float+0x36e>
 800d5e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5e4:	459a      	cmp	sl, r3
 800d5e6:	dc3a      	bgt.n	800d65e <_printf_float+0x386>
 800d5e8:	6823      	ldr	r3, [r4, #0]
 800d5ea:	07da      	lsls	r2, r3, #31
 800d5ec:	d437      	bmi.n	800d65e <_printf_float+0x386>
 800d5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5f0:	ebaa 0903 	sub.w	r9, sl, r3
 800d5f4:	9b06      	ldr	r3, [sp, #24]
 800d5f6:	ebaa 0303 	sub.w	r3, sl, r3
 800d5fa:	4599      	cmp	r9, r3
 800d5fc:	bfa8      	it	ge
 800d5fe:	4699      	movge	r9, r3
 800d600:	f1b9 0f00 	cmp.w	r9, #0
 800d604:	dc33      	bgt.n	800d66e <_printf_float+0x396>
 800d606:	f04f 0800 	mov.w	r8, #0
 800d60a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d60e:	f104 0b1a 	add.w	fp, r4, #26
 800d612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d614:	ebaa 0303 	sub.w	r3, sl, r3
 800d618:	eba3 0309 	sub.w	r3, r3, r9
 800d61c:	4543      	cmp	r3, r8
 800d61e:	f77f af79 	ble.w	800d514 <_printf_float+0x23c>
 800d622:	2301      	movs	r3, #1
 800d624:	465a      	mov	r2, fp
 800d626:	4631      	mov	r1, r6
 800d628:	4628      	mov	r0, r5
 800d62a:	47b8      	blx	r7
 800d62c:	3001      	adds	r0, #1
 800d62e:	f43f aeae 	beq.w	800d38e <_printf_float+0xb6>
 800d632:	f108 0801 	add.w	r8, r8, #1
 800d636:	e7ec      	b.n	800d612 <_printf_float+0x33a>
 800d638:	4642      	mov	r2, r8
 800d63a:	4631      	mov	r1, r6
 800d63c:	4628      	mov	r0, r5
 800d63e:	47b8      	blx	r7
 800d640:	3001      	adds	r0, #1
 800d642:	d1c2      	bne.n	800d5ca <_printf_float+0x2f2>
 800d644:	e6a3      	b.n	800d38e <_printf_float+0xb6>
 800d646:	2301      	movs	r3, #1
 800d648:	4631      	mov	r1, r6
 800d64a:	4628      	mov	r0, r5
 800d64c:	9206      	str	r2, [sp, #24]
 800d64e:	47b8      	blx	r7
 800d650:	3001      	adds	r0, #1
 800d652:	f43f ae9c 	beq.w	800d38e <_printf_float+0xb6>
 800d656:	9a06      	ldr	r2, [sp, #24]
 800d658:	f10b 0b01 	add.w	fp, fp, #1
 800d65c:	e7bb      	b.n	800d5d6 <_printf_float+0x2fe>
 800d65e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d662:	4631      	mov	r1, r6
 800d664:	4628      	mov	r0, r5
 800d666:	47b8      	blx	r7
 800d668:	3001      	adds	r0, #1
 800d66a:	d1c0      	bne.n	800d5ee <_printf_float+0x316>
 800d66c:	e68f      	b.n	800d38e <_printf_float+0xb6>
 800d66e:	9a06      	ldr	r2, [sp, #24]
 800d670:	464b      	mov	r3, r9
 800d672:	4442      	add	r2, r8
 800d674:	4631      	mov	r1, r6
 800d676:	4628      	mov	r0, r5
 800d678:	47b8      	blx	r7
 800d67a:	3001      	adds	r0, #1
 800d67c:	d1c3      	bne.n	800d606 <_printf_float+0x32e>
 800d67e:	e686      	b.n	800d38e <_printf_float+0xb6>
 800d680:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d684:	f1ba 0f01 	cmp.w	sl, #1
 800d688:	dc01      	bgt.n	800d68e <_printf_float+0x3b6>
 800d68a:	07db      	lsls	r3, r3, #31
 800d68c:	d536      	bpl.n	800d6fc <_printf_float+0x424>
 800d68e:	2301      	movs	r3, #1
 800d690:	4642      	mov	r2, r8
 800d692:	4631      	mov	r1, r6
 800d694:	4628      	mov	r0, r5
 800d696:	47b8      	blx	r7
 800d698:	3001      	adds	r0, #1
 800d69a:	f43f ae78 	beq.w	800d38e <_printf_float+0xb6>
 800d69e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6a2:	4631      	mov	r1, r6
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	47b8      	blx	r7
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	f43f ae70 	beq.w	800d38e <_printf_float+0xb6>
 800d6ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6ba:	f7f3 fa15 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6be:	b9c0      	cbnz	r0, 800d6f2 <_printf_float+0x41a>
 800d6c0:	4653      	mov	r3, sl
 800d6c2:	f108 0201 	add.w	r2, r8, #1
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	47b8      	blx	r7
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d10c      	bne.n	800d6ea <_printf_float+0x412>
 800d6d0:	e65d      	b.n	800d38e <_printf_float+0xb6>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	465a      	mov	r2, fp
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	4628      	mov	r0, r5
 800d6da:	47b8      	blx	r7
 800d6dc:	3001      	adds	r0, #1
 800d6de:	f43f ae56 	beq.w	800d38e <_printf_float+0xb6>
 800d6e2:	f108 0801 	add.w	r8, r8, #1
 800d6e6:	45d0      	cmp	r8, sl
 800d6e8:	dbf3      	blt.n	800d6d2 <_printf_float+0x3fa>
 800d6ea:	464b      	mov	r3, r9
 800d6ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d6f0:	e6df      	b.n	800d4b2 <_printf_float+0x1da>
 800d6f2:	f04f 0800 	mov.w	r8, #0
 800d6f6:	f104 0b1a 	add.w	fp, r4, #26
 800d6fa:	e7f4      	b.n	800d6e6 <_printf_float+0x40e>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	4642      	mov	r2, r8
 800d700:	e7e1      	b.n	800d6c6 <_printf_float+0x3ee>
 800d702:	2301      	movs	r3, #1
 800d704:	464a      	mov	r2, r9
 800d706:	4631      	mov	r1, r6
 800d708:	4628      	mov	r0, r5
 800d70a:	47b8      	blx	r7
 800d70c:	3001      	adds	r0, #1
 800d70e:	f43f ae3e 	beq.w	800d38e <_printf_float+0xb6>
 800d712:	f108 0801 	add.w	r8, r8, #1
 800d716:	68e3      	ldr	r3, [r4, #12]
 800d718:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d71a:	1a5b      	subs	r3, r3, r1
 800d71c:	4543      	cmp	r3, r8
 800d71e:	dcf0      	bgt.n	800d702 <_printf_float+0x42a>
 800d720:	e6fc      	b.n	800d51c <_printf_float+0x244>
 800d722:	f04f 0800 	mov.w	r8, #0
 800d726:	f104 0919 	add.w	r9, r4, #25
 800d72a:	e7f4      	b.n	800d716 <_printf_float+0x43e>

0800d72c <_printf_common>:
 800d72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d730:	4616      	mov	r6, r2
 800d732:	4698      	mov	r8, r3
 800d734:	688a      	ldr	r2, [r1, #8]
 800d736:	690b      	ldr	r3, [r1, #16]
 800d738:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d73c:	4293      	cmp	r3, r2
 800d73e:	bfb8      	it	lt
 800d740:	4613      	movlt	r3, r2
 800d742:	6033      	str	r3, [r6, #0]
 800d744:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d748:	4607      	mov	r7, r0
 800d74a:	460c      	mov	r4, r1
 800d74c:	b10a      	cbz	r2, 800d752 <_printf_common+0x26>
 800d74e:	3301      	adds	r3, #1
 800d750:	6033      	str	r3, [r6, #0]
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	0699      	lsls	r1, r3, #26
 800d756:	bf42      	ittt	mi
 800d758:	6833      	ldrmi	r3, [r6, #0]
 800d75a:	3302      	addmi	r3, #2
 800d75c:	6033      	strmi	r3, [r6, #0]
 800d75e:	6825      	ldr	r5, [r4, #0]
 800d760:	f015 0506 	ands.w	r5, r5, #6
 800d764:	d106      	bne.n	800d774 <_printf_common+0x48>
 800d766:	f104 0a19 	add.w	sl, r4, #25
 800d76a:	68e3      	ldr	r3, [r4, #12]
 800d76c:	6832      	ldr	r2, [r6, #0]
 800d76e:	1a9b      	subs	r3, r3, r2
 800d770:	42ab      	cmp	r3, r5
 800d772:	dc26      	bgt.n	800d7c2 <_printf_common+0x96>
 800d774:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d778:	6822      	ldr	r2, [r4, #0]
 800d77a:	3b00      	subs	r3, #0
 800d77c:	bf18      	it	ne
 800d77e:	2301      	movne	r3, #1
 800d780:	0692      	lsls	r2, r2, #26
 800d782:	d42b      	bmi.n	800d7dc <_printf_common+0xb0>
 800d784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d788:	4641      	mov	r1, r8
 800d78a:	4638      	mov	r0, r7
 800d78c:	47c8      	blx	r9
 800d78e:	3001      	adds	r0, #1
 800d790:	d01e      	beq.n	800d7d0 <_printf_common+0xa4>
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	6922      	ldr	r2, [r4, #16]
 800d796:	f003 0306 	and.w	r3, r3, #6
 800d79a:	2b04      	cmp	r3, #4
 800d79c:	bf02      	ittt	eq
 800d79e:	68e5      	ldreq	r5, [r4, #12]
 800d7a0:	6833      	ldreq	r3, [r6, #0]
 800d7a2:	1aed      	subeq	r5, r5, r3
 800d7a4:	68a3      	ldr	r3, [r4, #8]
 800d7a6:	bf0c      	ite	eq
 800d7a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7ac:	2500      	movne	r5, #0
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	bfc4      	itt	gt
 800d7b2:	1a9b      	subgt	r3, r3, r2
 800d7b4:	18ed      	addgt	r5, r5, r3
 800d7b6:	2600      	movs	r6, #0
 800d7b8:	341a      	adds	r4, #26
 800d7ba:	42b5      	cmp	r5, r6
 800d7bc:	d11a      	bne.n	800d7f4 <_printf_common+0xc8>
 800d7be:	2000      	movs	r0, #0
 800d7c0:	e008      	b.n	800d7d4 <_printf_common+0xa8>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	4652      	mov	r2, sl
 800d7c6:	4641      	mov	r1, r8
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	47c8      	blx	r9
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	d103      	bne.n	800d7d8 <_printf_common+0xac>
 800d7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7d8:	3501      	adds	r5, #1
 800d7da:	e7c6      	b.n	800d76a <_printf_common+0x3e>
 800d7dc:	18e1      	adds	r1, r4, r3
 800d7de:	1c5a      	adds	r2, r3, #1
 800d7e0:	2030      	movs	r0, #48	@ 0x30
 800d7e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d7e6:	4422      	add	r2, r4
 800d7e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d7ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d7f0:	3302      	adds	r3, #2
 800d7f2:	e7c7      	b.n	800d784 <_printf_common+0x58>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	4622      	mov	r2, r4
 800d7f8:	4641      	mov	r1, r8
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	47c8      	blx	r9
 800d7fe:	3001      	adds	r0, #1
 800d800:	d0e6      	beq.n	800d7d0 <_printf_common+0xa4>
 800d802:	3601      	adds	r6, #1
 800d804:	e7d9      	b.n	800d7ba <_printf_common+0x8e>
	...

0800d808 <_printf_i>:
 800d808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d80c:	7e0f      	ldrb	r7, [r1, #24]
 800d80e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d810:	2f78      	cmp	r7, #120	@ 0x78
 800d812:	4691      	mov	r9, r2
 800d814:	4680      	mov	r8, r0
 800d816:	460c      	mov	r4, r1
 800d818:	469a      	mov	sl, r3
 800d81a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d81e:	d807      	bhi.n	800d830 <_printf_i+0x28>
 800d820:	2f62      	cmp	r7, #98	@ 0x62
 800d822:	d80a      	bhi.n	800d83a <_printf_i+0x32>
 800d824:	2f00      	cmp	r7, #0
 800d826:	f000 80d2 	beq.w	800d9ce <_printf_i+0x1c6>
 800d82a:	2f58      	cmp	r7, #88	@ 0x58
 800d82c:	f000 80b9 	beq.w	800d9a2 <_printf_i+0x19a>
 800d830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d834:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d838:	e03a      	b.n	800d8b0 <_printf_i+0xa8>
 800d83a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d83e:	2b15      	cmp	r3, #21
 800d840:	d8f6      	bhi.n	800d830 <_printf_i+0x28>
 800d842:	a101      	add	r1, pc, #4	@ (adr r1, 800d848 <_printf_i+0x40>)
 800d844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d848:	0800d8a1 	.word	0x0800d8a1
 800d84c:	0800d8b5 	.word	0x0800d8b5
 800d850:	0800d831 	.word	0x0800d831
 800d854:	0800d831 	.word	0x0800d831
 800d858:	0800d831 	.word	0x0800d831
 800d85c:	0800d831 	.word	0x0800d831
 800d860:	0800d8b5 	.word	0x0800d8b5
 800d864:	0800d831 	.word	0x0800d831
 800d868:	0800d831 	.word	0x0800d831
 800d86c:	0800d831 	.word	0x0800d831
 800d870:	0800d831 	.word	0x0800d831
 800d874:	0800d9b5 	.word	0x0800d9b5
 800d878:	0800d8df 	.word	0x0800d8df
 800d87c:	0800d96f 	.word	0x0800d96f
 800d880:	0800d831 	.word	0x0800d831
 800d884:	0800d831 	.word	0x0800d831
 800d888:	0800d9d7 	.word	0x0800d9d7
 800d88c:	0800d831 	.word	0x0800d831
 800d890:	0800d8df 	.word	0x0800d8df
 800d894:	0800d831 	.word	0x0800d831
 800d898:	0800d831 	.word	0x0800d831
 800d89c:	0800d977 	.word	0x0800d977
 800d8a0:	6833      	ldr	r3, [r6, #0]
 800d8a2:	1d1a      	adds	r2, r3, #4
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	6032      	str	r2, [r6, #0]
 800d8a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e09d      	b.n	800d9f0 <_printf_i+0x1e8>
 800d8b4:	6833      	ldr	r3, [r6, #0]
 800d8b6:	6820      	ldr	r0, [r4, #0]
 800d8b8:	1d19      	adds	r1, r3, #4
 800d8ba:	6031      	str	r1, [r6, #0]
 800d8bc:	0606      	lsls	r6, r0, #24
 800d8be:	d501      	bpl.n	800d8c4 <_printf_i+0xbc>
 800d8c0:	681d      	ldr	r5, [r3, #0]
 800d8c2:	e003      	b.n	800d8cc <_printf_i+0xc4>
 800d8c4:	0645      	lsls	r5, r0, #25
 800d8c6:	d5fb      	bpl.n	800d8c0 <_printf_i+0xb8>
 800d8c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d8cc:	2d00      	cmp	r5, #0
 800d8ce:	da03      	bge.n	800d8d8 <_printf_i+0xd0>
 800d8d0:	232d      	movs	r3, #45	@ 0x2d
 800d8d2:	426d      	negs	r5, r5
 800d8d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8d8:	4859      	ldr	r0, [pc, #356]	@ (800da40 <_printf_i+0x238>)
 800d8da:	230a      	movs	r3, #10
 800d8dc:	e011      	b.n	800d902 <_printf_i+0xfa>
 800d8de:	6821      	ldr	r1, [r4, #0]
 800d8e0:	6833      	ldr	r3, [r6, #0]
 800d8e2:	0608      	lsls	r0, r1, #24
 800d8e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d8e8:	d402      	bmi.n	800d8f0 <_printf_i+0xe8>
 800d8ea:	0649      	lsls	r1, r1, #25
 800d8ec:	bf48      	it	mi
 800d8ee:	b2ad      	uxthmi	r5, r5
 800d8f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d8f2:	4853      	ldr	r0, [pc, #332]	@ (800da40 <_printf_i+0x238>)
 800d8f4:	6033      	str	r3, [r6, #0]
 800d8f6:	bf14      	ite	ne
 800d8f8:	230a      	movne	r3, #10
 800d8fa:	2308      	moveq	r3, #8
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d902:	6866      	ldr	r6, [r4, #4]
 800d904:	60a6      	str	r6, [r4, #8]
 800d906:	2e00      	cmp	r6, #0
 800d908:	bfa2      	ittt	ge
 800d90a:	6821      	ldrge	r1, [r4, #0]
 800d90c:	f021 0104 	bicge.w	r1, r1, #4
 800d910:	6021      	strge	r1, [r4, #0]
 800d912:	b90d      	cbnz	r5, 800d918 <_printf_i+0x110>
 800d914:	2e00      	cmp	r6, #0
 800d916:	d04b      	beq.n	800d9b0 <_printf_i+0x1a8>
 800d918:	4616      	mov	r6, r2
 800d91a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d91e:	fb03 5711 	mls	r7, r3, r1, r5
 800d922:	5dc7      	ldrb	r7, [r0, r7]
 800d924:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d928:	462f      	mov	r7, r5
 800d92a:	42bb      	cmp	r3, r7
 800d92c:	460d      	mov	r5, r1
 800d92e:	d9f4      	bls.n	800d91a <_printf_i+0x112>
 800d930:	2b08      	cmp	r3, #8
 800d932:	d10b      	bne.n	800d94c <_printf_i+0x144>
 800d934:	6823      	ldr	r3, [r4, #0]
 800d936:	07df      	lsls	r7, r3, #31
 800d938:	d508      	bpl.n	800d94c <_printf_i+0x144>
 800d93a:	6923      	ldr	r3, [r4, #16]
 800d93c:	6861      	ldr	r1, [r4, #4]
 800d93e:	4299      	cmp	r1, r3
 800d940:	bfde      	ittt	le
 800d942:	2330      	movle	r3, #48	@ 0x30
 800d944:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d948:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d94c:	1b92      	subs	r2, r2, r6
 800d94e:	6122      	str	r2, [r4, #16]
 800d950:	f8cd a000 	str.w	sl, [sp]
 800d954:	464b      	mov	r3, r9
 800d956:	aa03      	add	r2, sp, #12
 800d958:	4621      	mov	r1, r4
 800d95a:	4640      	mov	r0, r8
 800d95c:	f7ff fee6 	bl	800d72c <_printf_common>
 800d960:	3001      	adds	r0, #1
 800d962:	d14a      	bne.n	800d9fa <_printf_i+0x1f2>
 800d964:	f04f 30ff 	mov.w	r0, #4294967295
 800d968:	b004      	add	sp, #16
 800d96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	f043 0320 	orr.w	r3, r3, #32
 800d974:	6023      	str	r3, [r4, #0]
 800d976:	4833      	ldr	r0, [pc, #204]	@ (800da44 <_printf_i+0x23c>)
 800d978:	2778      	movs	r7, #120	@ 0x78
 800d97a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d97e:	6823      	ldr	r3, [r4, #0]
 800d980:	6831      	ldr	r1, [r6, #0]
 800d982:	061f      	lsls	r7, r3, #24
 800d984:	f851 5b04 	ldr.w	r5, [r1], #4
 800d988:	d402      	bmi.n	800d990 <_printf_i+0x188>
 800d98a:	065f      	lsls	r7, r3, #25
 800d98c:	bf48      	it	mi
 800d98e:	b2ad      	uxthmi	r5, r5
 800d990:	6031      	str	r1, [r6, #0]
 800d992:	07d9      	lsls	r1, r3, #31
 800d994:	bf44      	itt	mi
 800d996:	f043 0320 	orrmi.w	r3, r3, #32
 800d99a:	6023      	strmi	r3, [r4, #0]
 800d99c:	b11d      	cbz	r5, 800d9a6 <_printf_i+0x19e>
 800d99e:	2310      	movs	r3, #16
 800d9a0:	e7ac      	b.n	800d8fc <_printf_i+0xf4>
 800d9a2:	4827      	ldr	r0, [pc, #156]	@ (800da40 <_printf_i+0x238>)
 800d9a4:	e7e9      	b.n	800d97a <_printf_i+0x172>
 800d9a6:	6823      	ldr	r3, [r4, #0]
 800d9a8:	f023 0320 	bic.w	r3, r3, #32
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	e7f6      	b.n	800d99e <_printf_i+0x196>
 800d9b0:	4616      	mov	r6, r2
 800d9b2:	e7bd      	b.n	800d930 <_printf_i+0x128>
 800d9b4:	6833      	ldr	r3, [r6, #0]
 800d9b6:	6825      	ldr	r5, [r4, #0]
 800d9b8:	6961      	ldr	r1, [r4, #20]
 800d9ba:	1d18      	adds	r0, r3, #4
 800d9bc:	6030      	str	r0, [r6, #0]
 800d9be:	062e      	lsls	r6, r5, #24
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	d501      	bpl.n	800d9c8 <_printf_i+0x1c0>
 800d9c4:	6019      	str	r1, [r3, #0]
 800d9c6:	e002      	b.n	800d9ce <_printf_i+0x1c6>
 800d9c8:	0668      	lsls	r0, r5, #25
 800d9ca:	d5fb      	bpl.n	800d9c4 <_printf_i+0x1bc>
 800d9cc:	8019      	strh	r1, [r3, #0]
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	6123      	str	r3, [r4, #16]
 800d9d2:	4616      	mov	r6, r2
 800d9d4:	e7bc      	b.n	800d950 <_printf_i+0x148>
 800d9d6:	6833      	ldr	r3, [r6, #0]
 800d9d8:	1d1a      	adds	r2, r3, #4
 800d9da:	6032      	str	r2, [r6, #0]
 800d9dc:	681e      	ldr	r6, [r3, #0]
 800d9de:	6862      	ldr	r2, [r4, #4]
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	f7f2 fc04 	bl	80001f0 <memchr>
 800d9e8:	b108      	cbz	r0, 800d9ee <_printf_i+0x1e6>
 800d9ea:	1b80      	subs	r0, r0, r6
 800d9ec:	6060      	str	r0, [r4, #4]
 800d9ee:	6863      	ldr	r3, [r4, #4]
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9f8:	e7aa      	b.n	800d950 <_printf_i+0x148>
 800d9fa:	6923      	ldr	r3, [r4, #16]
 800d9fc:	4632      	mov	r2, r6
 800d9fe:	4649      	mov	r1, r9
 800da00:	4640      	mov	r0, r8
 800da02:	47d0      	blx	sl
 800da04:	3001      	adds	r0, #1
 800da06:	d0ad      	beq.n	800d964 <_printf_i+0x15c>
 800da08:	6823      	ldr	r3, [r4, #0]
 800da0a:	079b      	lsls	r3, r3, #30
 800da0c:	d413      	bmi.n	800da36 <_printf_i+0x22e>
 800da0e:	68e0      	ldr	r0, [r4, #12]
 800da10:	9b03      	ldr	r3, [sp, #12]
 800da12:	4298      	cmp	r0, r3
 800da14:	bfb8      	it	lt
 800da16:	4618      	movlt	r0, r3
 800da18:	e7a6      	b.n	800d968 <_printf_i+0x160>
 800da1a:	2301      	movs	r3, #1
 800da1c:	4632      	mov	r2, r6
 800da1e:	4649      	mov	r1, r9
 800da20:	4640      	mov	r0, r8
 800da22:	47d0      	blx	sl
 800da24:	3001      	adds	r0, #1
 800da26:	d09d      	beq.n	800d964 <_printf_i+0x15c>
 800da28:	3501      	adds	r5, #1
 800da2a:	68e3      	ldr	r3, [r4, #12]
 800da2c:	9903      	ldr	r1, [sp, #12]
 800da2e:	1a5b      	subs	r3, r3, r1
 800da30:	42ab      	cmp	r3, r5
 800da32:	dcf2      	bgt.n	800da1a <_printf_i+0x212>
 800da34:	e7eb      	b.n	800da0e <_printf_i+0x206>
 800da36:	2500      	movs	r5, #0
 800da38:	f104 0619 	add.w	r6, r4, #25
 800da3c:	e7f5      	b.n	800da2a <_printf_i+0x222>
 800da3e:	bf00      	nop
 800da40:	08011569 	.word	0x08011569
 800da44:	0801157a 	.word	0x0801157a

0800da48 <_scanf_float>:
 800da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4c:	b087      	sub	sp, #28
 800da4e:	4617      	mov	r7, r2
 800da50:	9303      	str	r3, [sp, #12]
 800da52:	688b      	ldr	r3, [r1, #8]
 800da54:	1e5a      	subs	r2, r3, #1
 800da56:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800da5a:	bf81      	itttt	hi
 800da5c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800da60:	eb03 0b05 	addhi.w	fp, r3, r5
 800da64:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800da68:	608b      	strhi	r3, [r1, #8]
 800da6a:	680b      	ldr	r3, [r1, #0]
 800da6c:	460a      	mov	r2, r1
 800da6e:	f04f 0500 	mov.w	r5, #0
 800da72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800da76:	f842 3b1c 	str.w	r3, [r2], #28
 800da7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800da7e:	4680      	mov	r8, r0
 800da80:	460c      	mov	r4, r1
 800da82:	bf98      	it	ls
 800da84:	f04f 0b00 	movls.w	fp, #0
 800da88:	9201      	str	r2, [sp, #4]
 800da8a:	4616      	mov	r6, r2
 800da8c:	46aa      	mov	sl, r5
 800da8e:	46a9      	mov	r9, r5
 800da90:	9502      	str	r5, [sp, #8]
 800da92:	68a2      	ldr	r2, [r4, #8]
 800da94:	b152      	cbz	r2, 800daac <_scanf_float+0x64>
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	2b4e      	cmp	r3, #78	@ 0x4e
 800da9c:	d864      	bhi.n	800db68 <_scanf_float+0x120>
 800da9e:	2b40      	cmp	r3, #64	@ 0x40
 800daa0:	d83c      	bhi.n	800db1c <_scanf_float+0xd4>
 800daa2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800daa6:	b2c8      	uxtb	r0, r1
 800daa8:	280e      	cmp	r0, #14
 800daaa:	d93a      	bls.n	800db22 <_scanf_float+0xda>
 800daac:	f1b9 0f00 	cmp.w	r9, #0
 800dab0:	d003      	beq.n	800daba <_scanf_float+0x72>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dabe:	f1ba 0f01 	cmp.w	sl, #1
 800dac2:	f200 8117 	bhi.w	800dcf4 <_scanf_float+0x2ac>
 800dac6:	9b01      	ldr	r3, [sp, #4]
 800dac8:	429e      	cmp	r6, r3
 800daca:	f200 8108 	bhi.w	800dcde <_scanf_float+0x296>
 800dace:	2001      	movs	r0, #1
 800dad0:	b007      	add	sp, #28
 800dad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dada:	2a0d      	cmp	r2, #13
 800dadc:	d8e6      	bhi.n	800daac <_scanf_float+0x64>
 800dade:	a101      	add	r1, pc, #4	@ (adr r1, 800dae4 <_scanf_float+0x9c>)
 800dae0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dae4:	0800dc2b 	.word	0x0800dc2b
 800dae8:	0800daad 	.word	0x0800daad
 800daec:	0800daad 	.word	0x0800daad
 800daf0:	0800daad 	.word	0x0800daad
 800daf4:	0800dc8b 	.word	0x0800dc8b
 800daf8:	0800dc63 	.word	0x0800dc63
 800dafc:	0800daad 	.word	0x0800daad
 800db00:	0800daad 	.word	0x0800daad
 800db04:	0800dc39 	.word	0x0800dc39
 800db08:	0800daad 	.word	0x0800daad
 800db0c:	0800daad 	.word	0x0800daad
 800db10:	0800daad 	.word	0x0800daad
 800db14:	0800daad 	.word	0x0800daad
 800db18:	0800dbf1 	.word	0x0800dbf1
 800db1c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800db20:	e7db      	b.n	800dada <_scanf_float+0x92>
 800db22:	290e      	cmp	r1, #14
 800db24:	d8c2      	bhi.n	800daac <_scanf_float+0x64>
 800db26:	a001      	add	r0, pc, #4	@ (adr r0, 800db2c <_scanf_float+0xe4>)
 800db28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800db2c:	0800dbe1 	.word	0x0800dbe1
 800db30:	0800daad 	.word	0x0800daad
 800db34:	0800dbe1 	.word	0x0800dbe1
 800db38:	0800dc77 	.word	0x0800dc77
 800db3c:	0800daad 	.word	0x0800daad
 800db40:	0800db89 	.word	0x0800db89
 800db44:	0800dbc7 	.word	0x0800dbc7
 800db48:	0800dbc7 	.word	0x0800dbc7
 800db4c:	0800dbc7 	.word	0x0800dbc7
 800db50:	0800dbc7 	.word	0x0800dbc7
 800db54:	0800dbc7 	.word	0x0800dbc7
 800db58:	0800dbc7 	.word	0x0800dbc7
 800db5c:	0800dbc7 	.word	0x0800dbc7
 800db60:	0800dbc7 	.word	0x0800dbc7
 800db64:	0800dbc7 	.word	0x0800dbc7
 800db68:	2b6e      	cmp	r3, #110	@ 0x6e
 800db6a:	d809      	bhi.n	800db80 <_scanf_float+0x138>
 800db6c:	2b60      	cmp	r3, #96	@ 0x60
 800db6e:	d8b2      	bhi.n	800dad6 <_scanf_float+0x8e>
 800db70:	2b54      	cmp	r3, #84	@ 0x54
 800db72:	d07b      	beq.n	800dc6c <_scanf_float+0x224>
 800db74:	2b59      	cmp	r3, #89	@ 0x59
 800db76:	d199      	bne.n	800daac <_scanf_float+0x64>
 800db78:	2d07      	cmp	r5, #7
 800db7a:	d197      	bne.n	800daac <_scanf_float+0x64>
 800db7c:	2508      	movs	r5, #8
 800db7e:	e02c      	b.n	800dbda <_scanf_float+0x192>
 800db80:	2b74      	cmp	r3, #116	@ 0x74
 800db82:	d073      	beq.n	800dc6c <_scanf_float+0x224>
 800db84:	2b79      	cmp	r3, #121	@ 0x79
 800db86:	e7f6      	b.n	800db76 <_scanf_float+0x12e>
 800db88:	6821      	ldr	r1, [r4, #0]
 800db8a:	05c8      	lsls	r0, r1, #23
 800db8c:	d51b      	bpl.n	800dbc6 <_scanf_float+0x17e>
 800db8e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800db92:	6021      	str	r1, [r4, #0]
 800db94:	f109 0901 	add.w	r9, r9, #1
 800db98:	f1bb 0f00 	cmp.w	fp, #0
 800db9c:	d003      	beq.n	800dba6 <_scanf_float+0x15e>
 800db9e:	3201      	adds	r2, #1
 800dba0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dba4:	60a2      	str	r2, [r4, #8]
 800dba6:	68a3      	ldr	r3, [r4, #8]
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	60a3      	str	r3, [r4, #8]
 800dbac:	6923      	ldr	r3, [r4, #16]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	6123      	str	r3, [r4, #16]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	607b      	str	r3, [r7, #4]
 800dbba:	f340 8087 	ble.w	800dccc <_scanf_float+0x284>
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	603b      	str	r3, [r7, #0]
 800dbc4:	e765      	b.n	800da92 <_scanf_float+0x4a>
 800dbc6:	eb1a 0105 	adds.w	r1, sl, r5
 800dbca:	f47f af6f 	bne.w	800daac <_scanf_float+0x64>
 800dbce:	6822      	ldr	r2, [r4, #0]
 800dbd0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800dbd4:	6022      	str	r2, [r4, #0]
 800dbd6:	460d      	mov	r5, r1
 800dbd8:	468a      	mov	sl, r1
 800dbda:	f806 3b01 	strb.w	r3, [r6], #1
 800dbde:	e7e2      	b.n	800dba6 <_scanf_float+0x15e>
 800dbe0:	6822      	ldr	r2, [r4, #0]
 800dbe2:	0610      	lsls	r0, r2, #24
 800dbe4:	f57f af62 	bpl.w	800daac <_scanf_float+0x64>
 800dbe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dbec:	6022      	str	r2, [r4, #0]
 800dbee:	e7f4      	b.n	800dbda <_scanf_float+0x192>
 800dbf0:	f1ba 0f00 	cmp.w	sl, #0
 800dbf4:	d10e      	bne.n	800dc14 <_scanf_float+0x1cc>
 800dbf6:	f1b9 0f00 	cmp.w	r9, #0
 800dbfa:	d10e      	bne.n	800dc1a <_scanf_float+0x1d2>
 800dbfc:	6822      	ldr	r2, [r4, #0]
 800dbfe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dc02:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dc06:	d108      	bne.n	800dc1a <_scanf_float+0x1d2>
 800dc08:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dc0c:	6022      	str	r2, [r4, #0]
 800dc0e:	f04f 0a01 	mov.w	sl, #1
 800dc12:	e7e2      	b.n	800dbda <_scanf_float+0x192>
 800dc14:	f1ba 0f02 	cmp.w	sl, #2
 800dc18:	d055      	beq.n	800dcc6 <_scanf_float+0x27e>
 800dc1a:	2d01      	cmp	r5, #1
 800dc1c:	d002      	beq.n	800dc24 <_scanf_float+0x1dc>
 800dc1e:	2d04      	cmp	r5, #4
 800dc20:	f47f af44 	bne.w	800daac <_scanf_float+0x64>
 800dc24:	3501      	adds	r5, #1
 800dc26:	b2ed      	uxtb	r5, r5
 800dc28:	e7d7      	b.n	800dbda <_scanf_float+0x192>
 800dc2a:	f1ba 0f01 	cmp.w	sl, #1
 800dc2e:	f47f af3d 	bne.w	800daac <_scanf_float+0x64>
 800dc32:	f04f 0a02 	mov.w	sl, #2
 800dc36:	e7d0      	b.n	800dbda <_scanf_float+0x192>
 800dc38:	b97d      	cbnz	r5, 800dc5a <_scanf_float+0x212>
 800dc3a:	f1b9 0f00 	cmp.w	r9, #0
 800dc3e:	f47f af38 	bne.w	800dab2 <_scanf_float+0x6a>
 800dc42:	6822      	ldr	r2, [r4, #0]
 800dc44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dc48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dc4c:	f040 8108 	bne.w	800de60 <_scanf_float+0x418>
 800dc50:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dc54:	6022      	str	r2, [r4, #0]
 800dc56:	2501      	movs	r5, #1
 800dc58:	e7bf      	b.n	800dbda <_scanf_float+0x192>
 800dc5a:	2d03      	cmp	r5, #3
 800dc5c:	d0e2      	beq.n	800dc24 <_scanf_float+0x1dc>
 800dc5e:	2d05      	cmp	r5, #5
 800dc60:	e7de      	b.n	800dc20 <_scanf_float+0x1d8>
 800dc62:	2d02      	cmp	r5, #2
 800dc64:	f47f af22 	bne.w	800daac <_scanf_float+0x64>
 800dc68:	2503      	movs	r5, #3
 800dc6a:	e7b6      	b.n	800dbda <_scanf_float+0x192>
 800dc6c:	2d06      	cmp	r5, #6
 800dc6e:	f47f af1d 	bne.w	800daac <_scanf_float+0x64>
 800dc72:	2507      	movs	r5, #7
 800dc74:	e7b1      	b.n	800dbda <_scanf_float+0x192>
 800dc76:	6822      	ldr	r2, [r4, #0]
 800dc78:	0591      	lsls	r1, r2, #22
 800dc7a:	f57f af17 	bpl.w	800daac <_scanf_float+0x64>
 800dc7e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800dc82:	6022      	str	r2, [r4, #0]
 800dc84:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc88:	e7a7      	b.n	800dbda <_scanf_float+0x192>
 800dc8a:	6822      	ldr	r2, [r4, #0]
 800dc8c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800dc90:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800dc94:	d006      	beq.n	800dca4 <_scanf_float+0x25c>
 800dc96:	0550      	lsls	r0, r2, #21
 800dc98:	f57f af08 	bpl.w	800daac <_scanf_float+0x64>
 800dc9c:	f1b9 0f00 	cmp.w	r9, #0
 800dca0:	f000 80de 	beq.w	800de60 <_scanf_float+0x418>
 800dca4:	0591      	lsls	r1, r2, #22
 800dca6:	bf58      	it	pl
 800dca8:	9902      	ldrpl	r1, [sp, #8]
 800dcaa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dcae:	bf58      	it	pl
 800dcb0:	eba9 0101 	subpl.w	r1, r9, r1
 800dcb4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800dcb8:	bf58      	it	pl
 800dcba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dcbe:	6022      	str	r2, [r4, #0]
 800dcc0:	f04f 0900 	mov.w	r9, #0
 800dcc4:	e789      	b.n	800dbda <_scanf_float+0x192>
 800dcc6:	f04f 0a03 	mov.w	sl, #3
 800dcca:	e786      	b.n	800dbda <_scanf_float+0x192>
 800dccc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dcd0:	4639      	mov	r1, r7
 800dcd2:	4640      	mov	r0, r8
 800dcd4:	4798      	blx	r3
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	f43f aedb 	beq.w	800da92 <_scanf_float+0x4a>
 800dcdc:	e6e6      	b.n	800daac <_scanf_float+0x64>
 800dcde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dce2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dce6:	463a      	mov	r2, r7
 800dce8:	4640      	mov	r0, r8
 800dcea:	4798      	blx	r3
 800dcec:	6923      	ldr	r3, [r4, #16]
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	6123      	str	r3, [r4, #16]
 800dcf2:	e6e8      	b.n	800dac6 <_scanf_float+0x7e>
 800dcf4:	1e6b      	subs	r3, r5, #1
 800dcf6:	2b06      	cmp	r3, #6
 800dcf8:	d824      	bhi.n	800dd44 <_scanf_float+0x2fc>
 800dcfa:	2d02      	cmp	r5, #2
 800dcfc:	d836      	bhi.n	800dd6c <_scanf_float+0x324>
 800dcfe:	9b01      	ldr	r3, [sp, #4]
 800dd00:	429e      	cmp	r6, r3
 800dd02:	f67f aee4 	bls.w	800dace <_scanf_float+0x86>
 800dd06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd0e:	463a      	mov	r2, r7
 800dd10:	4640      	mov	r0, r8
 800dd12:	4798      	blx	r3
 800dd14:	6923      	ldr	r3, [r4, #16]
 800dd16:	3b01      	subs	r3, #1
 800dd18:	6123      	str	r3, [r4, #16]
 800dd1a:	e7f0      	b.n	800dcfe <_scanf_float+0x2b6>
 800dd1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd20:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800dd24:	463a      	mov	r2, r7
 800dd26:	4640      	mov	r0, r8
 800dd28:	4798      	blx	r3
 800dd2a:	6923      	ldr	r3, [r4, #16]
 800dd2c:	3b01      	subs	r3, #1
 800dd2e:	6123      	str	r3, [r4, #16]
 800dd30:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd34:	fa5f fa8a 	uxtb.w	sl, sl
 800dd38:	f1ba 0f02 	cmp.w	sl, #2
 800dd3c:	d1ee      	bne.n	800dd1c <_scanf_float+0x2d4>
 800dd3e:	3d03      	subs	r5, #3
 800dd40:	b2ed      	uxtb	r5, r5
 800dd42:	1b76      	subs	r6, r6, r5
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	05da      	lsls	r2, r3, #23
 800dd48:	d530      	bpl.n	800ddac <_scanf_float+0x364>
 800dd4a:	055b      	lsls	r3, r3, #21
 800dd4c:	d511      	bpl.n	800dd72 <_scanf_float+0x32a>
 800dd4e:	9b01      	ldr	r3, [sp, #4]
 800dd50:	429e      	cmp	r6, r3
 800dd52:	f67f aebc 	bls.w	800dace <_scanf_float+0x86>
 800dd56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd5e:	463a      	mov	r2, r7
 800dd60:	4640      	mov	r0, r8
 800dd62:	4798      	blx	r3
 800dd64:	6923      	ldr	r3, [r4, #16]
 800dd66:	3b01      	subs	r3, #1
 800dd68:	6123      	str	r3, [r4, #16]
 800dd6a:	e7f0      	b.n	800dd4e <_scanf_float+0x306>
 800dd6c:	46aa      	mov	sl, r5
 800dd6e:	46b3      	mov	fp, r6
 800dd70:	e7de      	b.n	800dd30 <_scanf_float+0x2e8>
 800dd72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dd76:	6923      	ldr	r3, [r4, #16]
 800dd78:	2965      	cmp	r1, #101	@ 0x65
 800dd7a:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd7e:	f106 35ff 	add.w	r5, r6, #4294967295
 800dd82:	6123      	str	r3, [r4, #16]
 800dd84:	d00c      	beq.n	800dda0 <_scanf_float+0x358>
 800dd86:	2945      	cmp	r1, #69	@ 0x45
 800dd88:	d00a      	beq.n	800dda0 <_scanf_float+0x358>
 800dd8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd8e:	463a      	mov	r2, r7
 800dd90:	4640      	mov	r0, r8
 800dd92:	4798      	blx	r3
 800dd94:	6923      	ldr	r3, [r4, #16]
 800dd96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	1eb5      	subs	r5, r6, #2
 800dd9e:	6123      	str	r3, [r4, #16]
 800dda0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dda4:	463a      	mov	r2, r7
 800dda6:	4640      	mov	r0, r8
 800dda8:	4798      	blx	r3
 800ddaa:	462e      	mov	r6, r5
 800ddac:	6822      	ldr	r2, [r4, #0]
 800ddae:	f012 0210 	ands.w	r2, r2, #16
 800ddb2:	d001      	beq.n	800ddb8 <_scanf_float+0x370>
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	e68b      	b.n	800dad0 <_scanf_float+0x88>
 800ddb8:	7032      	strb	r2, [r6, #0]
 800ddba:	6823      	ldr	r3, [r4, #0]
 800ddbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ddc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddc4:	d11c      	bne.n	800de00 <_scanf_float+0x3b8>
 800ddc6:	9b02      	ldr	r3, [sp, #8]
 800ddc8:	454b      	cmp	r3, r9
 800ddca:	eba3 0209 	sub.w	r2, r3, r9
 800ddce:	d123      	bne.n	800de18 <_scanf_float+0x3d0>
 800ddd0:	9901      	ldr	r1, [sp, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	4640      	mov	r0, r8
 800ddd6:	f7ff f947 	bl	800d068 <_strtod_r>
 800ddda:	9b03      	ldr	r3, [sp, #12]
 800dddc:	6821      	ldr	r1, [r4, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f011 0f02 	tst.w	r1, #2
 800dde4:	ec57 6b10 	vmov	r6, r7, d0
 800dde8:	f103 0204 	add.w	r2, r3, #4
 800ddec:	d01f      	beq.n	800de2e <_scanf_float+0x3e6>
 800ddee:	9903      	ldr	r1, [sp, #12]
 800ddf0:	600a      	str	r2, [r1, #0]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	e9c3 6700 	strd	r6, r7, [r3]
 800ddf8:	68e3      	ldr	r3, [r4, #12]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	60e3      	str	r3, [r4, #12]
 800ddfe:	e7d9      	b.n	800ddb4 <_scanf_float+0x36c>
 800de00:	9b04      	ldr	r3, [sp, #16]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d0e4      	beq.n	800ddd0 <_scanf_float+0x388>
 800de06:	9905      	ldr	r1, [sp, #20]
 800de08:	230a      	movs	r3, #10
 800de0a:	3101      	adds	r1, #1
 800de0c:	4640      	mov	r0, r8
 800de0e:	f7ff f9b7 	bl	800d180 <_strtol_r>
 800de12:	9b04      	ldr	r3, [sp, #16]
 800de14:	9e05      	ldr	r6, [sp, #20]
 800de16:	1ac2      	subs	r2, r0, r3
 800de18:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800de1c:	429e      	cmp	r6, r3
 800de1e:	bf28      	it	cs
 800de20:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800de24:	4910      	ldr	r1, [pc, #64]	@ (800de68 <_scanf_float+0x420>)
 800de26:	4630      	mov	r0, r6
 800de28:	f000 f8e4 	bl	800dff4 <siprintf>
 800de2c:	e7d0      	b.n	800ddd0 <_scanf_float+0x388>
 800de2e:	f011 0f04 	tst.w	r1, #4
 800de32:	9903      	ldr	r1, [sp, #12]
 800de34:	600a      	str	r2, [r1, #0]
 800de36:	d1dc      	bne.n	800ddf2 <_scanf_float+0x3aa>
 800de38:	681d      	ldr	r5, [r3, #0]
 800de3a:	4632      	mov	r2, r6
 800de3c:	463b      	mov	r3, r7
 800de3e:	4630      	mov	r0, r6
 800de40:	4639      	mov	r1, r7
 800de42:	f7f2 fe83 	bl	8000b4c <__aeabi_dcmpun>
 800de46:	b128      	cbz	r0, 800de54 <_scanf_float+0x40c>
 800de48:	4808      	ldr	r0, [pc, #32]	@ (800de6c <_scanf_float+0x424>)
 800de4a:	f000 fa79 	bl	800e340 <nanf>
 800de4e:	ed85 0a00 	vstr	s0, [r5]
 800de52:	e7d1      	b.n	800ddf8 <_scanf_float+0x3b0>
 800de54:	4630      	mov	r0, r6
 800de56:	4639      	mov	r1, r7
 800de58:	f7f2 fed6 	bl	8000c08 <__aeabi_d2f>
 800de5c:	6028      	str	r0, [r5, #0]
 800de5e:	e7cb      	b.n	800ddf8 <_scanf_float+0x3b0>
 800de60:	f04f 0900 	mov.w	r9, #0
 800de64:	e629      	b.n	800daba <_scanf_float+0x72>
 800de66:	bf00      	nop
 800de68:	0801158b 	.word	0x0801158b
 800de6c:	08011644 	.word	0x08011644

0800de70 <std>:
 800de70:	2300      	movs	r3, #0
 800de72:	b510      	push	{r4, lr}
 800de74:	4604      	mov	r4, r0
 800de76:	e9c0 3300 	strd	r3, r3, [r0]
 800de7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de7e:	6083      	str	r3, [r0, #8]
 800de80:	8181      	strh	r1, [r0, #12]
 800de82:	6643      	str	r3, [r0, #100]	@ 0x64
 800de84:	81c2      	strh	r2, [r0, #14]
 800de86:	6183      	str	r3, [r0, #24]
 800de88:	4619      	mov	r1, r3
 800de8a:	2208      	movs	r2, #8
 800de8c:	305c      	adds	r0, #92	@ 0x5c
 800de8e:	f000 f940 	bl	800e112 <memset>
 800de92:	4b0d      	ldr	r3, [pc, #52]	@ (800dec8 <std+0x58>)
 800de94:	6263      	str	r3, [r4, #36]	@ 0x24
 800de96:	4b0d      	ldr	r3, [pc, #52]	@ (800decc <std+0x5c>)
 800de98:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ded0 <std+0x60>)
 800de9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ded4 <std+0x64>)
 800dea0:	6323      	str	r3, [r4, #48]	@ 0x30
 800dea2:	4b0d      	ldr	r3, [pc, #52]	@ (800ded8 <std+0x68>)
 800dea4:	6224      	str	r4, [r4, #32]
 800dea6:	429c      	cmp	r4, r3
 800dea8:	d006      	beq.n	800deb8 <std+0x48>
 800deaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800deae:	4294      	cmp	r4, r2
 800deb0:	d002      	beq.n	800deb8 <std+0x48>
 800deb2:	33d0      	adds	r3, #208	@ 0xd0
 800deb4:	429c      	cmp	r4, r3
 800deb6:	d105      	bne.n	800dec4 <std+0x54>
 800deb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800debc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dec0:	f000 ba22 	b.w	800e308 <__retarget_lock_init_recursive>
 800dec4:	bd10      	pop	{r4, pc}
 800dec6:	bf00      	nop
 800dec8:	0800e089 	.word	0x0800e089
 800decc:	0800e0af 	.word	0x0800e0af
 800ded0:	0800e0e7 	.word	0x0800e0e7
 800ded4:	0800e10b 	.word	0x0800e10b
 800ded8:	200020f4 	.word	0x200020f4

0800dedc <stdio_exit_handler>:
 800dedc:	4a02      	ldr	r2, [pc, #8]	@ (800dee8 <stdio_exit_handler+0xc>)
 800dede:	4903      	ldr	r1, [pc, #12]	@ (800deec <stdio_exit_handler+0x10>)
 800dee0:	4803      	ldr	r0, [pc, #12]	@ (800def0 <stdio_exit_handler+0x14>)
 800dee2:	f000 b869 	b.w	800dfb8 <_fwalk_sglue>
 800dee6:	bf00      	nop
 800dee8:	20000124 	.word	0x20000124
 800deec:	08010ac5 	.word	0x08010ac5
 800def0:	200002a0 	.word	0x200002a0

0800def4 <cleanup_stdio>:
 800def4:	6841      	ldr	r1, [r0, #4]
 800def6:	4b0c      	ldr	r3, [pc, #48]	@ (800df28 <cleanup_stdio+0x34>)
 800def8:	4299      	cmp	r1, r3
 800defa:	b510      	push	{r4, lr}
 800defc:	4604      	mov	r4, r0
 800defe:	d001      	beq.n	800df04 <cleanup_stdio+0x10>
 800df00:	f002 fde0 	bl	8010ac4 <_fflush_r>
 800df04:	68a1      	ldr	r1, [r4, #8]
 800df06:	4b09      	ldr	r3, [pc, #36]	@ (800df2c <cleanup_stdio+0x38>)
 800df08:	4299      	cmp	r1, r3
 800df0a:	d002      	beq.n	800df12 <cleanup_stdio+0x1e>
 800df0c:	4620      	mov	r0, r4
 800df0e:	f002 fdd9 	bl	8010ac4 <_fflush_r>
 800df12:	68e1      	ldr	r1, [r4, #12]
 800df14:	4b06      	ldr	r3, [pc, #24]	@ (800df30 <cleanup_stdio+0x3c>)
 800df16:	4299      	cmp	r1, r3
 800df18:	d004      	beq.n	800df24 <cleanup_stdio+0x30>
 800df1a:	4620      	mov	r0, r4
 800df1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df20:	f002 bdd0 	b.w	8010ac4 <_fflush_r>
 800df24:	bd10      	pop	{r4, pc}
 800df26:	bf00      	nop
 800df28:	200020f4 	.word	0x200020f4
 800df2c:	2000215c 	.word	0x2000215c
 800df30:	200021c4 	.word	0x200021c4

0800df34 <global_stdio_init.part.0>:
 800df34:	b510      	push	{r4, lr}
 800df36:	4b0b      	ldr	r3, [pc, #44]	@ (800df64 <global_stdio_init.part.0+0x30>)
 800df38:	4c0b      	ldr	r4, [pc, #44]	@ (800df68 <global_stdio_init.part.0+0x34>)
 800df3a:	4a0c      	ldr	r2, [pc, #48]	@ (800df6c <global_stdio_init.part.0+0x38>)
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	4620      	mov	r0, r4
 800df40:	2200      	movs	r2, #0
 800df42:	2104      	movs	r1, #4
 800df44:	f7ff ff94 	bl	800de70 <std>
 800df48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df4c:	2201      	movs	r2, #1
 800df4e:	2109      	movs	r1, #9
 800df50:	f7ff ff8e 	bl	800de70 <std>
 800df54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df58:	2202      	movs	r2, #2
 800df5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df5e:	2112      	movs	r1, #18
 800df60:	f7ff bf86 	b.w	800de70 <std>
 800df64:	2000222c 	.word	0x2000222c
 800df68:	200020f4 	.word	0x200020f4
 800df6c:	0800dedd 	.word	0x0800dedd

0800df70 <__sfp_lock_acquire>:
 800df70:	4801      	ldr	r0, [pc, #4]	@ (800df78 <__sfp_lock_acquire+0x8>)
 800df72:	f000 b9ca 	b.w	800e30a <__retarget_lock_acquire_recursive>
 800df76:	bf00      	nop
 800df78:	20002235 	.word	0x20002235

0800df7c <__sfp_lock_release>:
 800df7c:	4801      	ldr	r0, [pc, #4]	@ (800df84 <__sfp_lock_release+0x8>)
 800df7e:	f000 b9c5 	b.w	800e30c <__retarget_lock_release_recursive>
 800df82:	bf00      	nop
 800df84:	20002235 	.word	0x20002235

0800df88 <__sinit>:
 800df88:	b510      	push	{r4, lr}
 800df8a:	4604      	mov	r4, r0
 800df8c:	f7ff fff0 	bl	800df70 <__sfp_lock_acquire>
 800df90:	6a23      	ldr	r3, [r4, #32]
 800df92:	b11b      	cbz	r3, 800df9c <__sinit+0x14>
 800df94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df98:	f7ff bff0 	b.w	800df7c <__sfp_lock_release>
 800df9c:	4b04      	ldr	r3, [pc, #16]	@ (800dfb0 <__sinit+0x28>)
 800df9e:	6223      	str	r3, [r4, #32]
 800dfa0:	4b04      	ldr	r3, [pc, #16]	@ (800dfb4 <__sinit+0x2c>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1f5      	bne.n	800df94 <__sinit+0xc>
 800dfa8:	f7ff ffc4 	bl	800df34 <global_stdio_init.part.0>
 800dfac:	e7f2      	b.n	800df94 <__sinit+0xc>
 800dfae:	bf00      	nop
 800dfb0:	0800def5 	.word	0x0800def5
 800dfb4:	2000222c 	.word	0x2000222c

0800dfb8 <_fwalk_sglue>:
 800dfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	4688      	mov	r8, r1
 800dfc0:	4614      	mov	r4, r2
 800dfc2:	2600      	movs	r6, #0
 800dfc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfc8:	f1b9 0901 	subs.w	r9, r9, #1
 800dfcc:	d505      	bpl.n	800dfda <_fwalk_sglue+0x22>
 800dfce:	6824      	ldr	r4, [r4, #0]
 800dfd0:	2c00      	cmp	r4, #0
 800dfd2:	d1f7      	bne.n	800dfc4 <_fwalk_sglue+0xc>
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfda:	89ab      	ldrh	r3, [r5, #12]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d907      	bls.n	800dff0 <_fwalk_sglue+0x38>
 800dfe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	d003      	beq.n	800dff0 <_fwalk_sglue+0x38>
 800dfe8:	4629      	mov	r1, r5
 800dfea:	4638      	mov	r0, r7
 800dfec:	47c0      	blx	r8
 800dfee:	4306      	orrs	r6, r0
 800dff0:	3568      	adds	r5, #104	@ 0x68
 800dff2:	e7e9      	b.n	800dfc8 <_fwalk_sglue+0x10>

0800dff4 <siprintf>:
 800dff4:	b40e      	push	{r1, r2, r3}
 800dff6:	b500      	push	{lr}
 800dff8:	b09c      	sub	sp, #112	@ 0x70
 800dffa:	ab1d      	add	r3, sp, #116	@ 0x74
 800dffc:	9002      	str	r0, [sp, #8]
 800dffe:	9006      	str	r0, [sp, #24]
 800e000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e004:	4809      	ldr	r0, [pc, #36]	@ (800e02c <siprintf+0x38>)
 800e006:	9107      	str	r1, [sp, #28]
 800e008:	9104      	str	r1, [sp, #16]
 800e00a:	4909      	ldr	r1, [pc, #36]	@ (800e030 <siprintf+0x3c>)
 800e00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e010:	9105      	str	r1, [sp, #20]
 800e012:	6800      	ldr	r0, [r0, #0]
 800e014:	9301      	str	r3, [sp, #4]
 800e016:	a902      	add	r1, sp, #8
 800e018:	f002 f8ba 	bl	8010190 <_svfiprintf_r>
 800e01c:	9b02      	ldr	r3, [sp, #8]
 800e01e:	2200      	movs	r2, #0
 800e020:	701a      	strb	r2, [r3, #0]
 800e022:	b01c      	add	sp, #112	@ 0x70
 800e024:	f85d eb04 	ldr.w	lr, [sp], #4
 800e028:	b003      	add	sp, #12
 800e02a:	4770      	bx	lr
 800e02c:	2000029c 	.word	0x2000029c
 800e030:	ffff0208 	.word	0xffff0208

0800e034 <siscanf>:
 800e034:	b40e      	push	{r1, r2, r3}
 800e036:	b530      	push	{r4, r5, lr}
 800e038:	b09c      	sub	sp, #112	@ 0x70
 800e03a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e03c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e040:	f854 5b04 	ldr.w	r5, [r4], #4
 800e044:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e048:	9002      	str	r0, [sp, #8]
 800e04a:	9006      	str	r0, [sp, #24]
 800e04c:	f7f2 f920 	bl	8000290 <strlen>
 800e050:	4b0b      	ldr	r3, [pc, #44]	@ (800e080 <siscanf+0x4c>)
 800e052:	9003      	str	r0, [sp, #12]
 800e054:	9007      	str	r0, [sp, #28]
 800e056:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e058:	480a      	ldr	r0, [pc, #40]	@ (800e084 <siscanf+0x50>)
 800e05a:	9401      	str	r4, [sp, #4]
 800e05c:	2300      	movs	r3, #0
 800e05e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e060:	9314      	str	r3, [sp, #80]	@ 0x50
 800e062:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e066:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e06a:	462a      	mov	r2, r5
 800e06c:	4623      	mov	r3, r4
 800e06e:	a902      	add	r1, sp, #8
 800e070:	6800      	ldr	r0, [r0, #0]
 800e072:	f002 f9e1 	bl	8010438 <__ssvfiscanf_r>
 800e076:	b01c      	add	sp, #112	@ 0x70
 800e078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e07c:	b003      	add	sp, #12
 800e07e:	4770      	bx	lr
 800e080:	0800e0ab 	.word	0x0800e0ab
 800e084:	2000029c 	.word	0x2000029c

0800e088 <__sread>:
 800e088:	b510      	push	{r4, lr}
 800e08a:	460c      	mov	r4, r1
 800e08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e090:	f000 f8dc 	bl	800e24c <_read_r>
 800e094:	2800      	cmp	r0, #0
 800e096:	bfab      	itete	ge
 800e098:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e09a:	89a3      	ldrhlt	r3, [r4, #12]
 800e09c:	181b      	addge	r3, r3, r0
 800e09e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e0a2:	bfac      	ite	ge
 800e0a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e0a6:	81a3      	strhlt	r3, [r4, #12]
 800e0a8:	bd10      	pop	{r4, pc}

0800e0aa <__seofread>:
 800e0aa:	2000      	movs	r0, #0
 800e0ac:	4770      	bx	lr

0800e0ae <__swrite>:
 800e0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b2:	461f      	mov	r7, r3
 800e0b4:	898b      	ldrh	r3, [r1, #12]
 800e0b6:	05db      	lsls	r3, r3, #23
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	4616      	mov	r6, r2
 800e0be:	d505      	bpl.n	800e0cc <__swrite+0x1e>
 800e0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0c4:	2302      	movs	r3, #2
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f000 f8ae 	bl	800e228 <_lseek_r>
 800e0cc:	89a3      	ldrh	r3, [r4, #12]
 800e0ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e0d6:	81a3      	strh	r3, [r4, #12]
 800e0d8:	4632      	mov	r2, r6
 800e0da:	463b      	mov	r3, r7
 800e0dc:	4628      	mov	r0, r5
 800e0de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e2:	f000 b8d5 	b.w	800e290 <_write_r>

0800e0e6 <__sseek>:
 800e0e6:	b510      	push	{r4, lr}
 800e0e8:	460c      	mov	r4, r1
 800e0ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ee:	f000 f89b 	bl	800e228 <_lseek_r>
 800e0f2:	1c43      	adds	r3, r0, #1
 800e0f4:	89a3      	ldrh	r3, [r4, #12]
 800e0f6:	bf15      	itete	ne
 800e0f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e0fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e0fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e102:	81a3      	strheq	r3, [r4, #12]
 800e104:	bf18      	it	ne
 800e106:	81a3      	strhne	r3, [r4, #12]
 800e108:	bd10      	pop	{r4, pc}

0800e10a <__sclose>:
 800e10a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e10e:	f000 b87b 	b.w	800e208 <_close_r>

0800e112 <memset>:
 800e112:	4402      	add	r2, r0
 800e114:	4603      	mov	r3, r0
 800e116:	4293      	cmp	r3, r2
 800e118:	d100      	bne.n	800e11c <memset+0xa>
 800e11a:	4770      	bx	lr
 800e11c:	f803 1b01 	strb.w	r1, [r3], #1
 800e120:	e7f9      	b.n	800e116 <memset+0x4>

0800e122 <strncmp>:
 800e122:	b510      	push	{r4, lr}
 800e124:	b16a      	cbz	r2, 800e142 <strncmp+0x20>
 800e126:	3901      	subs	r1, #1
 800e128:	1884      	adds	r4, r0, r2
 800e12a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e12e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e132:	429a      	cmp	r2, r3
 800e134:	d103      	bne.n	800e13e <strncmp+0x1c>
 800e136:	42a0      	cmp	r0, r4
 800e138:	d001      	beq.n	800e13e <strncmp+0x1c>
 800e13a:	2a00      	cmp	r2, #0
 800e13c:	d1f5      	bne.n	800e12a <strncmp+0x8>
 800e13e:	1ad0      	subs	r0, r2, r3
 800e140:	bd10      	pop	{r4, pc}
 800e142:	4610      	mov	r0, r2
 800e144:	e7fc      	b.n	800e140 <strncmp+0x1e>
	...

0800e148 <strtok>:
 800e148:	4b16      	ldr	r3, [pc, #88]	@ (800e1a4 <strtok+0x5c>)
 800e14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e14e:	681f      	ldr	r7, [r3, #0]
 800e150:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800e152:	4605      	mov	r5, r0
 800e154:	460e      	mov	r6, r1
 800e156:	b9ec      	cbnz	r4, 800e194 <strtok+0x4c>
 800e158:	2050      	movs	r0, #80	@ 0x50
 800e15a:	f7fe f88d 	bl	800c278 <malloc>
 800e15e:	4602      	mov	r2, r0
 800e160:	6478      	str	r0, [r7, #68]	@ 0x44
 800e162:	b920      	cbnz	r0, 800e16e <strtok+0x26>
 800e164:	4b10      	ldr	r3, [pc, #64]	@ (800e1a8 <strtok+0x60>)
 800e166:	4811      	ldr	r0, [pc, #68]	@ (800e1ac <strtok+0x64>)
 800e168:	215b      	movs	r1, #91	@ 0x5b
 800e16a:	f000 f8ef 	bl	800e34c <__assert_func>
 800e16e:	e9c0 4400 	strd	r4, r4, [r0]
 800e172:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e176:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e17a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800e17e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800e182:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800e186:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800e18a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800e18e:	6184      	str	r4, [r0, #24]
 800e190:	7704      	strb	r4, [r0, #28]
 800e192:	6244      	str	r4, [r0, #36]	@ 0x24
 800e194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e196:	4631      	mov	r1, r6
 800e198:	4628      	mov	r0, r5
 800e19a:	2301      	movs	r3, #1
 800e19c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a0:	f000 b806 	b.w	800e1b0 <__strtok_r>
 800e1a4:	2000029c 	.word	0x2000029c
 800e1a8:	08011590 	.word	0x08011590
 800e1ac:	080115a7 	.word	0x080115a7

0800e1b0 <__strtok_r>:
 800e1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	b908      	cbnz	r0, 800e1ba <__strtok_r+0xa>
 800e1b6:	6814      	ldr	r4, [r2, #0]
 800e1b8:	b144      	cbz	r4, 800e1cc <__strtok_r+0x1c>
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e1c0:	460f      	mov	r7, r1
 800e1c2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e1c6:	b91e      	cbnz	r6, 800e1d0 <__strtok_r+0x20>
 800e1c8:	b965      	cbnz	r5, 800e1e4 <__strtok_r+0x34>
 800e1ca:	6015      	str	r5, [r2, #0]
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	e005      	b.n	800e1dc <__strtok_r+0x2c>
 800e1d0:	42b5      	cmp	r5, r6
 800e1d2:	d1f6      	bne.n	800e1c2 <__strtok_r+0x12>
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d1f0      	bne.n	800e1ba <__strtok_r+0xa>
 800e1d8:	6014      	str	r4, [r2, #0]
 800e1da:	7003      	strb	r3, [r0, #0]
 800e1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1de:	461c      	mov	r4, r3
 800e1e0:	e00c      	b.n	800e1fc <__strtok_r+0x4c>
 800e1e2:	b915      	cbnz	r5, 800e1ea <__strtok_r+0x3a>
 800e1e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1e8:	460e      	mov	r6, r1
 800e1ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e1ee:	42ab      	cmp	r3, r5
 800e1f0:	d1f7      	bne.n	800e1e2 <__strtok_r+0x32>
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d0f3      	beq.n	800e1de <__strtok_r+0x2e>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e1fc:	6014      	str	r4, [r2, #0]
 800e1fe:	e7ed      	b.n	800e1dc <__strtok_r+0x2c>

0800e200 <_localeconv_r>:
 800e200:	4800      	ldr	r0, [pc, #0]	@ (800e204 <_localeconv_r+0x4>)
 800e202:	4770      	bx	lr
 800e204:	20000220 	.word	0x20000220

0800e208 <_close_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4d06      	ldr	r5, [pc, #24]	@ (800e224 <_close_r+0x1c>)
 800e20c:	2300      	movs	r3, #0
 800e20e:	4604      	mov	r4, r0
 800e210:	4608      	mov	r0, r1
 800e212:	602b      	str	r3, [r5, #0]
 800e214:	f7f6 faca 	bl	80047ac <_close>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d102      	bne.n	800e222 <_close_r+0x1a>
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	b103      	cbz	r3, 800e222 <_close_r+0x1a>
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	20002230 	.word	0x20002230

0800e228 <_lseek_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4d07      	ldr	r5, [pc, #28]	@ (800e248 <_lseek_r+0x20>)
 800e22c:	4604      	mov	r4, r0
 800e22e:	4608      	mov	r0, r1
 800e230:	4611      	mov	r1, r2
 800e232:	2200      	movs	r2, #0
 800e234:	602a      	str	r2, [r5, #0]
 800e236:	461a      	mov	r2, r3
 800e238:	f7f6 fadf 	bl	80047fa <_lseek>
 800e23c:	1c43      	adds	r3, r0, #1
 800e23e:	d102      	bne.n	800e246 <_lseek_r+0x1e>
 800e240:	682b      	ldr	r3, [r5, #0]
 800e242:	b103      	cbz	r3, 800e246 <_lseek_r+0x1e>
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	20002230 	.word	0x20002230

0800e24c <_read_r>:
 800e24c:	b538      	push	{r3, r4, r5, lr}
 800e24e:	4d07      	ldr	r5, [pc, #28]	@ (800e26c <_read_r+0x20>)
 800e250:	4604      	mov	r4, r0
 800e252:	4608      	mov	r0, r1
 800e254:	4611      	mov	r1, r2
 800e256:	2200      	movs	r2, #0
 800e258:	602a      	str	r2, [r5, #0]
 800e25a:	461a      	mov	r2, r3
 800e25c:	f7f6 fa6d 	bl	800473a <_read>
 800e260:	1c43      	adds	r3, r0, #1
 800e262:	d102      	bne.n	800e26a <_read_r+0x1e>
 800e264:	682b      	ldr	r3, [r5, #0]
 800e266:	b103      	cbz	r3, 800e26a <_read_r+0x1e>
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	bd38      	pop	{r3, r4, r5, pc}
 800e26c:	20002230 	.word	0x20002230

0800e270 <_sbrk_r>:
 800e270:	b538      	push	{r3, r4, r5, lr}
 800e272:	4d06      	ldr	r5, [pc, #24]	@ (800e28c <_sbrk_r+0x1c>)
 800e274:	2300      	movs	r3, #0
 800e276:	4604      	mov	r4, r0
 800e278:	4608      	mov	r0, r1
 800e27a:	602b      	str	r3, [r5, #0]
 800e27c:	f7f6 faca 	bl	8004814 <_sbrk>
 800e280:	1c43      	adds	r3, r0, #1
 800e282:	d102      	bne.n	800e28a <_sbrk_r+0x1a>
 800e284:	682b      	ldr	r3, [r5, #0]
 800e286:	b103      	cbz	r3, 800e28a <_sbrk_r+0x1a>
 800e288:	6023      	str	r3, [r4, #0]
 800e28a:	bd38      	pop	{r3, r4, r5, pc}
 800e28c:	20002230 	.word	0x20002230

0800e290 <_write_r>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	4d07      	ldr	r5, [pc, #28]	@ (800e2b0 <_write_r+0x20>)
 800e294:	4604      	mov	r4, r0
 800e296:	4608      	mov	r0, r1
 800e298:	4611      	mov	r1, r2
 800e29a:	2200      	movs	r2, #0
 800e29c:	602a      	str	r2, [r5, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	f7f6 fa68 	bl	8004774 <_write>
 800e2a4:	1c43      	adds	r3, r0, #1
 800e2a6:	d102      	bne.n	800e2ae <_write_r+0x1e>
 800e2a8:	682b      	ldr	r3, [r5, #0]
 800e2aa:	b103      	cbz	r3, 800e2ae <_write_r+0x1e>
 800e2ac:	6023      	str	r3, [r4, #0]
 800e2ae:	bd38      	pop	{r3, r4, r5, pc}
 800e2b0:	20002230 	.word	0x20002230

0800e2b4 <__errno>:
 800e2b4:	4b01      	ldr	r3, [pc, #4]	@ (800e2bc <__errno+0x8>)
 800e2b6:	6818      	ldr	r0, [r3, #0]
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	2000029c 	.word	0x2000029c

0800e2c0 <__libc_init_array>:
 800e2c0:	b570      	push	{r4, r5, r6, lr}
 800e2c2:	4d0d      	ldr	r5, [pc, #52]	@ (800e2f8 <__libc_init_array+0x38>)
 800e2c4:	4c0d      	ldr	r4, [pc, #52]	@ (800e2fc <__libc_init_array+0x3c>)
 800e2c6:	1b64      	subs	r4, r4, r5
 800e2c8:	10a4      	asrs	r4, r4, #2
 800e2ca:	2600      	movs	r6, #0
 800e2cc:	42a6      	cmp	r6, r4
 800e2ce:	d109      	bne.n	800e2e4 <__libc_init_array+0x24>
 800e2d0:	4d0b      	ldr	r5, [pc, #44]	@ (800e300 <__libc_init_array+0x40>)
 800e2d2:	4c0c      	ldr	r4, [pc, #48]	@ (800e304 <__libc_init_array+0x44>)
 800e2d4:	f002 ffe6 	bl	80112a4 <_init>
 800e2d8:	1b64      	subs	r4, r4, r5
 800e2da:	10a4      	asrs	r4, r4, #2
 800e2dc:	2600      	movs	r6, #0
 800e2de:	42a6      	cmp	r6, r4
 800e2e0:	d105      	bne.n	800e2ee <__libc_init_array+0x2e>
 800e2e2:	bd70      	pop	{r4, r5, r6, pc}
 800e2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2e8:	4798      	blx	r3
 800e2ea:	3601      	adds	r6, #1
 800e2ec:	e7ee      	b.n	800e2cc <__libc_init_array+0xc>
 800e2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2f2:	4798      	blx	r3
 800e2f4:	3601      	adds	r6, #1
 800e2f6:	e7f2      	b.n	800e2de <__libc_init_array+0x1e>
 800e2f8:	080118a4 	.word	0x080118a4
 800e2fc:	080118a4 	.word	0x080118a4
 800e300:	080118a4 	.word	0x080118a4
 800e304:	080118a8 	.word	0x080118a8

0800e308 <__retarget_lock_init_recursive>:
 800e308:	4770      	bx	lr

0800e30a <__retarget_lock_acquire_recursive>:
 800e30a:	4770      	bx	lr

0800e30c <__retarget_lock_release_recursive>:
 800e30c:	4770      	bx	lr

0800e30e <memcpy>:
 800e30e:	440a      	add	r2, r1
 800e310:	4291      	cmp	r1, r2
 800e312:	f100 33ff 	add.w	r3, r0, #4294967295
 800e316:	d100      	bne.n	800e31a <memcpy+0xc>
 800e318:	4770      	bx	lr
 800e31a:	b510      	push	{r4, lr}
 800e31c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e320:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e324:	4291      	cmp	r1, r2
 800e326:	d1f9      	bne.n	800e31c <memcpy+0xe>
 800e328:	bd10      	pop	{r4, pc}
 800e32a:	0000      	movs	r0, r0
 800e32c:	0000      	movs	r0, r0
	...

0800e330 <nan>:
 800e330:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e338 <nan+0x8>
 800e334:	4770      	bx	lr
 800e336:	bf00      	nop
 800e338:	00000000 	.word	0x00000000
 800e33c:	7ff80000 	.word	0x7ff80000

0800e340 <nanf>:
 800e340:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e348 <nanf+0x8>
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop
 800e348:	7fc00000 	.word	0x7fc00000

0800e34c <__assert_func>:
 800e34c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e34e:	4614      	mov	r4, r2
 800e350:	461a      	mov	r2, r3
 800e352:	4b09      	ldr	r3, [pc, #36]	@ (800e378 <__assert_func+0x2c>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4605      	mov	r5, r0
 800e358:	68d8      	ldr	r0, [r3, #12]
 800e35a:	b954      	cbnz	r4, 800e372 <__assert_func+0x26>
 800e35c:	4b07      	ldr	r3, [pc, #28]	@ (800e37c <__assert_func+0x30>)
 800e35e:	461c      	mov	r4, r3
 800e360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e364:	9100      	str	r1, [sp, #0]
 800e366:	462b      	mov	r3, r5
 800e368:	4905      	ldr	r1, [pc, #20]	@ (800e380 <__assert_func+0x34>)
 800e36a:	f002 fbd3 	bl	8010b14 <fiprintf>
 800e36e:	f002 fc70 	bl	8010c52 <abort>
 800e372:	4b04      	ldr	r3, [pc, #16]	@ (800e384 <__assert_func+0x38>)
 800e374:	e7f4      	b.n	800e360 <__assert_func+0x14>
 800e376:	bf00      	nop
 800e378:	2000029c 	.word	0x2000029c
 800e37c:	08011644 	.word	0x08011644
 800e380:	08011616 	.word	0x08011616
 800e384:	08011609 	.word	0x08011609

0800e388 <quorem>:
 800e388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	6903      	ldr	r3, [r0, #16]
 800e38e:	690c      	ldr	r4, [r1, #16]
 800e390:	42a3      	cmp	r3, r4
 800e392:	4607      	mov	r7, r0
 800e394:	db7e      	blt.n	800e494 <quorem+0x10c>
 800e396:	3c01      	subs	r4, #1
 800e398:	f101 0814 	add.w	r8, r1, #20
 800e39c:	00a3      	lsls	r3, r4, #2
 800e39e:	f100 0514 	add.w	r5, r0, #20
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3a8:	9301      	str	r3, [sp, #4]
 800e3aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e3ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e3ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800e3be:	d32e      	bcc.n	800e41e <quorem+0x96>
 800e3c0:	f04f 0a00 	mov.w	sl, #0
 800e3c4:	46c4      	mov	ip, r8
 800e3c6:	46ae      	mov	lr, r5
 800e3c8:	46d3      	mov	fp, sl
 800e3ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e3ce:	b298      	uxth	r0, r3
 800e3d0:	fb06 a000 	mla	r0, r6, r0, sl
 800e3d4:	0c02      	lsrs	r2, r0, #16
 800e3d6:	0c1b      	lsrs	r3, r3, #16
 800e3d8:	fb06 2303 	mla	r3, r6, r3, r2
 800e3dc:	f8de 2000 	ldr.w	r2, [lr]
 800e3e0:	b280      	uxth	r0, r0
 800e3e2:	b292      	uxth	r2, r2
 800e3e4:	1a12      	subs	r2, r2, r0
 800e3e6:	445a      	add	r2, fp
 800e3e8:	f8de 0000 	ldr.w	r0, [lr]
 800e3ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e3f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e3fa:	b292      	uxth	r2, r2
 800e3fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e400:	45e1      	cmp	r9, ip
 800e402:	f84e 2b04 	str.w	r2, [lr], #4
 800e406:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e40a:	d2de      	bcs.n	800e3ca <quorem+0x42>
 800e40c:	9b00      	ldr	r3, [sp, #0]
 800e40e:	58eb      	ldr	r3, [r5, r3]
 800e410:	b92b      	cbnz	r3, 800e41e <quorem+0x96>
 800e412:	9b01      	ldr	r3, [sp, #4]
 800e414:	3b04      	subs	r3, #4
 800e416:	429d      	cmp	r5, r3
 800e418:	461a      	mov	r2, r3
 800e41a:	d32f      	bcc.n	800e47c <quorem+0xf4>
 800e41c:	613c      	str	r4, [r7, #16]
 800e41e:	4638      	mov	r0, r7
 800e420:	f001 fc58 	bl	800fcd4 <__mcmp>
 800e424:	2800      	cmp	r0, #0
 800e426:	db25      	blt.n	800e474 <quorem+0xec>
 800e428:	4629      	mov	r1, r5
 800e42a:	2000      	movs	r0, #0
 800e42c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e430:	f8d1 c000 	ldr.w	ip, [r1]
 800e434:	fa1f fe82 	uxth.w	lr, r2
 800e438:	fa1f f38c 	uxth.w	r3, ip
 800e43c:	eba3 030e 	sub.w	r3, r3, lr
 800e440:	4403      	add	r3, r0
 800e442:	0c12      	lsrs	r2, r2, #16
 800e444:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e448:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e452:	45c1      	cmp	r9, r8
 800e454:	f841 3b04 	str.w	r3, [r1], #4
 800e458:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e45c:	d2e6      	bcs.n	800e42c <quorem+0xa4>
 800e45e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e466:	b922      	cbnz	r2, 800e472 <quorem+0xea>
 800e468:	3b04      	subs	r3, #4
 800e46a:	429d      	cmp	r5, r3
 800e46c:	461a      	mov	r2, r3
 800e46e:	d30b      	bcc.n	800e488 <quorem+0x100>
 800e470:	613c      	str	r4, [r7, #16]
 800e472:	3601      	adds	r6, #1
 800e474:	4630      	mov	r0, r6
 800e476:	b003      	add	sp, #12
 800e478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e47c:	6812      	ldr	r2, [r2, #0]
 800e47e:	3b04      	subs	r3, #4
 800e480:	2a00      	cmp	r2, #0
 800e482:	d1cb      	bne.n	800e41c <quorem+0x94>
 800e484:	3c01      	subs	r4, #1
 800e486:	e7c6      	b.n	800e416 <quorem+0x8e>
 800e488:	6812      	ldr	r2, [r2, #0]
 800e48a:	3b04      	subs	r3, #4
 800e48c:	2a00      	cmp	r2, #0
 800e48e:	d1ef      	bne.n	800e470 <quorem+0xe8>
 800e490:	3c01      	subs	r4, #1
 800e492:	e7ea      	b.n	800e46a <quorem+0xe2>
 800e494:	2000      	movs	r0, #0
 800e496:	e7ee      	b.n	800e476 <quorem+0xee>

0800e498 <_dtoa_r>:
 800e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49c:	69c7      	ldr	r7, [r0, #28]
 800e49e:	b099      	sub	sp, #100	@ 0x64
 800e4a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e4a4:	ec55 4b10 	vmov	r4, r5, d0
 800e4a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e4aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800e4ac:	4683      	mov	fp, r0
 800e4ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800e4b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e4b2:	b97f      	cbnz	r7, 800e4d4 <_dtoa_r+0x3c>
 800e4b4:	2010      	movs	r0, #16
 800e4b6:	f7fd fedf 	bl	800c278 <malloc>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800e4c0:	b920      	cbnz	r0, 800e4cc <_dtoa_r+0x34>
 800e4c2:	4ba7      	ldr	r3, [pc, #668]	@ (800e760 <_dtoa_r+0x2c8>)
 800e4c4:	21ef      	movs	r1, #239	@ 0xef
 800e4c6:	48a7      	ldr	r0, [pc, #668]	@ (800e764 <_dtoa_r+0x2cc>)
 800e4c8:	f7ff ff40 	bl	800e34c <__assert_func>
 800e4cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e4d0:	6007      	str	r7, [r0, #0]
 800e4d2:	60c7      	str	r7, [r0, #12]
 800e4d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4d8:	6819      	ldr	r1, [r3, #0]
 800e4da:	b159      	cbz	r1, 800e4f4 <_dtoa_r+0x5c>
 800e4dc:	685a      	ldr	r2, [r3, #4]
 800e4de:	604a      	str	r2, [r1, #4]
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	4093      	lsls	r3, r2
 800e4e4:	608b      	str	r3, [r1, #8]
 800e4e6:	4658      	mov	r0, fp
 800e4e8:	f001 f970 	bl	800f7cc <_Bfree>
 800e4ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	1e2b      	subs	r3, r5, #0
 800e4f6:	bfb9      	ittee	lt
 800e4f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e4fc:	9303      	strlt	r3, [sp, #12]
 800e4fe:	2300      	movge	r3, #0
 800e500:	6033      	strge	r3, [r6, #0]
 800e502:	9f03      	ldr	r7, [sp, #12]
 800e504:	4b98      	ldr	r3, [pc, #608]	@ (800e768 <_dtoa_r+0x2d0>)
 800e506:	bfbc      	itt	lt
 800e508:	2201      	movlt	r2, #1
 800e50a:	6032      	strlt	r2, [r6, #0]
 800e50c:	43bb      	bics	r3, r7
 800e50e:	d112      	bne.n	800e536 <_dtoa_r+0x9e>
 800e510:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e512:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e516:	6013      	str	r3, [r2, #0]
 800e518:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e51c:	4323      	orrs	r3, r4
 800e51e:	f000 854d 	beq.w	800efbc <_dtoa_r+0xb24>
 800e522:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e524:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e77c <_dtoa_r+0x2e4>
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f000 854f 	beq.w	800efcc <_dtoa_r+0xb34>
 800e52e:	f10a 0303 	add.w	r3, sl, #3
 800e532:	f000 bd49 	b.w	800efc8 <_dtoa_r+0xb30>
 800e536:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e53a:	2200      	movs	r2, #0
 800e53c:	ec51 0b17 	vmov	r0, r1, d7
 800e540:	2300      	movs	r3, #0
 800e542:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e546:	f7f2 facf 	bl	8000ae8 <__aeabi_dcmpeq>
 800e54a:	4680      	mov	r8, r0
 800e54c:	b158      	cbz	r0, 800e566 <_dtoa_r+0xce>
 800e54e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e550:	2301      	movs	r3, #1
 800e552:	6013      	str	r3, [r2, #0]
 800e554:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e556:	b113      	cbz	r3, 800e55e <_dtoa_r+0xc6>
 800e558:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e55a:	4b84      	ldr	r3, [pc, #528]	@ (800e76c <_dtoa_r+0x2d4>)
 800e55c:	6013      	str	r3, [r2, #0]
 800e55e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e780 <_dtoa_r+0x2e8>
 800e562:	f000 bd33 	b.w	800efcc <_dtoa_r+0xb34>
 800e566:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e56a:	aa16      	add	r2, sp, #88	@ 0x58
 800e56c:	a917      	add	r1, sp, #92	@ 0x5c
 800e56e:	4658      	mov	r0, fp
 800e570:	f001 fcd0 	bl	800ff14 <__d2b>
 800e574:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e578:	4681      	mov	r9, r0
 800e57a:	2e00      	cmp	r6, #0
 800e57c:	d077      	beq.n	800e66e <_dtoa_r+0x1d6>
 800e57e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e580:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e58c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e590:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e594:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e598:	4619      	mov	r1, r3
 800e59a:	2200      	movs	r2, #0
 800e59c:	4b74      	ldr	r3, [pc, #464]	@ (800e770 <_dtoa_r+0x2d8>)
 800e59e:	f7f1 fe83 	bl	80002a8 <__aeabi_dsub>
 800e5a2:	a369      	add	r3, pc, #420	@ (adr r3, 800e748 <_dtoa_r+0x2b0>)
 800e5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a8:	f7f2 f836 	bl	8000618 <__aeabi_dmul>
 800e5ac:	a368      	add	r3, pc, #416	@ (adr r3, 800e750 <_dtoa_r+0x2b8>)
 800e5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b2:	f7f1 fe7b 	bl	80002ac <__adddf3>
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	460d      	mov	r5, r1
 800e5bc:	f7f1 ffc2 	bl	8000544 <__aeabi_i2d>
 800e5c0:	a365      	add	r3, pc, #404	@ (adr r3, 800e758 <_dtoa_r+0x2c0>)
 800e5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c6:	f7f2 f827 	bl	8000618 <__aeabi_dmul>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	f7f1 fe6b 	bl	80002ac <__adddf3>
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	460d      	mov	r5, r1
 800e5da:	f7f2 facd 	bl	8000b78 <__aeabi_d2iz>
 800e5de:	2200      	movs	r2, #0
 800e5e0:	4607      	mov	r7, r0
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	f7f2 fa88 	bl	8000afc <__aeabi_dcmplt>
 800e5ec:	b140      	cbz	r0, 800e600 <_dtoa_r+0x168>
 800e5ee:	4638      	mov	r0, r7
 800e5f0:	f7f1 ffa8 	bl	8000544 <__aeabi_i2d>
 800e5f4:	4622      	mov	r2, r4
 800e5f6:	462b      	mov	r3, r5
 800e5f8:	f7f2 fa76 	bl	8000ae8 <__aeabi_dcmpeq>
 800e5fc:	b900      	cbnz	r0, 800e600 <_dtoa_r+0x168>
 800e5fe:	3f01      	subs	r7, #1
 800e600:	2f16      	cmp	r7, #22
 800e602:	d851      	bhi.n	800e6a8 <_dtoa_r+0x210>
 800e604:	4b5b      	ldr	r3, [pc, #364]	@ (800e774 <_dtoa_r+0x2dc>)
 800e606:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e612:	f7f2 fa73 	bl	8000afc <__aeabi_dcmplt>
 800e616:	2800      	cmp	r0, #0
 800e618:	d048      	beq.n	800e6ac <_dtoa_r+0x214>
 800e61a:	3f01      	subs	r7, #1
 800e61c:	2300      	movs	r3, #0
 800e61e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e620:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e622:	1b9b      	subs	r3, r3, r6
 800e624:	1e5a      	subs	r2, r3, #1
 800e626:	bf44      	itt	mi
 800e628:	f1c3 0801 	rsbmi	r8, r3, #1
 800e62c:	2300      	movmi	r3, #0
 800e62e:	9208      	str	r2, [sp, #32]
 800e630:	bf54      	ite	pl
 800e632:	f04f 0800 	movpl.w	r8, #0
 800e636:	9308      	strmi	r3, [sp, #32]
 800e638:	2f00      	cmp	r7, #0
 800e63a:	db39      	blt.n	800e6b0 <_dtoa_r+0x218>
 800e63c:	9b08      	ldr	r3, [sp, #32]
 800e63e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e640:	443b      	add	r3, r7
 800e642:	9308      	str	r3, [sp, #32]
 800e644:	2300      	movs	r3, #0
 800e646:	930a      	str	r3, [sp, #40]	@ 0x28
 800e648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e64a:	2b09      	cmp	r3, #9
 800e64c:	d864      	bhi.n	800e718 <_dtoa_r+0x280>
 800e64e:	2b05      	cmp	r3, #5
 800e650:	bfc4      	itt	gt
 800e652:	3b04      	subgt	r3, #4
 800e654:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e658:	f1a3 0302 	sub.w	r3, r3, #2
 800e65c:	bfcc      	ite	gt
 800e65e:	2400      	movgt	r4, #0
 800e660:	2401      	movle	r4, #1
 800e662:	2b03      	cmp	r3, #3
 800e664:	d863      	bhi.n	800e72e <_dtoa_r+0x296>
 800e666:	e8df f003 	tbb	[pc, r3]
 800e66a:	372a      	.short	0x372a
 800e66c:	5535      	.short	0x5535
 800e66e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e672:	441e      	add	r6, r3
 800e674:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e678:	2b20      	cmp	r3, #32
 800e67a:	bfc1      	itttt	gt
 800e67c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e680:	409f      	lslgt	r7, r3
 800e682:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e686:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e68a:	bfd6      	itet	le
 800e68c:	f1c3 0320 	rsble	r3, r3, #32
 800e690:	ea47 0003 	orrgt.w	r0, r7, r3
 800e694:	fa04 f003 	lslle.w	r0, r4, r3
 800e698:	f7f1 ff44 	bl	8000524 <__aeabi_ui2d>
 800e69c:	2201      	movs	r2, #1
 800e69e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e6a2:	3e01      	subs	r6, #1
 800e6a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e6a6:	e777      	b.n	800e598 <_dtoa_r+0x100>
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	e7b8      	b.n	800e61e <_dtoa_r+0x186>
 800e6ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800e6ae:	e7b7      	b.n	800e620 <_dtoa_r+0x188>
 800e6b0:	427b      	negs	r3, r7
 800e6b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	eba8 0807 	sub.w	r8, r8, r7
 800e6ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e6bc:	e7c4      	b.n	800e648 <_dtoa_r+0x1b0>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	dc35      	bgt.n	800e734 <_dtoa_r+0x29c>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	9307      	str	r3, [sp, #28]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6d2:	e00b      	b.n	800e6ec <_dtoa_r+0x254>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e7f3      	b.n	800e6c0 <_dtoa_r+0x228>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6de:	18fb      	adds	r3, r7, r3
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	9307      	str	r3, [sp, #28]
 800e6e8:	bfb8      	it	lt
 800e6ea:	2301      	movlt	r3, #1
 800e6ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	2204      	movs	r2, #4
 800e6f4:	f102 0514 	add.w	r5, r2, #20
 800e6f8:	429d      	cmp	r5, r3
 800e6fa:	d91f      	bls.n	800e73c <_dtoa_r+0x2a4>
 800e6fc:	6041      	str	r1, [r0, #4]
 800e6fe:	4658      	mov	r0, fp
 800e700:	f001 f824 	bl	800f74c <_Balloc>
 800e704:	4682      	mov	sl, r0
 800e706:	2800      	cmp	r0, #0
 800e708:	d13c      	bne.n	800e784 <_dtoa_r+0x2ec>
 800e70a:	4b1b      	ldr	r3, [pc, #108]	@ (800e778 <_dtoa_r+0x2e0>)
 800e70c:	4602      	mov	r2, r0
 800e70e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e712:	e6d8      	b.n	800e4c6 <_dtoa_r+0x2e>
 800e714:	2301      	movs	r3, #1
 800e716:	e7e0      	b.n	800e6da <_dtoa_r+0x242>
 800e718:	2401      	movs	r4, #1
 800e71a:	2300      	movs	r3, #0
 800e71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e71e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e720:	f04f 33ff 	mov.w	r3, #4294967295
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	9307      	str	r3, [sp, #28]
 800e728:	2200      	movs	r2, #0
 800e72a:	2312      	movs	r3, #18
 800e72c:	e7d0      	b.n	800e6d0 <_dtoa_r+0x238>
 800e72e:	2301      	movs	r3, #1
 800e730:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e732:	e7f5      	b.n	800e720 <_dtoa_r+0x288>
 800e734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	9307      	str	r3, [sp, #28]
 800e73a:	e7d7      	b.n	800e6ec <_dtoa_r+0x254>
 800e73c:	3101      	adds	r1, #1
 800e73e:	0052      	lsls	r2, r2, #1
 800e740:	e7d8      	b.n	800e6f4 <_dtoa_r+0x25c>
 800e742:	bf00      	nop
 800e744:	f3af 8000 	nop.w
 800e748:	636f4361 	.word	0x636f4361
 800e74c:	3fd287a7 	.word	0x3fd287a7
 800e750:	8b60c8b3 	.word	0x8b60c8b3
 800e754:	3fc68a28 	.word	0x3fc68a28
 800e758:	509f79fb 	.word	0x509f79fb
 800e75c:	3fd34413 	.word	0x3fd34413
 800e760:	08011590 	.word	0x08011590
 800e764:	08011652 	.word	0x08011652
 800e768:	7ff00000 	.word	0x7ff00000
 800e76c:	08011898 	.word	0x08011898
 800e770:	3ff80000 	.word	0x3ff80000
 800e774:	080117a8 	.word	0x080117a8
 800e778:	080116aa 	.word	0x080116aa
 800e77c:	0801164e 	.word	0x0801164e
 800e780:	08011897 	.word	0x08011897
 800e784:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e788:	6018      	str	r0, [r3, #0]
 800e78a:	9b07      	ldr	r3, [sp, #28]
 800e78c:	2b0e      	cmp	r3, #14
 800e78e:	f200 80a4 	bhi.w	800e8da <_dtoa_r+0x442>
 800e792:	2c00      	cmp	r4, #0
 800e794:	f000 80a1 	beq.w	800e8da <_dtoa_r+0x442>
 800e798:	2f00      	cmp	r7, #0
 800e79a:	dd33      	ble.n	800e804 <_dtoa_r+0x36c>
 800e79c:	4bad      	ldr	r3, [pc, #692]	@ (800ea54 <_dtoa_r+0x5bc>)
 800e79e:	f007 020f 	and.w	r2, r7, #15
 800e7a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7a6:	ed93 7b00 	vldr	d7, [r3]
 800e7aa:	05f8      	lsls	r0, r7, #23
 800e7ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e7b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e7b4:	d516      	bpl.n	800e7e4 <_dtoa_r+0x34c>
 800e7b6:	4ba8      	ldr	r3, [pc, #672]	@ (800ea58 <_dtoa_r+0x5c0>)
 800e7b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e7bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e7c0:	f7f2 f854 	bl	800086c <__aeabi_ddiv>
 800e7c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7c8:	f004 040f 	and.w	r4, r4, #15
 800e7cc:	2603      	movs	r6, #3
 800e7ce:	4da2      	ldr	r5, [pc, #648]	@ (800ea58 <_dtoa_r+0x5c0>)
 800e7d0:	b954      	cbnz	r4, 800e7e8 <_dtoa_r+0x350>
 800e7d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7da:	f7f2 f847 	bl	800086c <__aeabi_ddiv>
 800e7de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7e2:	e028      	b.n	800e836 <_dtoa_r+0x39e>
 800e7e4:	2602      	movs	r6, #2
 800e7e6:	e7f2      	b.n	800e7ce <_dtoa_r+0x336>
 800e7e8:	07e1      	lsls	r1, r4, #31
 800e7ea:	d508      	bpl.n	800e7fe <_dtoa_r+0x366>
 800e7ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e7f4:	f7f1 ff10 	bl	8000618 <__aeabi_dmul>
 800e7f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7fc:	3601      	adds	r6, #1
 800e7fe:	1064      	asrs	r4, r4, #1
 800e800:	3508      	adds	r5, #8
 800e802:	e7e5      	b.n	800e7d0 <_dtoa_r+0x338>
 800e804:	f000 80d2 	beq.w	800e9ac <_dtoa_r+0x514>
 800e808:	427c      	negs	r4, r7
 800e80a:	4b92      	ldr	r3, [pc, #584]	@ (800ea54 <_dtoa_r+0x5bc>)
 800e80c:	4d92      	ldr	r5, [pc, #584]	@ (800ea58 <_dtoa_r+0x5c0>)
 800e80e:	f004 020f 	and.w	r2, r4, #15
 800e812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e81e:	f7f1 fefb 	bl	8000618 <__aeabi_dmul>
 800e822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e826:	1124      	asrs	r4, r4, #4
 800e828:	2300      	movs	r3, #0
 800e82a:	2602      	movs	r6, #2
 800e82c:	2c00      	cmp	r4, #0
 800e82e:	f040 80b2 	bne.w	800e996 <_dtoa_r+0x4fe>
 800e832:	2b00      	cmp	r3, #0
 800e834:	d1d3      	bne.n	800e7de <_dtoa_r+0x346>
 800e836:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e838:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f000 80b7 	beq.w	800e9b0 <_dtoa_r+0x518>
 800e842:	4b86      	ldr	r3, [pc, #536]	@ (800ea5c <_dtoa_r+0x5c4>)
 800e844:	2200      	movs	r2, #0
 800e846:	4620      	mov	r0, r4
 800e848:	4629      	mov	r1, r5
 800e84a:	f7f2 f957 	bl	8000afc <__aeabi_dcmplt>
 800e84e:	2800      	cmp	r0, #0
 800e850:	f000 80ae 	beq.w	800e9b0 <_dtoa_r+0x518>
 800e854:	9b07      	ldr	r3, [sp, #28]
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 80aa 	beq.w	800e9b0 <_dtoa_r+0x518>
 800e85c:	9b00      	ldr	r3, [sp, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	dd37      	ble.n	800e8d2 <_dtoa_r+0x43a>
 800e862:	1e7b      	subs	r3, r7, #1
 800e864:	9304      	str	r3, [sp, #16]
 800e866:	4620      	mov	r0, r4
 800e868:	4b7d      	ldr	r3, [pc, #500]	@ (800ea60 <_dtoa_r+0x5c8>)
 800e86a:	2200      	movs	r2, #0
 800e86c:	4629      	mov	r1, r5
 800e86e:	f7f1 fed3 	bl	8000618 <__aeabi_dmul>
 800e872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e876:	9c00      	ldr	r4, [sp, #0]
 800e878:	3601      	adds	r6, #1
 800e87a:	4630      	mov	r0, r6
 800e87c:	f7f1 fe62 	bl	8000544 <__aeabi_i2d>
 800e880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e884:	f7f1 fec8 	bl	8000618 <__aeabi_dmul>
 800e888:	4b76      	ldr	r3, [pc, #472]	@ (800ea64 <_dtoa_r+0x5cc>)
 800e88a:	2200      	movs	r2, #0
 800e88c:	f7f1 fd0e 	bl	80002ac <__adddf3>
 800e890:	4605      	mov	r5, r0
 800e892:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e896:	2c00      	cmp	r4, #0
 800e898:	f040 808d 	bne.w	800e9b6 <_dtoa_r+0x51e>
 800e89c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8a0:	4b71      	ldr	r3, [pc, #452]	@ (800ea68 <_dtoa_r+0x5d0>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f7f1 fd00 	bl	80002a8 <__aeabi_dsub>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8b0:	462a      	mov	r2, r5
 800e8b2:	4633      	mov	r3, r6
 800e8b4:	f7f2 f940 	bl	8000b38 <__aeabi_dcmpgt>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	f040 828b 	bne.w	800edd4 <_dtoa_r+0x93c>
 800e8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8c2:	462a      	mov	r2, r5
 800e8c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e8c8:	f7f2 f918 	bl	8000afc <__aeabi_dcmplt>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	f040 8128 	bne.w	800eb22 <_dtoa_r+0x68a>
 800e8d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e8d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e8da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f2c0 815a 	blt.w	800eb96 <_dtoa_r+0x6fe>
 800e8e2:	2f0e      	cmp	r7, #14
 800e8e4:	f300 8157 	bgt.w	800eb96 <_dtoa_r+0x6fe>
 800e8e8:	4b5a      	ldr	r3, [pc, #360]	@ (800ea54 <_dtoa_r+0x5bc>)
 800e8ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e8ee:	ed93 7b00 	vldr	d7, [r3]
 800e8f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	ed8d 7b00 	vstr	d7, [sp]
 800e8fa:	da03      	bge.n	800e904 <_dtoa_r+0x46c>
 800e8fc:	9b07      	ldr	r3, [sp, #28]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	f340 8101 	ble.w	800eb06 <_dtoa_r+0x66e>
 800e904:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e908:	4656      	mov	r6, sl
 800e90a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e90e:	4620      	mov	r0, r4
 800e910:	4629      	mov	r1, r5
 800e912:	f7f1 ffab 	bl	800086c <__aeabi_ddiv>
 800e916:	f7f2 f92f 	bl	8000b78 <__aeabi_d2iz>
 800e91a:	4680      	mov	r8, r0
 800e91c:	f7f1 fe12 	bl	8000544 <__aeabi_i2d>
 800e920:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e924:	f7f1 fe78 	bl	8000618 <__aeabi_dmul>
 800e928:	4602      	mov	r2, r0
 800e92a:	460b      	mov	r3, r1
 800e92c:	4620      	mov	r0, r4
 800e92e:	4629      	mov	r1, r5
 800e930:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e934:	f7f1 fcb8 	bl	80002a8 <__aeabi_dsub>
 800e938:	f806 4b01 	strb.w	r4, [r6], #1
 800e93c:	9d07      	ldr	r5, [sp, #28]
 800e93e:	eba6 040a 	sub.w	r4, r6, sl
 800e942:	42a5      	cmp	r5, r4
 800e944:	4602      	mov	r2, r0
 800e946:	460b      	mov	r3, r1
 800e948:	f040 8117 	bne.w	800eb7a <_dtoa_r+0x6e2>
 800e94c:	f7f1 fcae 	bl	80002ac <__adddf3>
 800e950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e954:	4604      	mov	r4, r0
 800e956:	460d      	mov	r5, r1
 800e958:	f7f2 f8ee 	bl	8000b38 <__aeabi_dcmpgt>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	f040 80f9 	bne.w	800eb54 <_dtoa_r+0x6bc>
 800e962:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e966:	4620      	mov	r0, r4
 800e968:	4629      	mov	r1, r5
 800e96a:	f7f2 f8bd 	bl	8000ae8 <__aeabi_dcmpeq>
 800e96e:	b118      	cbz	r0, 800e978 <_dtoa_r+0x4e0>
 800e970:	f018 0f01 	tst.w	r8, #1
 800e974:	f040 80ee 	bne.w	800eb54 <_dtoa_r+0x6bc>
 800e978:	4649      	mov	r1, r9
 800e97a:	4658      	mov	r0, fp
 800e97c:	f000 ff26 	bl	800f7cc <_Bfree>
 800e980:	2300      	movs	r3, #0
 800e982:	7033      	strb	r3, [r6, #0]
 800e984:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e986:	3701      	adds	r7, #1
 800e988:	601f      	str	r7, [r3, #0]
 800e98a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f000 831d 	beq.w	800efcc <_dtoa_r+0xb34>
 800e992:	601e      	str	r6, [r3, #0]
 800e994:	e31a      	b.n	800efcc <_dtoa_r+0xb34>
 800e996:	07e2      	lsls	r2, r4, #31
 800e998:	d505      	bpl.n	800e9a6 <_dtoa_r+0x50e>
 800e99a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e99e:	f7f1 fe3b 	bl	8000618 <__aeabi_dmul>
 800e9a2:	3601      	adds	r6, #1
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	1064      	asrs	r4, r4, #1
 800e9a8:	3508      	adds	r5, #8
 800e9aa:	e73f      	b.n	800e82c <_dtoa_r+0x394>
 800e9ac:	2602      	movs	r6, #2
 800e9ae:	e742      	b.n	800e836 <_dtoa_r+0x39e>
 800e9b0:	9c07      	ldr	r4, [sp, #28]
 800e9b2:	9704      	str	r7, [sp, #16]
 800e9b4:	e761      	b.n	800e87a <_dtoa_r+0x3e2>
 800e9b6:	4b27      	ldr	r3, [pc, #156]	@ (800ea54 <_dtoa_r+0x5bc>)
 800e9b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9c2:	4454      	add	r4, sl
 800e9c4:	2900      	cmp	r1, #0
 800e9c6:	d053      	beq.n	800ea70 <_dtoa_r+0x5d8>
 800e9c8:	4928      	ldr	r1, [pc, #160]	@ (800ea6c <_dtoa_r+0x5d4>)
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	f7f1 ff4e 	bl	800086c <__aeabi_ddiv>
 800e9d0:	4633      	mov	r3, r6
 800e9d2:	462a      	mov	r2, r5
 800e9d4:	f7f1 fc68 	bl	80002a8 <__aeabi_dsub>
 800e9d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e9dc:	4656      	mov	r6, sl
 800e9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9e2:	f7f2 f8c9 	bl	8000b78 <__aeabi_d2iz>
 800e9e6:	4605      	mov	r5, r0
 800e9e8:	f7f1 fdac 	bl	8000544 <__aeabi_i2d>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9f4:	f7f1 fc58 	bl	80002a8 <__aeabi_dsub>
 800e9f8:	3530      	adds	r5, #48	@ 0x30
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea02:	f806 5b01 	strb.w	r5, [r6], #1
 800ea06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea0a:	f7f2 f877 	bl	8000afc <__aeabi_dcmplt>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	d171      	bne.n	800eaf6 <_dtoa_r+0x65e>
 800ea12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea16:	4911      	ldr	r1, [pc, #68]	@ (800ea5c <_dtoa_r+0x5c4>)
 800ea18:	2000      	movs	r0, #0
 800ea1a:	f7f1 fc45 	bl	80002a8 <__aeabi_dsub>
 800ea1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea22:	f7f2 f86b 	bl	8000afc <__aeabi_dcmplt>
 800ea26:	2800      	cmp	r0, #0
 800ea28:	f040 8095 	bne.w	800eb56 <_dtoa_r+0x6be>
 800ea2c:	42a6      	cmp	r6, r4
 800ea2e:	f43f af50 	beq.w	800e8d2 <_dtoa_r+0x43a>
 800ea32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ea36:	4b0a      	ldr	r3, [pc, #40]	@ (800ea60 <_dtoa_r+0x5c8>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f7f1 fded 	bl	8000618 <__aeabi_dmul>
 800ea3e:	4b08      	ldr	r3, [pc, #32]	@ (800ea60 <_dtoa_r+0x5c8>)
 800ea40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea44:	2200      	movs	r2, #0
 800ea46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea4a:	f7f1 fde5 	bl	8000618 <__aeabi_dmul>
 800ea4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea52:	e7c4      	b.n	800e9de <_dtoa_r+0x546>
 800ea54:	080117a8 	.word	0x080117a8
 800ea58:	08011780 	.word	0x08011780
 800ea5c:	3ff00000 	.word	0x3ff00000
 800ea60:	40240000 	.word	0x40240000
 800ea64:	401c0000 	.word	0x401c0000
 800ea68:	40140000 	.word	0x40140000
 800ea6c:	3fe00000 	.word	0x3fe00000
 800ea70:	4631      	mov	r1, r6
 800ea72:	4628      	mov	r0, r5
 800ea74:	f7f1 fdd0 	bl	8000618 <__aeabi_dmul>
 800ea78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea7c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ea7e:	4656      	mov	r6, sl
 800ea80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea84:	f7f2 f878 	bl	8000b78 <__aeabi_d2iz>
 800ea88:	4605      	mov	r5, r0
 800ea8a:	f7f1 fd5b 	bl	8000544 <__aeabi_i2d>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	460b      	mov	r3, r1
 800ea92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea96:	f7f1 fc07 	bl	80002a8 <__aeabi_dsub>
 800ea9a:	3530      	adds	r5, #48	@ 0x30
 800ea9c:	f806 5b01 	strb.w	r5, [r6], #1
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	42a6      	cmp	r6, r4
 800eaa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eaaa:	f04f 0200 	mov.w	r2, #0
 800eaae:	d124      	bne.n	800eafa <_dtoa_r+0x662>
 800eab0:	4bac      	ldr	r3, [pc, #688]	@ (800ed64 <_dtoa_r+0x8cc>)
 800eab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eab6:	f7f1 fbf9 	bl	80002ac <__adddf3>
 800eaba:	4602      	mov	r2, r0
 800eabc:	460b      	mov	r3, r1
 800eabe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eac2:	f7f2 f839 	bl	8000b38 <__aeabi_dcmpgt>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d145      	bne.n	800eb56 <_dtoa_r+0x6be>
 800eaca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eace:	49a5      	ldr	r1, [pc, #660]	@ (800ed64 <_dtoa_r+0x8cc>)
 800ead0:	2000      	movs	r0, #0
 800ead2:	f7f1 fbe9 	bl	80002a8 <__aeabi_dsub>
 800ead6:	4602      	mov	r2, r0
 800ead8:	460b      	mov	r3, r1
 800eada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eade:	f7f2 f80d 	bl	8000afc <__aeabi_dcmplt>
 800eae2:	2800      	cmp	r0, #0
 800eae4:	f43f aef5 	beq.w	800e8d2 <_dtoa_r+0x43a>
 800eae8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800eaea:	1e73      	subs	r3, r6, #1
 800eaec:	9315      	str	r3, [sp, #84]	@ 0x54
 800eaee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eaf2:	2b30      	cmp	r3, #48	@ 0x30
 800eaf4:	d0f8      	beq.n	800eae8 <_dtoa_r+0x650>
 800eaf6:	9f04      	ldr	r7, [sp, #16]
 800eaf8:	e73e      	b.n	800e978 <_dtoa_r+0x4e0>
 800eafa:	4b9b      	ldr	r3, [pc, #620]	@ (800ed68 <_dtoa_r+0x8d0>)
 800eafc:	f7f1 fd8c 	bl	8000618 <__aeabi_dmul>
 800eb00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb04:	e7bc      	b.n	800ea80 <_dtoa_r+0x5e8>
 800eb06:	d10c      	bne.n	800eb22 <_dtoa_r+0x68a>
 800eb08:	4b98      	ldr	r3, [pc, #608]	@ (800ed6c <_dtoa_r+0x8d4>)
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb10:	f7f1 fd82 	bl	8000618 <__aeabi_dmul>
 800eb14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb18:	f7f2 f804 	bl	8000b24 <__aeabi_dcmpge>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	f000 8157 	beq.w	800edd0 <_dtoa_r+0x938>
 800eb22:	2400      	movs	r4, #0
 800eb24:	4625      	mov	r5, r4
 800eb26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb28:	43db      	mvns	r3, r3
 800eb2a:	9304      	str	r3, [sp, #16]
 800eb2c:	4656      	mov	r6, sl
 800eb2e:	2700      	movs	r7, #0
 800eb30:	4621      	mov	r1, r4
 800eb32:	4658      	mov	r0, fp
 800eb34:	f000 fe4a 	bl	800f7cc <_Bfree>
 800eb38:	2d00      	cmp	r5, #0
 800eb3a:	d0dc      	beq.n	800eaf6 <_dtoa_r+0x65e>
 800eb3c:	b12f      	cbz	r7, 800eb4a <_dtoa_r+0x6b2>
 800eb3e:	42af      	cmp	r7, r5
 800eb40:	d003      	beq.n	800eb4a <_dtoa_r+0x6b2>
 800eb42:	4639      	mov	r1, r7
 800eb44:	4658      	mov	r0, fp
 800eb46:	f000 fe41 	bl	800f7cc <_Bfree>
 800eb4a:	4629      	mov	r1, r5
 800eb4c:	4658      	mov	r0, fp
 800eb4e:	f000 fe3d 	bl	800f7cc <_Bfree>
 800eb52:	e7d0      	b.n	800eaf6 <_dtoa_r+0x65e>
 800eb54:	9704      	str	r7, [sp, #16]
 800eb56:	4633      	mov	r3, r6
 800eb58:	461e      	mov	r6, r3
 800eb5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb5e:	2a39      	cmp	r2, #57	@ 0x39
 800eb60:	d107      	bne.n	800eb72 <_dtoa_r+0x6da>
 800eb62:	459a      	cmp	sl, r3
 800eb64:	d1f8      	bne.n	800eb58 <_dtoa_r+0x6c0>
 800eb66:	9a04      	ldr	r2, [sp, #16]
 800eb68:	3201      	adds	r2, #1
 800eb6a:	9204      	str	r2, [sp, #16]
 800eb6c:	2230      	movs	r2, #48	@ 0x30
 800eb6e:	f88a 2000 	strb.w	r2, [sl]
 800eb72:	781a      	ldrb	r2, [r3, #0]
 800eb74:	3201      	adds	r2, #1
 800eb76:	701a      	strb	r2, [r3, #0]
 800eb78:	e7bd      	b.n	800eaf6 <_dtoa_r+0x65e>
 800eb7a:	4b7b      	ldr	r3, [pc, #492]	@ (800ed68 <_dtoa_r+0x8d0>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f7f1 fd4b 	bl	8000618 <__aeabi_dmul>
 800eb82:	2200      	movs	r2, #0
 800eb84:	2300      	movs	r3, #0
 800eb86:	4604      	mov	r4, r0
 800eb88:	460d      	mov	r5, r1
 800eb8a:	f7f1 ffad 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	f43f aebb 	beq.w	800e90a <_dtoa_r+0x472>
 800eb94:	e6f0      	b.n	800e978 <_dtoa_r+0x4e0>
 800eb96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eb98:	2a00      	cmp	r2, #0
 800eb9a:	f000 80db 	beq.w	800ed54 <_dtoa_r+0x8bc>
 800eb9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eba0:	2a01      	cmp	r2, #1
 800eba2:	f300 80bf 	bgt.w	800ed24 <_dtoa_r+0x88c>
 800eba6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800eba8:	2a00      	cmp	r2, #0
 800ebaa:	f000 80b7 	beq.w	800ed1c <_dtoa_r+0x884>
 800ebae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ebb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ebb4:	4646      	mov	r6, r8
 800ebb6:	9a08      	ldr	r2, [sp, #32]
 800ebb8:	2101      	movs	r1, #1
 800ebba:	441a      	add	r2, r3
 800ebbc:	4658      	mov	r0, fp
 800ebbe:	4498      	add	r8, r3
 800ebc0:	9208      	str	r2, [sp, #32]
 800ebc2:	f000 ff01 	bl	800f9c8 <__i2b>
 800ebc6:	4605      	mov	r5, r0
 800ebc8:	b15e      	cbz	r6, 800ebe2 <_dtoa_r+0x74a>
 800ebca:	9b08      	ldr	r3, [sp, #32]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	dd08      	ble.n	800ebe2 <_dtoa_r+0x74a>
 800ebd0:	42b3      	cmp	r3, r6
 800ebd2:	9a08      	ldr	r2, [sp, #32]
 800ebd4:	bfa8      	it	ge
 800ebd6:	4633      	movge	r3, r6
 800ebd8:	eba8 0803 	sub.w	r8, r8, r3
 800ebdc:	1af6      	subs	r6, r6, r3
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	9308      	str	r3, [sp, #32]
 800ebe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebe4:	b1f3      	cbz	r3, 800ec24 <_dtoa_r+0x78c>
 800ebe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	f000 80b7 	beq.w	800ed5c <_dtoa_r+0x8c4>
 800ebee:	b18c      	cbz	r4, 800ec14 <_dtoa_r+0x77c>
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	4622      	mov	r2, r4
 800ebf4:	4658      	mov	r0, fp
 800ebf6:	f000 ffa7 	bl	800fb48 <__pow5mult>
 800ebfa:	464a      	mov	r2, r9
 800ebfc:	4601      	mov	r1, r0
 800ebfe:	4605      	mov	r5, r0
 800ec00:	4658      	mov	r0, fp
 800ec02:	f000 fef7 	bl	800f9f4 <__multiply>
 800ec06:	4649      	mov	r1, r9
 800ec08:	9004      	str	r0, [sp, #16]
 800ec0a:	4658      	mov	r0, fp
 800ec0c:	f000 fdde 	bl	800f7cc <_Bfree>
 800ec10:	9b04      	ldr	r3, [sp, #16]
 800ec12:	4699      	mov	r9, r3
 800ec14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec16:	1b1a      	subs	r2, r3, r4
 800ec18:	d004      	beq.n	800ec24 <_dtoa_r+0x78c>
 800ec1a:	4649      	mov	r1, r9
 800ec1c:	4658      	mov	r0, fp
 800ec1e:	f000 ff93 	bl	800fb48 <__pow5mult>
 800ec22:	4681      	mov	r9, r0
 800ec24:	2101      	movs	r1, #1
 800ec26:	4658      	mov	r0, fp
 800ec28:	f000 fece 	bl	800f9c8 <__i2b>
 800ec2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec2e:	4604      	mov	r4, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f000 81cf 	beq.w	800efd4 <_dtoa_r+0xb3c>
 800ec36:	461a      	mov	r2, r3
 800ec38:	4601      	mov	r1, r0
 800ec3a:	4658      	mov	r0, fp
 800ec3c:	f000 ff84 	bl	800fb48 <__pow5mult>
 800ec40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec42:	2b01      	cmp	r3, #1
 800ec44:	4604      	mov	r4, r0
 800ec46:	f300 8095 	bgt.w	800ed74 <_dtoa_r+0x8dc>
 800ec4a:	9b02      	ldr	r3, [sp, #8]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f040 8087 	bne.w	800ed60 <_dtoa_r+0x8c8>
 800ec52:	9b03      	ldr	r3, [sp, #12]
 800ec54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f040 8089 	bne.w	800ed70 <_dtoa_r+0x8d8>
 800ec5e:	9b03      	ldr	r3, [sp, #12]
 800ec60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec64:	0d1b      	lsrs	r3, r3, #20
 800ec66:	051b      	lsls	r3, r3, #20
 800ec68:	b12b      	cbz	r3, 800ec76 <_dtoa_r+0x7de>
 800ec6a:	9b08      	ldr	r3, [sp, #32]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	9308      	str	r3, [sp, #32]
 800ec70:	f108 0801 	add.w	r8, r8, #1
 800ec74:	2301      	movs	r3, #1
 800ec76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f000 81b0 	beq.w	800efe0 <_dtoa_r+0xb48>
 800ec80:	6923      	ldr	r3, [r4, #16]
 800ec82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec86:	6918      	ldr	r0, [r3, #16]
 800ec88:	f000 fe52 	bl	800f930 <__hi0bits>
 800ec8c:	f1c0 0020 	rsb	r0, r0, #32
 800ec90:	9b08      	ldr	r3, [sp, #32]
 800ec92:	4418      	add	r0, r3
 800ec94:	f010 001f 	ands.w	r0, r0, #31
 800ec98:	d077      	beq.n	800ed8a <_dtoa_r+0x8f2>
 800ec9a:	f1c0 0320 	rsb	r3, r0, #32
 800ec9e:	2b04      	cmp	r3, #4
 800eca0:	dd6b      	ble.n	800ed7a <_dtoa_r+0x8e2>
 800eca2:	9b08      	ldr	r3, [sp, #32]
 800eca4:	f1c0 001c 	rsb	r0, r0, #28
 800eca8:	4403      	add	r3, r0
 800ecaa:	4480      	add	r8, r0
 800ecac:	4406      	add	r6, r0
 800ecae:	9308      	str	r3, [sp, #32]
 800ecb0:	f1b8 0f00 	cmp.w	r8, #0
 800ecb4:	dd05      	ble.n	800ecc2 <_dtoa_r+0x82a>
 800ecb6:	4649      	mov	r1, r9
 800ecb8:	4642      	mov	r2, r8
 800ecba:	4658      	mov	r0, fp
 800ecbc:	f000 ff9e 	bl	800fbfc <__lshift>
 800ecc0:	4681      	mov	r9, r0
 800ecc2:	9b08      	ldr	r3, [sp, #32]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	dd05      	ble.n	800ecd4 <_dtoa_r+0x83c>
 800ecc8:	4621      	mov	r1, r4
 800ecca:	461a      	mov	r2, r3
 800eccc:	4658      	mov	r0, fp
 800ecce:	f000 ff95 	bl	800fbfc <__lshift>
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d059      	beq.n	800ed8e <_dtoa_r+0x8f6>
 800ecda:	4621      	mov	r1, r4
 800ecdc:	4648      	mov	r0, r9
 800ecde:	f000 fff9 	bl	800fcd4 <__mcmp>
 800ece2:	2800      	cmp	r0, #0
 800ece4:	da53      	bge.n	800ed8e <_dtoa_r+0x8f6>
 800ece6:	1e7b      	subs	r3, r7, #1
 800ece8:	9304      	str	r3, [sp, #16]
 800ecea:	4649      	mov	r1, r9
 800ecec:	2300      	movs	r3, #0
 800ecee:	220a      	movs	r2, #10
 800ecf0:	4658      	mov	r0, fp
 800ecf2:	f000 fd8d 	bl	800f810 <__multadd>
 800ecf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecf8:	4681      	mov	r9, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f000 8172 	beq.w	800efe4 <_dtoa_r+0xb4c>
 800ed00:	2300      	movs	r3, #0
 800ed02:	4629      	mov	r1, r5
 800ed04:	220a      	movs	r2, #10
 800ed06:	4658      	mov	r0, fp
 800ed08:	f000 fd82 	bl	800f810 <__multadd>
 800ed0c:	9b00      	ldr	r3, [sp, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	4605      	mov	r5, r0
 800ed12:	dc67      	bgt.n	800ede4 <_dtoa_r+0x94c>
 800ed14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	dc41      	bgt.n	800ed9e <_dtoa_r+0x906>
 800ed1a:	e063      	b.n	800ede4 <_dtoa_r+0x94c>
 800ed1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ed1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ed22:	e746      	b.n	800ebb2 <_dtoa_r+0x71a>
 800ed24:	9b07      	ldr	r3, [sp, #28]
 800ed26:	1e5c      	subs	r4, r3, #1
 800ed28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed2a:	42a3      	cmp	r3, r4
 800ed2c:	bfbf      	itttt	lt
 800ed2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ed30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ed32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ed34:	1ae3      	sublt	r3, r4, r3
 800ed36:	bfb4      	ite	lt
 800ed38:	18d2      	addlt	r2, r2, r3
 800ed3a:	1b1c      	subge	r4, r3, r4
 800ed3c:	9b07      	ldr	r3, [sp, #28]
 800ed3e:	bfbc      	itt	lt
 800ed40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ed42:	2400      	movlt	r4, #0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	bfb5      	itete	lt
 800ed48:	eba8 0603 	sublt.w	r6, r8, r3
 800ed4c:	9b07      	ldrge	r3, [sp, #28]
 800ed4e:	2300      	movlt	r3, #0
 800ed50:	4646      	movge	r6, r8
 800ed52:	e730      	b.n	800ebb6 <_dtoa_r+0x71e>
 800ed54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ed56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ed58:	4646      	mov	r6, r8
 800ed5a:	e735      	b.n	800ebc8 <_dtoa_r+0x730>
 800ed5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed5e:	e75c      	b.n	800ec1a <_dtoa_r+0x782>
 800ed60:	2300      	movs	r3, #0
 800ed62:	e788      	b.n	800ec76 <_dtoa_r+0x7de>
 800ed64:	3fe00000 	.word	0x3fe00000
 800ed68:	40240000 	.word	0x40240000
 800ed6c:	40140000 	.word	0x40140000
 800ed70:	9b02      	ldr	r3, [sp, #8]
 800ed72:	e780      	b.n	800ec76 <_dtoa_r+0x7de>
 800ed74:	2300      	movs	r3, #0
 800ed76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed78:	e782      	b.n	800ec80 <_dtoa_r+0x7e8>
 800ed7a:	d099      	beq.n	800ecb0 <_dtoa_r+0x818>
 800ed7c:	9a08      	ldr	r2, [sp, #32]
 800ed7e:	331c      	adds	r3, #28
 800ed80:	441a      	add	r2, r3
 800ed82:	4498      	add	r8, r3
 800ed84:	441e      	add	r6, r3
 800ed86:	9208      	str	r2, [sp, #32]
 800ed88:	e792      	b.n	800ecb0 <_dtoa_r+0x818>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	e7f6      	b.n	800ed7c <_dtoa_r+0x8e4>
 800ed8e:	9b07      	ldr	r3, [sp, #28]
 800ed90:	9704      	str	r7, [sp, #16]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	dc20      	bgt.n	800edd8 <_dtoa_r+0x940>
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed9a:	2b02      	cmp	r3, #2
 800ed9c:	dd1e      	ble.n	800eddc <_dtoa_r+0x944>
 800ed9e:	9b00      	ldr	r3, [sp, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f47f aec0 	bne.w	800eb26 <_dtoa_r+0x68e>
 800eda6:	4621      	mov	r1, r4
 800eda8:	2205      	movs	r2, #5
 800edaa:	4658      	mov	r0, fp
 800edac:	f000 fd30 	bl	800f810 <__multadd>
 800edb0:	4601      	mov	r1, r0
 800edb2:	4604      	mov	r4, r0
 800edb4:	4648      	mov	r0, r9
 800edb6:	f000 ff8d 	bl	800fcd4 <__mcmp>
 800edba:	2800      	cmp	r0, #0
 800edbc:	f77f aeb3 	ble.w	800eb26 <_dtoa_r+0x68e>
 800edc0:	4656      	mov	r6, sl
 800edc2:	2331      	movs	r3, #49	@ 0x31
 800edc4:	f806 3b01 	strb.w	r3, [r6], #1
 800edc8:	9b04      	ldr	r3, [sp, #16]
 800edca:	3301      	adds	r3, #1
 800edcc:	9304      	str	r3, [sp, #16]
 800edce:	e6ae      	b.n	800eb2e <_dtoa_r+0x696>
 800edd0:	9c07      	ldr	r4, [sp, #28]
 800edd2:	9704      	str	r7, [sp, #16]
 800edd4:	4625      	mov	r5, r4
 800edd6:	e7f3      	b.n	800edc0 <_dtoa_r+0x928>
 800edd8:	9b07      	ldr	r3, [sp, #28]
 800edda:	9300      	str	r3, [sp, #0]
 800eddc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edde:	2b00      	cmp	r3, #0
 800ede0:	f000 8104 	beq.w	800efec <_dtoa_r+0xb54>
 800ede4:	2e00      	cmp	r6, #0
 800ede6:	dd05      	ble.n	800edf4 <_dtoa_r+0x95c>
 800ede8:	4629      	mov	r1, r5
 800edea:	4632      	mov	r2, r6
 800edec:	4658      	mov	r0, fp
 800edee:	f000 ff05 	bl	800fbfc <__lshift>
 800edf2:	4605      	mov	r5, r0
 800edf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d05a      	beq.n	800eeb0 <_dtoa_r+0xa18>
 800edfa:	6869      	ldr	r1, [r5, #4]
 800edfc:	4658      	mov	r0, fp
 800edfe:	f000 fca5 	bl	800f74c <_Balloc>
 800ee02:	4606      	mov	r6, r0
 800ee04:	b928      	cbnz	r0, 800ee12 <_dtoa_r+0x97a>
 800ee06:	4b84      	ldr	r3, [pc, #528]	@ (800f018 <_dtoa_r+0xb80>)
 800ee08:	4602      	mov	r2, r0
 800ee0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ee0e:	f7ff bb5a 	b.w	800e4c6 <_dtoa_r+0x2e>
 800ee12:	692a      	ldr	r2, [r5, #16]
 800ee14:	3202      	adds	r2, #2
 800ee16:	0092      	lsls	r2, r2, #2
 800ee18:	f105 010c 	add.w	r1, r5, #12
 800ee1c:	300c      	adds	r0, #12
 800ee1e:	f7ff fa76 	bl	800e30e <memcpy>
 800ee22:	2201      	movs	r2, #1
 800ee24:	4631      	mov	r1, r6
 800ee26:	4658      	mov	r0, fp
 800ee28:	f000 fee8 	bl	800fbfc <__lshift>
 800ee2c:	f10a 0301 	add.w	r3, sl, #1
 800ee30:	9307      	str	r3, [sp, #28]
 800ee32:	9b00      	ldr	r3, [sp, #0]
 800ee34:	4453      	add	r3, sl
 800ee36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee38:	9b02      	ldr	r3, [sp, #8]
 800ee3a:	f003 0301 	and.w	r3, r3, #1
 800ee3e:	462f      	mov	r7, r5
 800ee40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee42:	4605      	mov	r5, r0
 800ee44:	9b07      	ldr	r3, [sp, #28]
 800ee46:	4621      	mov	r1, r4
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	4648      	mov	r0, r9
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	f7ff fa9b 	bl	800e388 <quorem>
 800ee52:	4639      	mov	r1, r7
 800ee54:	9002      	str	r0, [sp, #8]
 800ee56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ee5a:	4648      	mov	r0, r9
 800ee5c:	f000 ff3a 	bl	800fcd4 <__mcmp>
 800ee60:	462a      	mov	r2, r5
 800ee62:	9008      	str	r0, [sp, #32]
 800ee64:	4621      	mov	r1, r4
 800ee66:	4658      	mov	r0, fp
 800ee68:	f000 ff50 	bl	800fd0c <__mdiff>
 800ee6c:	68c2      	ldr	r2, [r0, #12]
 800ee6e:	4606      	mov	r6, r0
 800ee70:	bb02      	cbnz	r2, 800eeb4 <_dtoa_r+0xa1c>
 800ee72:	4601      	mov	r1, r0
 800ee74:	4648      	mov	r0, r9
 800ee76:	f000 ff2d 	bl	800fcd4 <__mcmp>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	4631      	mov	r1, r6
 800ee7e:	4658      	mov	r0, fp
 800ee80:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee82:	f000 fca3 	bl	800f7cc <_Bfree>
 800ee86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee8a:	9e07      	ldr	r6, [sp, #28]
 800ee8c:	ea43 0102 	orr.w	r1, r3, r2
 800ee90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee92:	4319      	orrs	r1, r3
 800ee94:	d110      	bne.n	800eeb8 <_dtoa_r+0xa20>
 800ee96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ee9a:	d029      	beq.n	800eef0 <_dtoa_r+0xa58>
 800ee9c:	9b08      	ldr	r3, [sp, #32]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	dd02      	ble.n	800eea8 <_dtoa_r+0xa10>
 800eea2:	9b02      	ldr	r3, [sp, #8]
 800eea4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800eea8:	9b00      	ldr	r3, [sp, #0]
 800eeaa:	f883 8000 	strb.w	r8, [r3]
 800eeae:	e63f      	b.n	800eb30 <_dtoa_r+0x698>
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	e7bb      	b.n	800ee2c <_dtoa_r+0x994>
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	e7e1      	b.n	800ee7c <_dtoa_r+0x9e4>
 800eeb8:	9b08      	ldr	r3, [sp, #32]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	db04      	blt.n	800eec8 <_dtoa_r+0xa30>
 800eebe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eec0:	430b      	orrs	r3, r1
 800eec2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eec4:	430b      	orrs	r3, r1
 800eec6:	d120      	bne.n	800ef0a <_dtoa_r+0xa72>
 800eec8:	2a00      	cmp	r2, #0
 800eeca:	dded      	ble.n	800eea8 <_dtoa_r+0xa10>
 800eecc:	4649      	mov	r1, r9
 800eece:	2201      	movs	r2, #1
 800eed0:	4658      	mov	r0, fp
 800eed2:	f000 fe93 	bl	800fbfc <__lshift>
 800eed6:	4621      	mov	r1, r4
 800eed8:	4681      	mov	r9, r0
 800eeda:	f000 fefb 	bl	800fcd4 <__mcmp>
 800eede:	2800      	cmp	r0, #0
 800eee0:	dc03      	bgt.n	800eeea <_dtoa_r+0xa52>
 800eee2:	d1e1      	bne.n	800eea8 <_dtoa_r+0xa10>
 800eee4:	f018 0f01 	tst.w	r8, #1
 800eee8:	d0de      	beq.n	800eea8 <_dtoa_r+0xa10>
 800eeea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eeee:	d1d8      	bne.n	800eea2 <_dtoa_r+0xa0a>
 800eef0:	9a00      	ldr	r2, [sp, #0]
 800eef2:	2339      	movs	r3, #57	@ 0x39
 800eef4:	7013      	strb	r3, [r2, #0]
 800eef6:	4633      	mov	r3, r6
 800eef8:	461e      	mov	r6, r3
 800eefa:	3b01      	subs	r3, #1
 800eefc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ef00:	2a39      	cmp	r2, #57	@ 0x39
 800ef02:	d052      	beq.n	800efaa <_dtoa_r+0xb12>
 800ef04:	3201      	adds	r2, #1
 800ef06:	701a      	strb	r2, [r3, #0]
 800ef08:	e612      	b.n	800eb30 <_dtoa_r+0x698>
 800ef0a:	2a00      	cmp	r2, #0
 800ef0c:	dd07      	ble.n	800ef1e <_dtoa_r+0xa86>
 800ef0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef12:	d0ed      	beq.n	800eef0 <_dtoa_r+0xa58>
 800ef14:	9a00      	ldr	r2, [sp, #0]
 800ef16:	f108 0301 	add.w	r3, r8, #1
 800ef1a:	7013      	strb	r3, [r2, #0]
 800ef1c:	e608      	b.n	800eb30 <_dtoa_r+0x698>
 800ef1e:	9b07      	ldr	r3, [sp, #28]
 800ef20:	9a07      	ldr	r2, [sp, #28]
 800ef22:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ef26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d028      	beq.n	800ef7e <_dtoa_r+0xae6>
 800ef2c:	4649      	mov	r1, r9
 800ef2e:	2300      	movs	r3, #0
 800ef30:	220a      	movs	r2, #10
 800ef32:	4658      	mov	r0, fp
 800ef34:	f000 fc6c 	bl	800f810 <__multadd>
 800ef38:	42af      	cmp	r7, r5
 800ef3a:	4681      	mov	r9, r0
 800ef3c:	f04f 0300 	mov.w	r3, #0
 800ef40:	f04f 020a 	mov.w	r2, #10
 800ef44:	4639      	mov	r1, r7
 800ef46:	4658      	mov	r0, fp
 800ef48:	d107      	bne.n	800ef5a <_dtoa_r+0xac2>
 800ef4a:	f000 fc61 	bl	800f810 <__multadd>
 800ef4e:	4607      	mov	r7, r0
 800ef50:	4605      	mov	r5, r0
 800ef52:	9b07      	ldr	r3, [sp, #28]
 800ef54:	3301      	adds	r3, #1
 800ef56:	9307      	str	r3, [sp, #28]
 800ef58:	e774      	b.n	800ee44 <_dtoa_r+0x9ac>
 800ef5a:	f000 fc59 	bl	800f810 <__multadd>
 800ef5e:	4629      	mov	r1, r5
 800ef60:	4607      	mov	r7, r0
 800ef62:	2300      	movs	r3, #0
 800ef64:	220a      	movs	r2, #10
 800ef66:	4658      	mov	r0, fp
 800ef68:	f000 fc52 	bl	800f810 <__multadd>
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	e7f0      	b.n	800ef52 <_dtoa_r+0xaba>
 800ef70:	9b00      	ldr	r3, [sp, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	bfcc      	ite	gt
 800ef76:	461e      	movgt	r6, r3
 800ef78:	2601      	movle	r6, #1
 800ef7a:	4456      	add	r6, sl
 800ef7c:	2700      	movs	r7, #0
 800ef7e:	4649      	mov	r1, r9
 800ef80:	2201      	movs	r2, #1
 800ef82:	4658      	mov	r0, fp
 800ef84:	f000 fe3a 	bl	800fbfc <__lshift>
 800ef88:	4621      	mov	r1, r4
 800ef8a:	4681      	mov	r9, r0
 800ef8c:	f000 fea2 	bl	800fcd4 <__mcmp>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	dcb0      	bgt.n	800eef6 <_dtoa_r+0xa5e>
 800ef94:	d102      	bne.n	800ef9c <_dtoa_r+0xb04>
 800ef96:	f018 0f01 	tst.w	r8, #1
 800ef9a:	d1ac      	bne.n	800eef6 <_dtoa_r+0xa5e>
 800ef9c:	4633      	mov	r3, r6
 800ef9e:	461e      	mov	r6, r3
 800efa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efa4:	2a30      	cmp	r2, #48	@ 0x30
 800efa6:	d0fa      	beq.n	800ef9e <_dtoa_r+0xb06>
 800efa8:	e5c2      	b.n	800eb30 <_dtoa_r+0x698>
 800efaa:	459a      	cmp	sl, r3
 800efac:	d1a4      	bne.n	800eef8 <_dtoa_r+0xa60>
 800efae:	9b04      	ldr	r3, [sp, #16]
 800efb0:	3301      	adds	r3, #1
 800efb2:	9304      	str	r3, [sp, #16]
 800efb4:	2331      	movs	r3, #49	@ 0x31
 800efb6:	f88a 3000 	strb.w	r3, [sl]
 800efba:	e5b9      	b.n	800eb30 <_dtoa_r+0x698>
 800efbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800efbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f01c <_dtoa_r+0xb84>
 800efc2:	b11b      	cbz	r3, 800efcc <_dtoa_r+0xb34>
 800efc4:	f10a 0308 	add.w	r3, sl, #8
 800efc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800efca:	6013      	str	r3, [r2, #0]
 800efcc:	4650      	mov	r0, sl
 800efce:	b019      	add	sp, #100	@ 0x64
 800efd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	f77f ae37 	ble.w	800ec4a <_dtoa_r+0x7b2>
 800efdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efde:	930a      	str	r3, [sp, #40]	@ 0x28
 800efe0:	2001      	movs	r0, #1
 800efe2:	e655      	b.n	800ec90 <_dtoa_r+0x7f8>
 800efe4:	9b00      	ldr	r3, [sp, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	f77f aed6 	ble.w	800ed98 <_dtoa_r+0x900>
 800efec:	4656      	mov	r6, sl
 800efee:	4621      	mov	r1, r4
 800eff0:	4648      	mov	r0, r9
 800eff2:	f7ff f9c9 	bl	800e388 <quorem>
 800eff6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800effa:	f806 8b01 	strb.w	r8, [r6], #1
 800effe:	9b00      	ldr	r3, [sp, #0]
 800f000:	eba6 020a 	sub.w	r2, r6, sl
 800f004:	4293      	cmp	r3, r2
 800f006:	ddb3      	ble.n	800ef70 <_dtoa_r+0xad8>
 800f008:	4649      	mov	r1, r9
 800f00a:	2300      	movs	r3, #0
 800f00c:	220a      	movs	r2, #10
 800f00e:	4658      	mov	r0, fp
 800f010:	f000 fbfe 	bl	800f810 <__multadd>
 800f014:	4681      	mov	r9, r0
 800f016:	e7ea      	b.n	800efee <_dtoa_r+0xb56>
 800f018:	080116aa 	.word	0x080116aa
 800f01c:	08011645 	.word	0x08011645

0800f020 <_free_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	4605      	mov	r5, r0
 800f024:	2900      	cmp	r1, #0
 800f026:	d041      	beq.n	800f0ac <_free_r+0x8c>
 800f028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f02c:	1f0c      	subs	r4, r1, #4
 800f02e:	2b00      	cmp	r3, #0
 800f030:	bfb8      	it	lt
 800f032:	18e4      	addlt	r4, r4, r3
 800f034:	f7fd f9d2 	bl	800c3dc <__malloc_lock>
 800f038:	4a1d      	ldr	r2, [pc, #116]	@ (800f0b0 <_free_r+0x90>)
 800f03a:	6813      	ldr	r3, [r2, #0]
 800f03c:	b933      	cbnz	r3, 800f04c <_free_r+0x2c>
 800f03e:	6063      	str	r3, [r4, #4]
 800f040:	6014      	str	r4, [r2, #0]
 800f042:	4628      	mov	r0, r5
 800f044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f048:	f7fd b9ce 	b.w	800c3e8 <__malloc_unlock>
 800f04c:	42a3      	cmp	r3, r4
 800f04e:	d908      	bls.n	800f062 <_free_r+0x42>
 800f050:	6820      	ldr	r0, [r4, #0]
 800f052:	1821      	adds	r1, r4, r0
 800f054:	428b      	cmp	r3, r1
 800f056:	bf01      	itttt	eq
 800f058:	6819      	ldreq	r1, [r3, #0]
 800f05a:	685b      	ldreq	r3, [r3, #4]
 800f05c:	1809      	addeq	r1, r1, r0
 800f05e:	6021      	streq	r1, [r4, #0]
 800f060:	e7ed      	b.n	800f03e <_free_r+0x1e>
 800f062:	461a      	mov	r2, r3
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	b10b      	cbz	r3, 800f06c <_free_r+0x4c>
 800f068:	42a3      	cmp	r3, r4
 800f06a:	d9fa      	bls.n	800f062 <_free_r+0x42>
 800f06c:	6811      	ldr	r1, [r2, #0]
 800f06e:	1850      	adds	r0, r2, r1
 800f070:	42a0      	cmp	r0, r4
 800f072:	d10b      	bne.n	800f08c <_free_r+0x6c>
 800f074:	6820      	ldr	r0, [r4, #0]
 800f076:	4401      	add	r1, r0
 800f078:	1850      	adds	r0, r2, r1
 800f07a:	4283      	cmp	r3, r0
 800f07c:	6011      	str	r1, [r2, #0]
 800f07e:	d1e0      	bne.n	800f042 <_free_r+0x22>
 800f080:	6818      	ldr	r0, [r3, #0]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	6053      	str	r3, [r2, #4]
 800f086:	4408      	add	r0, r1
 800f088:	6010      	str	r0, [r2, #0]
 800f08a:	e7da      	b.n	800f042 <_free_r+0x22>
 800f08c:	d902      	bls.n	800f094 <_free_r+0x74>
 800f08e:	230c      	movs	r3, #12
 800f090:	602b      	str	r3, [r5, #0]
 800f092:	e7d6      	b.n	800f042 <_free_r+0x22>
 800f094:	6820      	ldr	r0, [r4, #0]
 800f096:	1821      	adds	r1, r4, r0
 800f098:	428b      	cmp	r3, r1
 800f09a:	bf04      	itt	eq
 800f09c:	6819      	ldreq	r1, [r3, #0]
 800f09e:	685b      	ldreq	r3, [r3, #4]
 800f0a0:	6063      	str	r3, [r4, #4]
 800f0a2:	bf04      	itt	eq
 800f0a4:	1809      	addeq	r1, r1, r0
 800f0a6:	6021      	streq	r1, [r4, #0]
 800f0a8:	6054      	str	r4, [r2, #4]
 800f0aa:	e7ca      	b.n	800f042 <_free_r+0x22>
 800f0ac:	bd38      	pop	{r3, r4, r5, pc}
 800f0ae:	bf00      	nop
 800f0b0:	200020f0 	.word	0x200020f0

0800f0b4 <rshift>:
 800f0b4:	6903      	ldr	r3, [r0, #16]
 800f0b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f0ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f0c2:	f100 0414 	add.w	r4, r0, #20
 800f0c6:	dd45      	ble.n	800f154 <rshift+0xa0>
 800f0c8:	f011 011f 	ands.w	r1, r1, #31
 800f0cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f0d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f0d4:	d10c      	bne.n	800f0f0 <rshift+0x3c>
 800f0d6:	f100 0710 	add.w	r7, r0, #16
 800f0da:	4629      	mov	r1, r5
 800f0dc:	42b1      	cmp	r1, r6
 800f0de:	d334      	bcc.n	800f14a <rshift+0x96>
 800f0e0:	1a9b      	subs	r3, r3, r2
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	1eea      	subs	r2, r5, #3
 800f0e6:	4296      	cmp	r6, r2
 800f0e8:	bf38      	it	cc
 800f0ea:	2300      	movcc	r3, #0
 800f0ec:	4423      	add	r3, r4
 800f0ee:	e015      	b.n	800f11c <rshift+0x68>
 800f0f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f0f4:	f1c1 0820 	rsb	r8, r1, #32
 800f0f8:	40cf      	lsrs	r7, r1
 800f0fa:	f105 0e04 	add.w	lr, r5, #4
 800f0fe:	46a1      	mov	r9, r4
 800f100:	4576      	cmp	r6, lr
 800f102:	46f4      	mov	ip, lr
 800f104:	d815      	bhi.n	800f132 <rshift+0x7e>
 800f106:	1a9a      	subs	r2, r3, r2
 800f108:	0092      	lsls	r2, r2, #2
 800f10a:	3a04      	subs	r2, #4
 800f10c:	3501      	adds	r5, #1
 800f10e:	42ae      	cmp	r6, r5
 800f110:	bf38      	it	cc
 800f112:	2200      	movcc	r2, #0
 800f114:	18a3      	adds	r3, r4, r2
 800f116:	50a7      	str	r7, [r4, r2]
 800f118:	b107      	cbz	r7, 800f11c <rshift+0x68>
 800f11a:	3304      	adds	r3, #4
 800f11c:	1b1a      	subs	r2, r3, r4
 800f11e:	42a3      	cmp	r3, r4
 800f120:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f124:	bf08      	it	eq
 800f126:	2300      	moveq	r3, #0
 800f128:	6102      	str	r2, [r0, #16]
 800f12a:	bf08      	it	eq
 800f12c:	6143      	streq	r3, [r0, #20]
 800f12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f132:	f8dc c000 	ldr.w	ip, [ip]
 800f136:	fa0c fc08 	lsl.w	ip, ip, r8
 800f13a:	ea4c 0707 	orr.w	r7, ip, r7
 800f13e:	f849 7b04 	str.w	r7, [r9], #4
 800f142:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f146:	40cf      	lsrs	r7, r1
 800f148:	e7da      	b.n	800f100 <rshift+0x4c>
 800f14a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f14e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f152:	e7c3      	b.n	800f0dc <rshift+0x28>
 800f154:	4623      	mov	r3, r4
 800f156:	e7e1      	b.n	800f11c <rshift+0x68>

0800f158 <__hexdig_fun>:
 800f158:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f15c:	2b09      	cmp	r3, #9
 800f15e:	d802      	bhi.n	800f166 <__hexdig_fun+0xe>
 800f160:	3820      	subs	r0, #32
 800f162:	b2c0      	uxtb	r0, r0
 800f164:	4770      	bx	lr
 800f166:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f16a:	2b05      	cmp	r3, #5
 800f16c:	d801      	bhi.n	800f172 <__hexdig_fun+0x1a>
 800f16e:	3847      	subs	r0, #71	@ 0x47
 800f170:	e7f7      	b.n	800f162 <__hexdig_fun+0xa>
 800f172:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f176:	2b05      	cmp	r3, #5
 800f178:	d801      	bhi.n	800f17e <__hexdig_fun+0x26>
 800f17a:	3827      	subs	r0, #39	@ 0x27
 800f17c:	e7f1      	b.n	800f162 <__hexdig_fun+0xa>
 800f17e:	2000      	movs	r0, #0
 800f180:	4770      	bx	lr
	...

0800f184 <__gethex>:
 800f184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f188:	b085      	sub	sp, #20
 800f18a:	468a      	mov	sl, r1
 800f18c:	9302      	str	r3, [sp, #8]
 800f18e:	680b      	ldr	r3, [r1, #0]
 800f190:	9001      	str	r0, [sp, #4]
 800f192:	4690      	mov	r8, r2
 800f194:	1c9c      	adds	r4, r3, #2
 800f196:	46a1      	mov	r9, r4
 800f198:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f19c:	2830      	cmp	r0, #48	@ 0x30
 800f19e:	d0fa      	beq.n	800f196 <__gethex+0x12>
 800f1a0:	eba9 0303 	sub.w	r3, r9, r3
 800f1a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800f1a8:	f7ff ffd6 	bl	800f158 <__hexdig_fun>
 800f1ac:	4605      	mov	r5, r0
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d168      	bne.n	800f284 <__gethex+0x100>
 800f1b2:	49a0      	ldr	r1, [pc, #640]	@ (800f434 <__gethex+0x2b0>)
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	4648      	mov	r0, r9
 800f1b8:	f7fe ffb3 	bl	800e122 <strncmp>
 800f1bc:	4607      	mov	r7, r0
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	d167      	bne.n	800f292 <__gethex+0x10e>
 800f1c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f1c6:	4626      	mov	r6, r4
 800f1c8:	f7ff ffc6 	bl	800f158 <__hexdig_fun>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d062      	beq.n	800f296 <__gethex+0x112>
 800f1d0:	4623      	mov	r3, r4
 800f1d2:	7818      	ldrb	r0, [r3, #0]
 800f1d4:	2830      	cmp	r0, #48	@ 0x30
 800f1d6:	4699      	mov	r9, r3
 800f1d8:	f103 0301 	add.w	r3, r3, #1
 800f1dc:	d0f9      	beq.n	800f1d2 <__gethex+0x4e>
 800f1de:	f7ff ffbb 	bl	800f158 <__hexdig_fun>
 800f1e2:	fab0 f580 	clz	r5, r0
 800f1e6:	096d      	lsrs	r5, r5, #5
 800f1e8:	f04f 0b01 	mov.w	fp, #1
 800f1ec:	464a      	mov	r2, r9
 800f1ee:	4616      	mov	r6, r2
 800f1f0:	3201      	adds	r2, #1
 800f1f2:	7830      	ldrb	r0, [r6, #0]
 800f1f4:	f7ff ffb0 	bl	800f158 <__hexdig_fun>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d1f8      	bne.n	800f1ee <__gethex+0x6a>
 800f1fc:	498d      	ldr	r1, [pc, #564]	@ (800f434 <__gethex+0x2b0>)
 800f1fe:	2201      	movs	r2, #1
 800f200:	4630      	mov	r0, r6
 800f202:	f7fe ff8e 	bl	800e122 <strncmp>
 800f206:	2800      	cmp	r0, #0
 800f208:	d13f      	bne.n	800f28a <__gethex+0x106>
 800f20a:	b944      	cbnz	r4, 800f21e <__gethex+0x9a>
 800f20c:	1c74      	adds	r4, r6, #1
 800f20e:	4622      	mov	r2, r4
 800f210:	4616      	mov	r6, r2
 800f212:	3201      	adds	r2, #1
 800f214:	7830      	ldrb	r0, [r6, #0]
 800f216:	f7ff ff9f 	bl	800f158 <__hexdig_fun>
 800f21a:	2800      	cmp	r0, #0
 800f21c:	d1f8      	bne.n	800f210 <__gethex+0x8c>
 800f21e:	1ba4      	subs	r4, r4, r6
 800f220:	00a7      	lsls	r7, r4, #2
 800f222:	7833      	ldrb	r3, [r6, #0]
 800f224:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f228:	2b50      	cmp	r3, #80	@ 0x50
 800f22a:	d13e      	bne.n	800f2aa <__gethex+0x126>
 800f22c:	7873      	ldrb	r3, [r6, #1]
 800f22e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f230:	d033      	beq.n	800f29a <__gethex+0x116>
 800f232:	2b2d      	cmp	r3, #45	@ 0x2d
 800f234:	d034      	beq.n	800f2a0 <__gethex+0x11c>
 800f236:	1c71      	adds	r1, r6, #1
 800f238:	2400      	movs	r4, #0
 800f23a:	7808      	ldrb	r0, [r1, #0]
 800f23c:	f7ff ff8c 	bl	800f158 <__hexdig_fun>
 800f240:	1e43      	subs	r3, r0, #1
 800f242:	b2db      	uxtb	r3, r3
 800f244:	2b18      	cmp	r3, #24
 800f246:	d830      	bhi.n	800f2aa <__gethex+0x126>
 800f248:	f1a0 0210 	sub.w	r2, r0, #16
 800f24c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f250:	f7ff ff82 	bl	800f158 <__hexdig_fun>
 800f254:	f100 3cff 	add.w	ip, r0, #4294967295
 800f258:	fa5f fc8c 	uxtb.w	ip, ip
 800f25c:	f1bc 0f18 	cmp.w	ip, #24
 800f260:	f04f 030a 	mov.w	r3, #10
 800f264:	d91e      	bls.n	800f2a4 <__gethex+0x120>
 800f266:	b104      	cbz	r4, 800f26a <__gethex+0xe6>
 800f268:	4252      	negs	r2, r2
 800f26a:	4417      	add	r7, r2
 800f26c:	f8ca 1000 	str.w	r1, [sl]
 800f270:	b1ed      	cbz	r5, 800f2ae <__gethex+0x12a>
 800f272:	f1bb 0f00 	cmp.w	fp, #0
 800f276:	bf0c      	ite	eq
 800f278:	2506      	moveq	r5, #6
 800f27a:	2500      	movne	r5, #0
 800f27c:	4628      	mov	r0, r5
 800f27e:	b005      	add	sp, #20
 800f280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f284:	2500      	movs	r5, #0
 800f286:	462c      	mov	r4, r5
 800f288:	e7b0      	b.n	800f1ec <__gethex+0x68>
 800f28a:	2c00      	cmp	r4, #0
 800f28c:	d1c7      	bne.n	800f21e <__gethex+0x9a>
 800f28e:	4627      	mov	r7, r4
 800f290:	e7c7      	b.n	800f222 <__gethex+0x9e>
 800f292:	464e      	mov	r6, r9
 800f294:	462f      	mov	r7, r5
 800f296:	2501      	movs	r5, #1
 800f298:	e7c3      	b.n	800f222 <__gethex+0x9e>
 800f29a:	2400      	movs	r4, #0
 800f29c:	1cb1      	adds	r1, r6, #2
 800f29e:	e7cc      	b.n	800f23a <__gethex+0xb6>
 800f2a0:	2401      	movs	r4, #1
 800f2a2:	e7fb      	b.n	800f29c <__gethex+0x118>
 800f2a4:	fb03 0002 	mla	r0, r3, r2, r0
 800f2a8:	e7ce      	b.n	800f248 <__gethex+0xc4>
 800f2aa:	4631      	mov	r1, r6
 800f2ac:	e7de      	b.n	800f26c <__gethex+0xe8>
 800f2ae:	eba6 0309 	sub.w	r3, r6, r9
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	4629      	mov	r1, r5
 800f2b6:	2b07      	cmp	r3, #7
 800f2b8:	dc0a      	bgt.n	800f2d0 <__gethex+0x14c>
 800f2ba:	9801      	ldr	r0, [sp, #4]
 800f2bc:	f000 fa46 	bl	800f74c <_Balloc>
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	b940      	cbnz	r0, 800f2d6 <__gethex+0x152>
 800f2c4:	4b5c      	ldr	r3, [pc, #368]	@ (800f438 <__gethex+0x2b4>)
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	21e4      	movs	r1, #228	@ 0xe4
 800f2ca:	485c      	ldr	r0, [pc, #368]	@ (800f43c <__gethex+0x2b8>)
 800f2cc:	f7ff f83e 	bl	800e34c <__assert_func>
 800f2d0:	3101      	adds	r1, #1
 800f2d2:	105b      	asrs	r3, r3, #1
 800f2d4:	e7ef      	b.n	800f2b6 <__gethex+0x132>
 800f2d6:	f100 0a14 	add.w	sl, r0, #20
 800f2da:	2300      	movs	r3, #0
 800f2dc:	4655      	mov	r5, sl
 800f2de:	469b      	mov	fp, r3
 800f2e0:	45b1      	cmp	r9, r6
 800f2e2:	d337      	bcc.n	800f354 <__gethex+0x1d0>
 800f2e4:	f845 bb04 	str.w	fp, [r5], #4
 800f2e8:	eba5 050a 	sub.w	r5, r5, sl
 800f2ec:	10ad      	asrs	r5, r5, #2
 800f2ee:	6125      	str	r5, [r4, #16]
 800f2f0:	4658      	mov	r0, fp
 800f2f2:	f000 fb1d 	bl	800f930 <__hi0bits>
 800f2f6:	016d      	lsls	r5, r5, #5
 800f2f8:	f8d8 6000 	ldr.w	r6, [r8]
 800f2fc:	1a2d      	subs	r5, r5, r0
 800f2fe:	42b5      	cmp	r5, r6
 800f300:	dd54      	ble.n	800f3ac <__gethex+0x228>
 800f302:	1bad      	subs	r5, r5, r6
 800f304:	4629      	mov	r1, r5
 800f306:	4620      	mov	r0, r4
 800f308:	f000 feb1 	bl	801006e <__any_on>
 800f30c:	4681      	mov	r9, r0
 800f30e:	b178      	cbz	r0, 800f330 <__gethex+0x1ac>
 800f310:	1e6b      	subs	r3, r5, #1
 800f312:	1159      	asrs	r1, r3, #5
 800f314:	f003 021f 	and.w	r2, r3, #31
 800f318:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f31c:	f04f 0901 	mov.w	r9, #1
 800f320:	fa09 f202 	lsl.w	r2, r9, r2
 800f324:	420a      	tst	r2, r1
 800f326:	d003      	beq.n	800f330 <__gethex+0x1ac>
 800f328:	454b      	cmp	r3, r9
 800f32a:	dc36      	bgt.n	800f39a <__gethex+0x216>
 800f32c:	f04f 0902 	mov.w	r9, #2
 800f330:	4629      	mov	r1, r5
 800f332:	4620      	mov	r0, r4
 800f334:	f7ff febe 	bl	800f0b4 <rshift>
 800f338:	442f      	add	r7, r5
 800f33a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f33e:	42bb      	cmp	r3, r7
 800f340:	da42      	bge.n	800f3c8 <__gethex+0x244>
 800f342:	9801      	ldr	r0, [sp, #4]
 800f344:	4621      	mov	r1, r4
 800f346:	f000 fa41 	bl	800f7cc <_Bfree>
 800f34a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f34c:	2300      	movs	r3, #0
 800f34e:	6013      	str	r3, [r2, #0]
 800f350:	25a3      	movs	r5, #163	@ 0xa3
 800f352:	e793      	b.n	800f27c <__gethex+0xf8>
 800f354:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f358:	2a2e      	cmp	r2, #46	@ 0x2e
 800f35a:	d012      	beq.n	800f382 <__gethex+0x1fe>
 800f35c:	2b20      	cmp	r3, #32
 800f35e:	d104      	bne.n	800f36a <__gethex+0x1e6>
 800f360:	f845 bb04 	str.w	fp, [r5], #4
 800f364:	f04f 0b00 	mov.w	fp, #0
 800f368:	465b      	mov	r3, fp
 800f36a:	7830      	ldrb	r0, [r6, #0]
 800f36c:	9303      	str	r3, [sp, #12]
 800f36e:	f7ff fef3 	bl	800f158 <__hexdig_fun>
 800f372:	9b03      	ldr	r3, [sp, #12]
 800f374:	f000 000f 	and.w	r0, r0, #15
 800f378:	4098      	lsls	r0, r3
 800f37a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f37e:	3304      	adds	r3, #4
 800f380:	e7ae      	b.n	800f2e0 <__gethex+0x15c>
 800f382:	45b1      	cmp	r9, r6
 800f384:	d8ea      	bhi.n	800f35c <__gethex+0x1d8>
 800f386:	492b      	ldr	r1, [pc, #172]	@ (800f434 <__gethex+0x2b0>)
 800f388:	9303      	str	r3, [sp, #12]
 800f38a:	2201      	movs	r2, #1
 800f38c:	4630      	mov	r0, r6
 800f38e:	f7fe fec8 	bl	800e122 <strncmp>
 800f392:	9b03      	ldr	r3, [sp, #12]
 800f394:	2800      	cmp	r0, #0
 800f396:	d1e1      	bne.n	800f35c <__gethex+0x1d8>
 800f398:	e7a2      	b.n	800f2e0 <__gethex+0x15c>
 800f39a:	1ea9      	subs	r1, r5, #2
 800f39c:	4620      	mov	r0, r4
 800f39e:	f000 fe66 	bl	801006e <__any_on>
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	d0c2      	beq.n	800f32c <__gethex+0x1a8>
 800f3a6:	f04f 0903 	mov.w	r9, #3
 800f3aa:	e7c1      	b.n	800f330 <__gethex+0x1ac>
 800f3ac:	da09      	bge.n	800f3c2 <__gethex+0x23e>
 800f3ae:	1b75      	subs	r5, r6, r5
 800f3b0:	4621      	mov	r1, r4
 800f3b2:	9801      	ldr	r0, [sp, #4]
 800f3b4:	462a      	mov	r2, r5
 800f3b6:	f000 fc21 	bl	800fbfc <__lshift>
 800f3ba:	1b7f      	subs	r7, r7, r5
 800f3bc:	4604      	mov	r4, r0
 800f3be:	f100 0a14 	add.w	sl, r0, #20
 800f3c2:	f04f 0900 	mov.w	r9, #0
 800f3c6:	e7b8      	b.n	800f33a <__gethex+0x1b6>
 800f3c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f3cc:	42bd      	cmp	r5, r7
 800f3ce:	dd6f      	ble.n	800f4b0 <__gethex+0x32c>
 800f3d0:	1bed      	subs	r5, r5, r7
 800f3d2:	42ae      	cmp	r6, r5
 800f3d4:	dc34      	bgt.n	800f440 <__gethex+0x2bc>
 800f3d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3da:	2b02      	cmp	r3, #2
 800f3dc:	d022      	beq.n	800f424 <__gethex+0x2a0>
 800f3de:	2b03      	cmp	r3, #3
 800f3e0:	d024      	beq.n	800f42c <__gethex+0x2a8>
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d115      	bne.n	800f412 <__gethex+0x28e>
 800f3e6:	42ae      	cmp	r6, r5
 800f3e8:	d113      	bne.n	800f412 <__gethex+0x28e>
 800f3ea:	2e01      	cmp	r6, #1
 800f3ec:	d10b      	bne.n	800f406 <__gethex+0x282>
 800f3ee:	9a02      	ldr	r2, [sp, #8]
 800f3f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f3f4:	6013      	str	r3, [r2, #0]
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	6123      	str	r3, [r4, #16]
 800f3fa:	f8ca 3000 	str.w	r3, [sl]
 800f3fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f400:	2562      	movs	r5, #98	@ 0x62
 800f402:	601c      	str	r4, [r3, #0]
 800f404:	e73a      	b.n	800f27c <__gethex+0xf8>
 800f406:	1e71      	subs	r1, r6, #1
 800f408:	4620      	mov	r0, r4
 800f40a:	f000 fe30 	bl	801006e <__any_on>
 800f40e:	2800      	cmp	r0, #0
 800f410:	d1ed      	bne.n	800f3ee <__gethex+0x26a>
 800f412:	9801      	ldr	r0, [sp, #4]
 800f414:	4621      	mov	r1, r4
 800f416:	f000 f9d9 	bl	800f7cc <_Bfree>
 800f41a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f41c:	2300      	movs	r3, #0
 800f41e:	6013      	str	r3, [r2, #0]
 800f420:	2550      	movs	r5, #80	@ 0x50
 800f422:	e72b      	b.n	800f27c <__gethex+0xf8>
 800f424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1f3      	bne.n	800f412 <__gethex+0x28e>
 800f42a:	e7e0      	b.n	800f3ee <__gethex+0x26a>
 800f42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d1dd      	bne.n	800f3ee <__gethex+0x26a>
 800f432:	e7ee      	b.n	800f412 <__gethex+0x28e>
 800f434:	08011400 	.word	0x08011400
 800f438:	080116aa 	.word	0x080116aa
 800f43c:	080116bb 	.word	0x080116bb
 800f440:	1e6f      	subs	r7, r5, #1
 800f442:	f1b9 0f00 	cmp.w	r9, #0
 800f446:	d130      	bne.n	800f4aa <__gethex+0x326>
 800f448:	b127      	cbz	r7, 800f454 <__gethex+0x2d0>
 800f44a:	4639      	mov	r1, r7
 800f44c:	4620      	mov	r0, r4
 800f44e:	f000 fe0e 	bl	801006e <__any_on>
 800f452:	4681      	mov	r9, r0
 800f454:	117a      	asrs	r2, r7, #5
 800f456:	2301      	movs	r3, #1
 800f458:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f45c:	f007 071f 	and.w	r7, r7, #31
 800f460:	40bb      	lsls	r3, r7
 800f462:	4213      	tst	r3, r2
 800f464:	4629      	mov	r1, r5
 800f466:	4620      	mov	r0, r4
 800f468:	bf18      	it	ne
 800f46a:	f049 0902 	orrne.w	r9, r9, #2
 800f46e:	f7ff fe21 	bl	800f0b4 <rshift>
 800f472:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f476:	1b76      	subs	r6, r6, r5
 800f478:	2502      	movs	r5, #2
 800f47a:	f1b9 0f00 	cmp.w	r9, #0
 800f47e:	d047      	beq.n	800f510 <__gethex+0x38c>
 800f480:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f484:	2b02      	cmp	r3, #2
 800f486:	d015      	beq.n	800f4b4 <__gethex+0x330>
 800f488:	2b03      	cmp	r3, #3
 800f48a:	d017      	beq.n	800f4bc <__gethex+0x338>
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d109      	bne.n	800f4a4 <__gethex+0x320>
 800f490:	f019 0f02 	tst.w	r9, #2
 800f494:	d006      	beq.n	800f4a4 <__gethex+0x320>
 800f496:	f8da 3000 	ldr.w	r3, [sl]
 800f49a:	ea49 0903 	orr.w	r9, r9, r3
 800f49e:	f019 0f01 	tst.w	r9, #1
 800f4a2:	d10e      	bne.n	800f4c2 <__gethex+0x33e>
 800f4a4:	f045 0510 	orr.w	r5, r5, #16
 800f4a8:	e032      	b.n	800f510 <__gethex+0x38c>
 800f4aa:	f04f 0901 	mov.w	r9, #1
 800f4ae:	e7d1      	b.n	800f454 <__gethex+0x2d0>
 800f4b0:	2501      	movs	r5, #1
 800f4b2:	e7e2      	b.n	800f47a <__gethex+0x2f6>
 800f4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4b6:	f1c3 0301 	rsb	r3, r3, #1
 800f4ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d0f0      	beq.n	800f4a4 <__gethex+0x320>
 800f4c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f4c6:	f104 0314 	add.w	r3, r4, #20
 800f4ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f4ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f4d2:	f04f 0c00 	mov.w	ip, #0
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f4e0:	d01b      	beq.n	800f51a <__gethex+0x396>
 800f4e2:	3201      	adds	r2, #1
 800f4e4:	6002      	str	r2, [r0, #0]
 800f4e6:	2d02      	cmp	r5, #2
 800f4e8:	f104 0314 	add.w	r3, r4, #20
 800f4ec:	d13c      	bne.n	800f568 <__gethex+0x3e4>
 800f4ee:	f8d8 2000 	ldr.w	r2, [r8]
 800f4f2:	3a01      	subs	r2, #1
 800f4f4:	42b2      	cmp	r2, r6
 800f4f6:	d109      	bne.n	800f50c <__gethex+0x388>
 800f4f8:	1171      	asrs	r1, r6, #5
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f500:	f006 061f 	and.w	r6, r6, #31
 800f504:	fa02 f606 	lsl.w	r6, r2, r6
 800f508:	421e      	tst	r6, r3
 800f50a:	d13a      	bne.n	800f582 <__gethex+0x3fe>
 800f50c:	f045 0520 	orr.w	r5, r5, #32
 800f510:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f512:	601c      	str	r4, [r3, #0]
 800f514:	9b02      	ldr	r3, [sp, #8]
 800f516:	601f      	str	r7, [r3, #0]
 800f518:	e6b0      	b.n	800f27c <__gethex+0xf8>
 800f51a:	4299      	cmp	r1, r3
 800f51c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f520:	d8d9      	bhi.n	800f4d6 <__gethex+0x352>
 800f522:	68a3      	ldr	r3, [r4, #8]
 800f524:	459b      	cmp	fp, r3
 800f526:	db17      	blt.n	800f558 <__gethex+0x3d4>
 800f528:	6861      	ldr	r1, [r4, #4]
 800f52a:	9801      	ldr	r0, [sp, #4]
 800f52c:	3101      	adds	r1, #1
 800f52e:	f000 f90d 	bl	800f74c <_Balloc>
 800f532:	4681      	mov	r9, r0
 800f534:	b918      	cbnz	r0, 800f53e <__gethex+0x3ba>
 800f536:	4b1a      	ldr	r3, [pc, #104]	@ (800f5a0 <__gethex+0x41c>)
 800f538:	4602      	mov	r2, r0
 800f53a:	2184      	movs	r1, #132	@ 0x84
 800f53c:	e6c5      	b.n	800f2ca <__gethex+0x146>
 800f53e:	6922      	ldr	r2, [r4, #16]
 800f540:	3202      	adds	r2, #2
 800f542:	f104 010c 	add.w	r1, r4, #12
 800f546:	0092      	lsls	r2, r2, #2
 800f548:	300c      	adds	r0, #12
 800f54a:	f7fe fee0 	bl	800e30e <memcpy>
 800f54e:	4621      	mov	r1, r4
 800f550:	9801      	ldr	r0, [sp, #4]
 800f552:	f000 f93b 	bl	800f7cc <_Bfree>
 800f556:	464c      	mov	r4, r9
 800f558:	6923      	ldr	r3, [r4, #16]
 800f55a:	1c5a      	adds	r2, r3, #1
 800f55c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f560:	6122      	str	r2, [r4, #16]
 800f562:	2201      	movs	r2, #1
 800f564:	615a      	str	r2, [r3, #20]
 800f566:	e7be      	b.n	800f4e6 <__gethex+0x362>
 800f568:	6922      	ldr	r2, [r4, #16]
 800f56a:	455a      	cmp	r2, fp
 800f56c:	dd0b      	ble.n	800f586 <__gethex+0x402>
 800f56e:	2101      	movs	r1, #1
 800f570:	4620      	mov	r0, r4
 800f572:	f7ff fd9f 	bl	800f0b4 <rshift>
 800f576:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f57a:	3701      	adds	r7, #1
 800f57c:	42bb      	cmp	r3, r7
 800f57e:	f6ff aee0 	blt.w	800f342 <__gethex+0x1be>
 800f582:	2501      	movs	r5, #1
 800f584:	e7c2      	b.n	800f50c <__gethex+0x388>
 800f586:	f016 061f 	ands.w	r6, r6, #31
 800f58a:	d0fa      	beq.n	800f582 <__gethex+0x3fe>
 800f58c:	4453      	add	r3, sl
 800f58e:	f1c6 0620 	rsb	r6, r6, #32
 800f592:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f596:	f000 f9cb 	bl	800f930 <__hi0bits>
 800f59a:	42b0      	cmp	r0, r6
 800f59c:	dbe7      	blt.n	800f56e <__gethex+0x3ea>
 800f59e:	e7f0      	b.n	800f582 <__gethex+0x3fe>
 800f5a0:	080116aa 	.word	0x080116aa

0800f5a4 <L_shift>:
 800f5a4:	f1c2 0208 	rsb	r2, r2, #8
 800f5a8:	0092      	lsls	r2, r2, #2
 800f5aa:	b570      	push	{r4, r5, r6, lr}
 800f5ac:	f1c2 0620 	rsb	r6, r2, #32
 800f5b0:	6843      	ldr	r3, [r0, #4]
 800f5b2:	6804      	ldr	r4, [r0, #0]
 800f5b4:	fa03 f506 	lsl.w	r5, r3, r6
 800f5b8:	432c      	orrs	r4, r5
 800f5ba:	40d3      	lsrs	r3, r2
 800f5bc:	6004      	str	r4, [r0, #0]
 800f5be:	f840 3f04 	str.w	r3, [r0, #4]!
 800f5c2:	4288      	cmp	r0, r1
 800f5c4:	d3f4      	bcc.n	800f5b0 <L_shift+0xc>
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}

0800f5c8 <__match>:
 800f5c8:	b530      	push	{r4, r5, lr}
 800f5ca:	6803      	ldr	r3, [r0, #0]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5d2:	b914      	cbnz	r4, 800f5da <__match+0x12>
 800f5d4:	6003      	str	r3, [r0, #0]
 800f5d6:	2001      	movs	r0, #1
 800f5d8:	bd30      	pop	{r4, r5, pc}
 800f5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f5e2:	2d19      	cmp	r5, #25
 800f5e4:	bf98      	it	ls
 800f5e6:	3220      	addls	r2, #32
 800f5e8:	42a2      	cmp	r2, r4
 800f5ea:	d0f0      	beq.n	800f5ce <__match+0x6>
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	e7f3      	b.n	800f5d8 <__match+0x10>

0800f5f0 <__hexnan>:
 800f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f4:	680b      	ldr	r3, [r1, #0]
 800f5f6:	6801      	ldr	r1, [r0, #0]
 800f5f8:	115e      	asrs	r6, r3, #5
 800f5fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f5fe:	f013 031f 	ands.w	r3, r3, #31
 800f602:	b087      	sub	sp, #28
 800f604:	bf18      	it	ne
 800f606:	3604      	addne	r6, #4
 800f608:	2500      	movs	r5, #0
 800f60a:	1f37      	subs	r7, r6, #4
 800f60c:	4682      	mov	sl, r0
 800f60e:	4690      	mov	r8, r2
 800f610:	9301      	str	r3, [sp, #4]
 800f612:	f846 5c04 	str.w	r5, [r6, #-4]
 800f616:	46b9      	mov	r9, r7
 800f618:	463c      	mov	r4, r7
 800f61a:	9502      	str	r5, [sp, #8]
 800f61c:	46ab      	mov	fp, r5
 800f61e:	784a      	ldrb	r2, [r1, #1]
 800f620:	1c4b      	adds	r3, r1, #1
 800f622:	9303      	str	r3, [sp, #12]
 800f624:	b342      	cbz	r2, 800f678 <__hexnan+0x88>
 800f626:	4610      	mov	r0, r2
 800f628:	9105      	str	r1, [sp, #20]
 800f62a:	9204      	str	r2, [sp, #16]
 800f62c:	f7ff fd94 	bl	800f158 <__hexdig_fun>
 800f630:	2800      	cmp	r0, #0
 800f632:	d151      	bne.n	800f6d8 <__hexnan+0xe8>
 800f634:	9a04      	ldr	r2, [sp, #16]
 800f636:	9905      	ldr	r1, [sp, #20]
 800f638:	2a20      	cmp	r2, #32
 800f63a:	d818      	bhi.n	800f66e <__hexnan+0x7e>
 800f63c:	9b02      	ldr	r3, [sp, #8]
 800f63e:	459b      	cmp	fp, r3
 800f640:	dd13      	ble.n	800f66a <__hexnan+0x7a>
 800f642:	454c      	cmp	r4, r9
 800f644:	d206      	bcs.n	800f654 <__hexnan+0x64>
 800f646:	2d07      	cmp	r5, #7
 800f648:	dc04      	bgt.n	800f654 <__hexnan+0x64>
 800f64a:	462a      	mov	r2, r5
 800f64c:	4649      	mov	r1, r9
 800f64e:	4620      	mov	r0, r4
 800f650:	f7ff ffa8 	bl	800f5a4 <L_shift>
 800f654:	4544      	cmp	r4, r8
 800f656:	d952      	bls.n	800f6fe <__hexnan+0x10e>
 800f658:	2300      	movs	r3, #0
 800f65a:	f1a4 0904 	sub.w	r9, r4, #4
 800f65e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f662:	f8cd b008 	str.w	fp, [sp, #8]
 800f666:	464c      	mov	r4, r9
 800f668:	461d      	mov	r5, r3
 800f66a:	9903      	ldr	r1, [sp, #12]
 800f66c:	e7d7      	b.n	800f61e <__hexnan+0x2e>
 800f66e:	2a29      	cmp	r2, #41	@ 0x29
 800f670:	d157      	bne.n	800f722 <__hexnan+0x132>
 800f672:	3102      	adds	r1, #2
 800f674:	f8ca 1000 	str.w	r1, [sl]
 800f678:	f1bb 0f00 	cmp.w	fp, #0
 800f67c:	d051      	beq.n	800f722 <__hexnan+0x132>
 800f67e:	454c      	cmp	r4, r9
 800f680:	d206      	bcs.n	800f690 <__hexnan+0xa0>
 800f682:	2d07      	cmp	r5, #7
 800f684:	dc04      	bgt.n	800f690 <__hexnan+0xa0>
 800f686:	462a      	mov	r2, r5
 800f688:	4649      	mov	r1, r9
 800f68a:	4620      	mov	r0, r4
 800f68c:	f7ff ff8a 	bl	800f5a4 <L_shift>
 800f690:	4544      	cmp	r4, r8
 800f692:	d936      	bls.n	800f702 <__hexnan+0x112>
 800f694:	f1a8 0204 	sub.w	r2, r8, #4
 800f698:	4623      	mov	r3, r4
 800f69a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f69e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f6a2:	429f      	cmp	r7, r3
 800f6a4:	d2f9      	bcs.n	800f69a <__hexnan+0xaa>
 800f6a6:	1b3b      	subs	r3, r7, r4
 800f6a8:	f023 0303 	bic.w	r3, r3, #3
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	3401      	adds	r4, #1
 800f6b0:	3e03      	subs	r6, #3
 800f6b2:	42b4      	cmp	r4, r6
 800f6b4:	bf88      	it	hi
 800f6b6:	2304      	movhi	r3, #4
 800f6b8:	4443      	add	r3, r8
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f843 2b04 	str.w	r2, [r3], #4
 800f6c0:	429f      	cmp	r7, r3
 800f6c2:	d2fb      	bcs.n	800f6bc <__hexnan+0xcc>
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	b91b      	cbnz	r3, 800f6d0 <__hexnan+0xe0>
 800f6c8:	4547      	cmp	r7, r8
 800f6ca:	d128      	bne.n	800f71e <__hexnan+0x12e>
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	603b      	str	r3, [r7, #0]
 800f6d0:	2005      	movs	r0, #5
 800f6d2:	b007      	add	sp, #28
 800f6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d8:	3501      	adds	r5, #1
 800f6da:	2d08      	cmp	r5, #8
 800f6dc:	f10b 0b01 	add.w	fp, fp, #1
 800f6e0:	dd06      	ble.n	800f6f0 <__hexnan+0x100>
 800f6e2:	4544      	cmp	r4, r8
 800f6e4:	d9c1      	bls.n	800f66a <__hexnan+0x7a>
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f6ec:	2501      	movs	r5, #1
 800f6ee:	3c04      	subs	r4, #4
 800f6f0:	6822      	ldr	r2, [r4, #0]
 800f6f2:	f000 000f 	and.w	r0, r0, #15
 800f6f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f6fa:	6020      	str	r0, [r4, #0]
 800f6fc:	e7b5      	b.n	800f66a <__hexnan+0x7a>
 800f6fe:	2508      	movs	r5, #8
 800f700:	e7b3      	b.n	800f66a <__hexnan+0x7a>
 800f702:	9b01      	ldr	r3, [sp, #4]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d0dd      	beq.n	800f6c4 <__hexnan+0xd4>
 800f708:	f1c3 0320 	rsb	r3, r3, #32
 800f70c:	f04f 32ff 	mov.w	r2, #4294967295
 800f710:	40da      	lsrs	r2, r3
 800f712:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f716:	4013      	ands	r3, r2
 800f718:	f846 3c04 	str.w	r3, [r6, #-4]
 800f71c:	e7d2      	b.n	800f6c4 <__hexnan+0xd4>
 800f71e:	3f04      	subs	r7, #4
 800f720:	e7d0      	b.n	800f6c4 <__hexnan+0xd4>
 800f722:	2004      	movs	r0, #4
 800f724:	e7d5      	b.n	800f6d2 <__hexnan+0xe2>

0800f726 <__ascii_mbtowc>:
 800f726:	b082      	sub	sp, #8
 800f728:	b901      	cbnz	r1, 800f72c <__ascii_mbtowc+0x6>
 800f72a:	a901      	add	r1, sp, #4
 800f72c:	b142      	cbz	r2, 800f740 <__ascii_mbtowc+0x1a>
 800f72e:	b14b      	cbz	r3, 800f744 <__ascii_mbtowc+0x1e>
 800f730:	7813      	ldrb	r3, [r2, #0]
 800f732:	600b      	str	r3, [r1, #0]
 800f734:	7812      	ldrb	r2, [r2, #0]
 800f736:	1e10      	subs	r0, r2, #0
 800f738:	bf18      	it	ne
 800f73a:	2001      	movne	r0, #1
 800f73c:	b002      	add	sp, #8
 800f73e:	4770      	bx	lr
 800f740:	4610      	mov	r0, r2
 800f742:	e7fb      	b.n	800f73c <__ascii_mbtowc+0x16>
 800f744:	f06f 0001 	mvn.w	r0, #1
 800f748:	e7f8      	b.n	800f73c <__ascii_mbtowc+0x16>
	...

0800f74c <_Balloc>:
 800f74c:	b570      	push	{r4, r5, r6, lr}
 800f74e:	69c6      	ldr	r6, [r0, #28]
 800f750:	4604      	mov	r4, r0
 800f752:	460d      	mov	r5, r1
 800f754:	b976      	cbnz	r6, 800f774 <_Balloc+0x28>
 800f756:	2010      	movs	r0, #16
 800f758:	f7fc fd8e 	bl	800c278 <malloc>
 800f75c:	4602      	mov	r2, r0
 800f75e:	61e0      	str	r0, [r4, #28]
 800f760:	b920      	cbnz	r0, 800f76c <_Balloc+0x20>
 800f762:	4b18      	ldr	r3, [pc, #96]	@ (800f7c4 <_Balloc+0x78>)
 800f764:	4818      	ldr	r0, [pc, #96]	@ (800f7c8 <_Balloc+0x7c>)
 800f766:	216b      	movs	r1, #107	@ 0x6b
 800f768:	f7fe fdf0 	bl	800e34c <__assert_func>
 800f76c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f770:	6006      	str	r6, [r0, #0]
 800f772:	60c6      	str	r6, [r0, #12]
 800f774:	69e6      	ldr	r6, [r4, #28]
 800f776:	68f3      	ldr	r3, [r6, #12]
 800f778:	b183      	cbz	r3, 800f79c <_Balloc+0x50>
 800f77a:	69e3      	ldr	r3, [r4, #28]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f782:	b9b8      	cbnz	r0, 800f7b4 <_Balloc+0x68>
 800f784:	2101      	movs	r1, #1
 800f786:	fa01 f605 	lsl.w	r6, r1, r5
 800f78a:	1d72      	adds	r2, r6, #5
 800f78c:	0092      	lsls	r2, r2, #2
 800f78e:	4620      	mov	r0, r4
 800f790:	f001 fa66 	bl	8010c60 <_calloc_r>
 800f794:	b160      	cbz	r0, 800f7b0 <_Balloc+0x64>
 800f796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f79a:	e00e      	b.n	800f7ba <_Balloc+0x6e>
 800f79c:	2221      	movs	r2, #33	@ 0x21
 800f79e:	2104      	movs	r1, #4
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f001 fa5d 	bl	8010c60 <_calloc_r>
 800f7a6:	69e3      	ldr	r3, [r4, #28]
 800f7a8:	60f0      	str	r0, [r6, #12]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d1e4      	bne.n	800f77a <_Balloc+0x2e>
 800f7b0:	2000      	movs	r0, #0
 800f7b2:	bd70      	pop	{r4, r5, r6, pc}
 800f7b4:	6802      	ldr	r2, [r0, #0]
 800f7b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7c0:	e7f7      	b.n	800f7b2 <_Balloc+0x66>
 800f7c2:	bf00      	nop
 800f7c4:	08011590 	.word	0x08011590
 800f7c8:	0801171b 	.word	0x0801171b

0800f7cc <_Bfree>:
 800f7cc:	b570      	push	{r4, r5, r6, lr}
 800f7ce:	69c6      	ldr	r6, [r0, #28]
 800f7d0:	4605      	mov	r5, r0
 800f7d2:	460c      	mov	r4, r1
 800f7d4:	b976      	cbnz	r6, 800f7f4 <_Bfree+0x28>
 800f7d6:	2010      	movs	r0, #16
 800f7d8:	f7fc fd4e 	bl	800c278 <malloc>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	61e8      	str	r0, [r5, #28]
 800f7e0:	b920      	cbnz	r0, 800f7ec <_Bfree+0x20>
 800f7e2:	4b09      	ldr	r3, [pc, #36]	@ (800f808 <_Bfree+0x3c>)
 800f7e4:	4809      	ldr	r0, [pc, #36]	@ (800f80c <_Bfree+0x40>)
 800f7e6:	218f      	movs	r1, #143	@ 0x8f
 800f7e8:	f7fe fdb0 	bl	800e34c <__assert_func>
 800f7ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7f0:	6006      	str	r6, [r0, #0]
 800f7f2:	60c6      	str	r6, [r0, #12]
 800f7f4:	b13c      	cbz	r4, 800f806 <_Bfree+0x3a>
 800f7f6:	69eb      	ldr	r3, [r5, #28]
 800f7f8:	6862      	ldr	r2, [r4, #4]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f800:	6021      	str	r1, [r4, #0]
 800f802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f806:	bd70      	pop	{r4, r5, r6, pc}
 800f808:	08011590 	.word	0x08011590
 800f80c:	0801171b 	.word	0x0801171b

0800f810 <__multadd>:
 800f810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f814:	690d      	ldr	r5, [r1, #16]
 800f816:	4607      	mov	r7, r0
 800f818:	460c      	mov	r4, r1
 800f81a:	461e      	mov	r6, r3
 800f81c:	f101 0c14 	add.w	ip, r1, #20
 800f820:	2000      	movs	r0, #0
 800f822:	f8dc 3000 	ldr.w	r3, [ip]
 800f826:	b299      	uxth	r1, r3
 800f828:	fb02 6101 	mla	r1, r2, r1, r6
 800f82c:	0c1e      	lsrs	r6, r3, #16
 800f82e:	0c0b      	lsrs	r3, r1, #16
 800f830:	fb02 3306 	mla	r3, r2, r6, r3
 800f834:	b289      	uxth	r1, r1
 800f836:	3001      	adds	r0, #1
 800f838:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f83c:	4285      	cmp	r5, r0
 800f83e:	f84c 1b04 	str.w	r1, [ip], #4
 800f842:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f846:	dcec      	bgt.n	800f822 <__multadd+0x12>
 800f848:	b30e      	cbz	r6, 800f88e <__multadd+0x7e>
 800f84a:	68a3      	ldr	r3, [r4, #8]
 800f84c:	42ab      	cmp	r3, r5
 800f84e:	dc19      	bgt.n	800f884 <__multadd+0x74>
 800f850:	6861      	ldr	r1, [r4, #4]
 800f852:	4638      	mov	r0, r7
 800f854:	3101      	adds	r1, #1
 800f856:	f7ff ff79 	bl	800f74c <_Balloc>
 800f85a:	4680      	mov	r8, r0
 800f85c:	b928      	cbnz	r0, 800f86a <__multadd+0x5a>
 800f85e:	4602      	mov	r2, r0
 800f860:	4b0c      	ldr	r3, [pc, #48]	@ (800f894 <__multadd+0x84>)
 800f862:	480d      	ldr	r0, [pc, #52]	@ (800f898 <__multadd+0x88>)
 800f864:	21ba      	movs	r1, #186	@ 0xba
 800f866:	f7fe fd71 	bl	800e34c <__assert_func>
 800f86a:	6922      	ldr	r2, [r4, #16]
 800f86c:	3202      	adds	r2, #2
 800f86e:	f104 010c 	add.w	r1, r4, #12
 800f872:	0092      	lsls	r2, r2, #2
 800f874:	300c      	adds	r0, #12
 800f876:	f7fe fd4a 	bl	800e30e <memcpy>
 800f87a:	4621      	mov	r1, r4
 800f87c:	4638      	mov	r0, r7
 800f87e:	f7ff ffa5 	bl	800f7cc <_Bfree>
 800f882:	4644      	mov	r4, r8
 800f884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f888:	3501      	adds	r5, #1
 800f88a:	615e      	str	r6, [r3, #20]
 800f88c:	6125      	str	r5, [r4, #16]
 800f88e:	4620      	mov	r0, r4
 800f890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f894:	080116aa 	.word	0x080116aa
 800f898:	0801171b 	.word	0x0801171b

0800f89c <__s2b>:
 800f89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8a0:	460c      	mov	r4, r1
 800f8a2:	4615      	mov	r5, r2
 800f8a4:	461f      	mov	r7, r3
 800f8a6:	2209      	movs	r2, #9
 800f8a8:	3308      	adds	r3, #8
 800f8aa:	4606      	mov	r6, r0
 800f8ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	db09      	blt.n	800f8cc <__s2b+0x30>
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	f7ff ff47 	bl	800f74c <_Balloc>
 800f8be:	b940      	cbnz	r0, 800f8d2 <__s2b+0x36>
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	4b19      	ldr	r3, [pc, #100]	@ (800f928 <__s2b+0x8c>)
 800f8c4:	4819      	ldr	r0, [pc, #100]	@ (800f92c <__s2b+0x90>)
 800f8c6:	21d3      	movs	r1, #211	@ 0xd3
 800f8c8:	f7fe fd40 	bl	800e34c <__assert_func>
 800f8cc:	0052      	lsls	r2, r2, #1
 800f8ce:	3101      	adds	r1, #1
 800f8d0:	e7f0      	b.n	800f8b4 <__s2b+0x18>
 800f8d2:	9b08      	ldr	r3, [sp, #32]
 800f8d4:	6143      	str	r3, [r0, #20]
 800f8d6:	2d09      	cmp	r5, #9
 800f8d8:	f04f 0301 	mov.w	r3, #1
 800f8dc:	6103      	str	r3, [r0, #16]
 800f8de:	dd16      	ble.n	800f90e <__s2b+0x72>
 800f8e0:	f104 0909 	add.w	r9, r4, #9
 800f8e4:	46c8      	mov	r8, r9
 800f8e6:	442c      	add	r4, r5
 800f8e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f8ec:	4601      	mov	r1, r0
 800f8ee:	3b30      	subs	r3, #48	@ 0x30
 800f8f0:	220a      	movs	r2, #10
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	f7ff ff8c 	bl	800f810 <__multadd>
 800f8f8:	45a0      	cmp	r8, r4
 800f8fa:	d1f5      	bne.n	800f8e8 <__s2b+0x4c>
 800f8fc:	f1a5 0408 	sub.w	r4, r5, #8
 800f900:	444c      	add	r4, r9
 800f902:	1b2d      	subs	r5, r5, r4
 800f904:	1963      	adds	r3, r4, r5
 800f906:	42bb      	cmp	r3, r7
 800f908:	db04      	blt.n	800f914 <__s2b+0x78>
 800f90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f90e:	340a      	adds	r4, #10
 800f910:	2509      	movs	r5, #9
 800f912:	e7f6      	b.n	800f902 <__s2b+0x66>
 800f914:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f918:	4601      	mov	r1, r0
 800f91a:	3b30      	subs	r3, #48	@ 0x30
 800f91c:	220a      	movs	r2, #10
 800f91e:	4630      	mov	r0, r6
 800f920:	f7ff ff76 	bl	800f810 <__multadd>
 800f924:	e7ee      	b.n	800f904 <__s2b+0x68>
 800f926:	bf00      	nop
 800f928:	080116aa 	.word	0x080116aa
 800f92c:	0801171b 	.word	0x0801171b

0800f930 <__hi0bits>:
 800f930:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f934:	4603      	mov	r3, r0
 800f936:	bf36      	itet	cc
 800f938:	0403      	lslcc	r3, r0, #16
 800f93a:	2000      	movcs	r0, #0
 800f93c:	2010      	movcc	r0, #16
 800f93e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f942:	bf3c      	itt	cc
 800f944:	021b      	lslcc	r3, r3, #8
 800f946:	3008      	addcc	r0, #8
 800f948:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f94c:	bf3c      	itt	cc
 800f94e:	011b      	lslcc	r3, r3, #4
 800f950:	3004      	addcc	r0, #4
 800f952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f956:	bf3c      	itt	cc
 800f958:	009b      	lslcc	r3, r3, #2
 800f95a:	3002      	addcc	r0, #2
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	db05      	blt.n	800f96c <__hi0bits+0x3c>
 800f960:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f964:	f100 0001 	add.w	r0, r0, #1
 800f968:	bf08      	it	eq
 800f96a:	2020      	moveq	r0, #32
 800f96c:	4770      	bx	lr

0800f96e <__lo0bits>:
 800f96e:	6803      	ldr	r3, [r0, #0]
 800f970:	4602      	mov	r2, r0
 800f972:	f013 0007 	ands.w	r0, r3, #7
 800f976:	d00b      	beq.n	800f990 <__lo0bits+0x22>
 800f978:	07d9      	lsls	r1, r3, #31
 800f97a:	d421      	bmi.n	800f9c0 <__lo0bits+0x52>
 800f97c:	0798      	lsls	r0, r3, #30
 800f97e:	bf49      	itett	mi
 800f980:	085b      	lsrmi	r3, r3, #1
 800f982:	089b      	lsrpl	r3, r3, #2
 800f984:	2001      	movmi	r0, #1
 800f986:	6013      	strmi	r3, [r2, #0]
 800f988:	bf5c      	itt	pl
 800f98a:	6013      	strpl	r3, [r2, #0]
 800f98c:	2002      	movpl	r0, #2
 800f98e:	4770      	bx	lr
 800f990:	b299      	uxth	r1, r3
 800f992:	b909      	cbnz	r1, 800f998 <__lo0bits+0x2a>
 800f994:	0c1b      	lsrs	r3, r3, #16
 800f996:	2010      	movs	r0, #16
 800f998:	b2d9      	uxtb	r1, r3
 800f99a:	b909      	cbnz	r1, 800f9a0 <__lo0bits+0x32>
 800f99c:	3008      	adds	r0, #8
 800f99e:	0a1b      	lsrs	r3, r3, #8
 800f9a0:	0719      	lsls	r1, r3, #28
 800f9a2:	bf04      	itt	eq
 800f9a4:	091b      	lsreq	r3, r3, #4
 800f9a6:	3004      	addeq	r0, #4
 800f9a8:	0799      	lsls	r1, r3, #30
 800f9aa:	bf04      	itt	eq
 800f9ac:	089b      	lsreq	r3, r3, #2
 800f9ae:	3002      	addeq	r0, #2
 800f9b0:	07d9      	lsls	r1, r3, #31
 800f9b2:	d403      	bmi.n	800f9bc <__lo0bits+0x4e>
 800f9b4:	085b      	lsrs	r3, r3, #1
 800f9b6:	f100 0001 	add.w	r0, r0, #1
 800f9ba:	d003      	beq.n	800f9c4 <__lo0bits+0x56>
 800f9bc:	6013      	str	r3, [r2, #0]
 800f9be:	4770      	bx	lr
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	4770      	bx	lr
 800f9c4:	2020      	movs	r0, #32
 800f9c6:	4770      	bx	lr

0800f9c8 <__i2b>:
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	460c      	mov	r4, r1
 800f9cc:	2101      	movs	r1, #1
 800f9ce:	f7ff febd 	bl	800f74c <_Balloc>
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	b928      	cbnz	r0, 800f9e2 <__i2b+0x1a>
 800f9d6:	4b05      	ldr	r3, [pc, #20]	@ (800f9ec <__i2b+0x24>)
 800f9d8:	4805      	ldr	r0, [pc, #20]	@ (800f9f0 <__i2b+0x28>)
 800f9da:	f240 1145 	movw	r1, #325	@ 0x145
 800f9de:	f7fe fcb5 	bl	800e34c <__assert_func>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	6144      	str	r4, [r0, #20]
 800f9e6:	6103      	str	r3, [r0, #16]
 800f9e8:	bd10      	pop	{r4, pc}
 800f9ea:	bf00      	nop
 800f9ec:	080116aa 	.word	0x080116aa
 800f9f0:	0801171b 	.word	0x0801171b

0800f9f4 <__multiply>:
 800f9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f8:	4614      	mov	r4, r2
 800f9fa:	690a      	ldr	r2, [r1, #16]
 800f9fc:	6923      	ldr	r3, [r4, #16]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	bfa8      	it	ge
 800fa02:	4623      	movge	r3, r4
 800fa04:	460f      	mov	r7, r1
 800fa06:	bfa4      	itt	ge
 800fa08:	460c      	movge	r4, r1
 800fa0a:	461f      	movge	r7, r3
 800fa0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fa10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fa14:	68a3      	ldr	r3, [r4, #8]
 800fa16:	6861      	ldr	r1, [r4, #4]
 800fa18:	eb0a 0609 	add.w	r6, sl, r9
 800fa1c:	42b3      	cmp	r3, r6
 800fa1e:	b085      	sub	sp, #20
 800fa20:	bfb8      	it	lt
 800fa22:	3101      	addlt	r1, #1
 800fa24:	f7ff fe92 	bl	800f74c <_Balloc>
 800fa28:	b930      	cbnz	r0, 800fa38 <__multiply+0x44>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	4b44      	ldr	r3, [pc, #272]	@ (800fb40 <__multiply+0x14c>)
 800fa2e:	4845      	ldr	r0, [pc, #276]	@ (800fb44 <__multiply+0x150>)
 800fa30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fa34:	f7fe fc8a 	bl	800e34c <__assert_func>
 800fa38:	f100 0514 	add.w	r5, r0, #20
 800fa3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa40:	462b      	mov	r3, r5
 800fa42:	2200      	movs	r2, #0
 800fa44:	4543      	cmp	r3, r8
 800fa46:	d321      	bcc.n	800fa8c <__multiply+0x98>
 800fa48:	f107 0114 	add.w	r1, r7, #20
 800fa4c:	f104 0214 	add.w	r2, r4, #20
 800fa50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fa54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fa58:	9302      	str	r3, [sp, #8]
 800fa5a:	1b13      	subs	r3, r2, r4
 800fa5c:	3b15      	subs	r3, #21
 800fa5e:	f023 0303 	bic.w	r3, r3, #3
 800fa62:	3304      	adds	r3, #4
 800fa64:	f104 0715 	add.w	r7, r4, #21
 800fa68:	42ba      	cmp	r2, r7
 800fa6a:	bf38      	it	cc
 800fa6c:	2304      	movcc	r3, #4
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	9b02      	ldr	r3, [sp, #8]
 800fa72:	9103      	str	r1, [sp, #12]
 800fa74:	428b      	cmp	r3, r1
 800fa76:	d80c      	bhi.n	800fa92 <__multiply+0x9e>
 800fa78:	2e00      	cmp	r6, #0
 800fa7a:	dd03      	ble.n	800fa84 <__multiply+0x90>
 800fa7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d05b      	beq.n	800fb3c <__multiply+0x148>
 800fa84:	6106      	str	r6, [r0, #16]
 800fa86:	b005      	add	sp, #20
 800fa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa8c:	f843 2b04 	str.w	r2, [r3], #4
 800fa90:	e7d8      	b.n	800fa44 <__multiply+0x50>
 800fa92:	f8b1 a000 	ldrh.w	sl, [r1]
 800fa96:	f1ba 0f00 	cmp.w	sl, #0
 800fa9a:	d024      	beq.n	800fae6 <__multiply+0xf2>
 800fa9c:	f104 0e14 	add.w	lr, r4, #20
 800faa0:	46a9      	mov	r9, r5
 800faa2:	f04f 0c00 	mov.w	ip, #0
 800faa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800faaa:	f8d9 3000 	ldr.w	r3, [r9]
 800faae:	fa1f fb87 	uxth.w	fp, r7
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	fb0a 330b 	mla	r3, sl, fp, r3
 800fab8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fabc:	f8d9 7000 	ldr.w	r7, [r9]
 800fac0:	4463      	add	r3, ip
 800fac2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fac6:	fb0a c70b 	mla	r7, sl, fp, ip
 800faca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800face:	b29b      	uxth	r3, r3
 800fad0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fad4:	4572      	cmp	r2, lr
 800fad6:	f849 3b04 	str.w	r3, [r9], #4
 800fada:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fade:	d8e2      	bhi.n	800faa6 <__multiply+0xb2>
 800fae0:	9b01      	ldr	r3, [sp, #4]
 800fae2:	f845 c003 	str.w	ip, [r5, r3]
 800fae6:	9b03      	ldr	r3, [sp, #12]
 800fae8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800faec:	3104      	adds	r1, #4
 800faee:	f1b9 0f00 	cmp.w	r9, #0
 800faf2:	d021      	beq.n	800fb38 <__multiply+0x144>
 800faf4:	682b      	ldr	r3, [r5, #0]
 800faf6:	f104 0c14 	add.w	ip, r4, #20
 800fafa:	46ae      	mov	lr, r5
 800fafc:	f04f 0a00 	mov.w	sl, #0
 800fb00:	f8bc b000 	ldrh.w	fp, [ip]
 800fb04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fb08:	fb09 770b 	mla	r7, r9, fp, r7
 800fb0c:	4457      	add	r7, sl
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fb14:	f84e 3b04 	str.w	r3, [lr], #4
 800fb18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fb1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb20:	f8be 3000 	ldrh.w	r3, [lr]
 800fb24:	fb09 330a 	mla	r3, r9, sl, r3
 800fb28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fb2c:	4562      	cmp	r2, ip
 800fb2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb32:	d8e5      	bhi.n	800fb00 <__multiply+0x10c>
 800fb34:	9f01      	ldr	r7, [sp, #4]
 800fb36:	51eb      	str	r3, [r5, r7]
 800fb38:	3504      	adds	r5, #4
 800fb3a:	e799      	b.n	800fa70 <__multiply+0x7c>
 800fb3c:	3e01      	subs	r6, #1
 800fb3e:	e79b      	b.n	800fa78 <__multiply+0x84>
 800fb40:	080116aa 	.word	0x080116aa
 800fb44:	0801171b 	.word	0x0801171b

0800fb48 <__pow5mult>:
 800fb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb4c:	4615      	mov	r5, r2
 800fb4e:	f012 0203 	ands.w	r2, r2, #3
 800fb52:	4607      	mov	r7, r0
 800fb54:	460e      	mov	r6, r1
 800fb56:	d007      	beq.n	800fb68 <__pow5mult+0x20>
 800fb58:	4c25      	ldr	r4, [pc, #148]	@ (800fbf0 <__pow5mult+0xa8>)
 800fb5a:	3a01      	subs	r2, #1
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb62:	f7ff fe55 	bl	800f810 <__multadd>
 800fb66:	4606      	mov	r6, r0
 800fb68:	10ad      	asrs	r5, r5, #2
 800fb6a:	d03d      	beq.n	800fbe8 <__pow5mult+0xa0>
 800fb6c:	69fc      	ldr	r4, [r7, #28]
 800fb6e:	b97c      	cbnz	r4, 800fb90 <__pow5mult+0x48>
 800fb70:	2010      	movs	r0, #16
 800fb72:	f7fc fb81 	bl	800c278 <malloc>
 800fb76:	4602      	mov	r2, r0
 800fb78:	61f8      	str	r0, [r7, #28]
 800fb7a:	b928      	cbnz	r0, 800fb88 <__pow5mult+0x40>
 800fb7c:	4b1d      	ldr	r3, [pc, #116]	@ (800fbf4 <__pow5mult+0xac>)
 800fb7e:	481e      	ldr	r0, [pc, #120]	@ (800fbf8 <__pow5mult+0xb0>)
 800fb80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fb84:	f7fe fbe2 	bl	800e34c <__assert_func>
 800fb88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb8c:	6004      	str	r4, [r0, #0]
 800fb8e:	60c4      	str	r4, [r0, #12]
 800fb90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fb94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb98:	b94c      	cbnz	r4, 800fbae <__pow5mult+0x66>
 800fb9a:	f240 2171 	movw	r1, #625	@ 0x271
 800fb9e:	4638      	mov	r0, r7
 800fba0:	f7ff ff12 	bl	800f9c8 <__i2b>
 800fba4:	2300      	movs	r3, #0
 800fba6:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbaa:	4604      	mov	r4, r0
 800fbac:	6003      	str	r3, [r0, #0]
 800fbae:	f04f 0900 	mov.w	r9, #0
 800fbb2:	07eb      	lsls	r3, r5, #31
 800fbb4:	d50a      	bpl.n	800fbcc <__pow5mult+0x84>
 800fbb6:	4631      	mov	r1, r6
 800fbb8:	4622      	mov	r2, r4
 800fbba:	4638      	mov	r0, r7
 800fbbc:	f7ff ff1a 	bl	800f9f4 <__multiply>
 800fbc0:	4631      	mov	r1, r6
 800fbc2:	4680      	mov	r8, r0
 800fbc4:	4638      	mov	r0, r7
 800fbc6:	f7ff fe01 	bl	800f7cc <_Bfree>
 800fbca:	4646      	mov	r6, r8
 800fbcc:	106d      	asrs	r5, r5, #1
 800fbce:	d00b      	beq.n	800fbe8 <__pow5mult+0xa0>
 800fbd0:	6820      	ldr	r0, [r4, #0]
 800fbd2:	b938      	cbnz	r0, 800fbe4 <__pow5mult+0x9c>
 800fbd4:	4622      	mov	r2, r4
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	4638      	mov	r0, r7
 800fbda:	f7ff ff0b 	bl	800f9f4 <__multiply>
 800fbde:	6020      	str	r0, [r4, #0]
 800fbe0:	f8c0 9000 	str.w	r9, [r0]
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	e7e4      	b.n	800fbb2 <__pow5mult+0x6a>
 800fbe8:	4630      	mov	r0, r6
 800fbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbee:	bf00      	nop
 800fbf0:	08011774 	.word	0x08011774
 800fbf4:	08011590 	.word	0x08011590
 800fbf8:	0801171b 	.word	0x0801171b

0800fbfc <__lshift>:
 800fbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc00:	460c      	mov	r4, r1
 800fc02:	6849      	ldr	r1, [r1, #4]
 800fc04:	6923      	ldr	r3, [r4, #16]
 800fc06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc0a:	68a3      	ldr	r3, [r4, #8]
 800fc0c:	4607      	mov	r7, r0
 800fc0e:	4691      	mov	r9, r2
 800fc10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc14:	f108 0601 	add.w	r6, r8, #1
 800fc18:	42b3      	cmp	r3, r6
 800fc1a:	db0b      	blt.n	800fc34 <__lshift+0x38>
 800fc1c:	4638      	mov	r0, r7
 800fc1e:	f7ff fd95 	bl	800f74c <_Balloc>
 800fc22:	4605      	mov	r5, r0
 800fc24:	b948      	cbnz	r0, 800fc3a <__lshift+0x3e>
 800fc26:	4602      	mov	r2, r0
 800fc28:	4b28      	ldr	r3, [pc, #160]	@ (800fccc <__lshift+0xd0>)
 800fc2a:	4829      	ldr	r0, [pc, #164]	@ (800fcd0 <__lshift+0xd4>)
 800fc2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fc30:	f7fe fb8c 	bl	800e34c <__assert_func>
 800fc34:	3101      	adds	r1, #1
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	e7ee      	b.n	800fc18 <__lshift+0x1c>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	f100 0114 	add.w	r1, r0, #20
 800fc40:	f100 0210 	add.w	r2, r0, #16
 800fc44:	4618      	mov	r0, r3
 800fc46:	4553      	cmp	r3, sl
 800fc48:	db33      	blt.n	800fcb2 <__lshift+0xb6>
 800fc4a:	6920      	ldr	r0, [r4, #16]
 800fc4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc50:	f104 0314 	add.w	r3, r4, #20
 800fc54:	f019 091f 	ands.w	r9, r9, #31
 800fc58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc60:	d02b      	beq.n	800fcba <__lshift+0xbe>
 800fc62:	f1c9 0e20 	rsb	lr, r9, #32
 800fc66:	468a      	mov	sl, r1
 800fc68:	2200      	movs	r2, #0
 800fc6a:	6818      	ldr	r0, [r3, #0]
 800fc6c:	fa00 f009 	lsl.w	r0, r0, r9
 800fc70:	4310      	orrs	r0, r2
 800fc72:	f84a 0b04 	str.w	r0, [sl], #4
 800fc76:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc7a:	459c      	cmp	ip, r3
 800fc7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc80:	d8f3      	bhi.n	800fc6a <__lshift+0x6e>
 800fc82:	ebac 0304 	sub.w	r3, ip, r4
 800fc86:	3b15      	subs	r3, #21
 800fc88:	f023 0303 	bic.w	r3, r3, #3
 800fc8c:	3304      	adds	r3, #4
 800fc8e:	f104 0015 	add.w	r0, r4, #21
 800fc92:	4584      	cmp	ip, r0
 800fc94:	bf38      	it	cc
 800fc96:	2304      	movcc	r3, #4
 800fc98:	50ca      	str	r2, [r1, r3]
 800fc9a:	b10a      	cbz	r2, 800fca0 <__lshift+0xa4>
 800fc9c:	f108 0602 	add.w	r6, r8, #2
 800fca0:	3e01      	subs	r6, #1
 800fca2:	4638      	mov	r0, r7
 800fca4:	612e      	str	r6, [r5, #16]
 800fca6:	4621      	mov	r1, r4
 800fca8:	f7ff fd90 	bl	800f7cc <_Bfree>
 800fcac:	4628      	mov	r0, r5
 800fcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	e7c5      	b.n	800fc46 <__lshift+0x4a>
 800fcba:	3904      	subs	r1, #4
 800fcbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fcc4:	459c      	cmp	ip, r3
 800fcc6:	d8f9      	bhi.n	800fcbc <__lshift+0xc0>
 800fcc8:	e7ea      	b.n	800fca0 <__lshift+0xa4>
 800fcca:	bf00      	nop
 800fccc:	080116aa 	.word	0x080116aa
 800fcd0:	0801171b 	.word	0x0801171b

0800fcd4 <__mcmp>:
 800fcd4:	690a      	ldr	r2, [r1, #16]
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	6900      	ldr	r0, [r0, #16]
 800fcda:	1a80      	subs	r0, r0, r2
 800fcdc:	b530      	push	{r4, r5, lr}
 800fcde:	d10e      	bne.n	800fcfe <__mcmp+0x2a>
 800fce0:	3314      	adds	r3, #20
 800fce2:	3114      	adds	r1, #20
 800fce4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fce8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fcec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fcf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fcf4:	4295      	cmp	r5, r2
 800fcf6:	d003      	beq.n	800fd00 <__mcmp+0x2c>
 800fcf8:	d205      	bcs.n	800fd06 <__mcmp+0x32>
 800fcfa:	f04f 30ff 	mov.w	r0, #4294967295
 800fcfe:	bd30      	pop	{r4, r5, pc}
 800fd00:	42a3      	cmp	r3, r4
 800fd02:	d3f3      	bcc.n	800fcec <__mcmp+0x18>
 800fd04:	e7fb      	b.n	800fcfe <__mcmp+0x2a>
 800fd06:	2001      	movs	r0, #1
 800fd08:	e7f9      	b.n	800fcfe <__mcmp+0x2a>
	...

0800fd0c <__mdiff>:
 800fd0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd10:	4689      	mov	r9, r1
 800fd12:	4606      	mov	r6, r0
 800fd14:	4611      	mov	r1, r2
 800fd16:	4648      	mov	r0, r9
 800fd18:	4614      	mov	r4, r2
 800fd1a:	f7ff ffdb 	bl	800fcd4 <__mcmp>
 800fd1e:	1e05      	subs	r5, r0, #0
 800fd20:	d112      	bne.n	800fd48 <__mdiff+0x3c>
 800fd22:	4629      	mov	r1, r5
 800fd24:	4630      	mov	r0, r6
 800fd26:	f7ff fd11 	bl	800f74c <_Balloc>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	b928      	cbnz	r0, 800fd3a <__mdiff+0x2e>
 800fd2e:	4b3f      	ldr	r3, [pc, #252]	@ (800fe2c <__mdiff+0x120>)
 800fd30:	f240 2137 	movw	r1, #567	@ 0x237
 800fd34:	483e      	ldr	r0, [pc, #248]	@ (800fe30 <__mdiff+0x124>)
 800fd36:	f7fe fb09 	bl	800e34c <__assert_func>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd40:	4610      	mov	r0, r2
 800fd42:	b003      	add	sp, #12
 800fd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd48:	bfbc      	itt	lt
 800fd4a:	464b      	movlt	r3, r9
 800fd4c:	46a1      	movlt	r9, r4
 800fd4e:	4630      	mov	r0, r6
 800fd50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fd54:	bfba      	itte	lt
 800fd56:	461c      	movlt	r4, r3
 800fd58:	2501      	movlt	r5, #1
 800fd5a:	2500      	movge	r5, #0
 800fd5c:	f7ff fcf6 	bl	800f74c <_Balloc>
 800fd60:	4602      	mov	r2, r0
 800fd62:	b918      	cbnz	r0, 800fd6c <__mdiff+0x60>
 800fd64:	4b31      	ldr	r3, [pc, #196]	@ (800fe2c <__mdiff+0x120>)
 800fd66:	f240 2145 	movw	r1, #581	@ 0x245
 800fd6a:	e7e3      	b.n	800fd34 <__mdiff+0x28>
 800fd6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fd70:	6926      	ldr	r6, [r4, #16]
 800fd72:	60c5      	str	r5, [r0, #12]
 800fd74:	f109 0310 	add.w	r3, r9, #16
 800fd78:	f109 0514 	add.w	r5, r9, #20
 800fd7c:	f104 0e14 	add.w	lr, r4, #20
 800fd80:	f100 0b14 	add.w	fp, r0, #20
 800fd84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fd88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fd8c:	9301      	str	r3, [sp, #4]
 800fd8e:	46d9      	mov	r9, fp
 800fd90:	f04f 0c00 	mov.w	ip, #0
 800fd94:	9b01      	ldr	r3, [sp, #4]
 800fd96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fd9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fd9e:	9301      	str	r3, [sp, #4]
 800fda0:	fa1f f38a 	uxth.w	r3, sl
 800fda4:	4619      	mov	r1, r3
 800fda6:	b283      	uxth	r3, r0
 800fda8:	1acb      	subs	r3, r1, r3
 800fdaa:	0c00      	lsrs	r0, r0, #16
 800fdac:	4463      	add	r3, ip
 800fdae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fdb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fdbc:	4576      	cmp	r6, lr
 800fdbe:	f849 3b04 	str.w	r3, [r9], #4
 800fdc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fdc6:	d8e5      	bhi.n	800fd94 <__mdiff+0x88>
 800fdc8:	1b33      	subs	r3, r6, r4
 800fdca:	3b15      	subs	r3, #21
 800fdcc:	f023 0303 	bic.w	r3, r3, #3
 800fdd0:	3415      	adds	r4, #21
 800fdd2:	3304      	adds	r3, #4
 800fdd4:	42a6      	cmp	r6, r4
 800fdd6:	bf38      	it	cc
 800fdd8:	2304      	movcc	r3, #4
 800fdda:	441d      	add	r5, r3
 800fddc:	445b      	add	r3, fp
 800fdde:	461e      	mov	r6, r3
 800fde0:	462c      	mov	r4, r5
 800fde2:	4544      	cmp	r4, r8
 800fde4:	d30e      	bcc.n	800fe04 <__mdiff+0xf8>
 800fde6:	f108 0103 	add.w	r1, r8, #3
 800fdea:	1b49      	subs	r1, r1, r5
 800fdec:	f021 0103 	bic.w	r1, r1, #3
 800fdf0:	3d03      	subs	r5, #3
 800fdf2:	45a8      	cmp	r8, r5
 800fdf4:	bf38      	it	cc
 800fdf6:	2100      	movcc	r1, #0
 800fdf8:	440b      	add	r3, r1
 800fdfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fdfe:	b191      	cbz	r1, 800fe26 <__mdiff+0x11a>
 800fe00:	6117      	str	r7, [r2, #16]
 800fe02:	e79d      	b.n	800fd40 <__mdiff+0x34>
 800fe04:	f854 1b04 	ldr.w	r1, [r4], #4
 800fe08:	46e6      	mov	lr, ip
 800fe0a:	0c08      	lsrs	r0, r1, #16
 800fe0c:	fa1c fc81 	uxtah	ip, ip, r1
 800fe10:	4471      	add	r1, lr
 800fe12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fe16:	b289      	uxth	r1, r1
 800fe18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fe1c:	f846 1b04 	str.w	r1, [r6], #4
 800fe20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe24:	e7dd      	b.n	800fde2 <__mdiff+0xd6>
 800fe26:	3f01      	subs	r7, #1
 800fe28:	e7e7      	b.n	800fdfa <__mdiff+0xee>
 800fe2a:	bf00      	nop
 800fe2c:	080116aa 	.word	0x080116aa
 800fe30:	0801171b 	.word	0x0801171b

0800fe34 <__ulp>:
 800fe34:	b082      	sub	sp, #8
 800fe36:	ed8d 0b00 	vstr	d0, [sp]
 800fe3a:	9a01      	ldr	r2, [sp, #4]
 800fe3c:	4b0f      	ldr	r3, [pc, #60]	@ (800fe7c <__ulp+0x48>)
 800fe3e:	4013      	ands	r3, r2
 800fe40:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	dc08      	bgt.n	800fe5a <__ulp+0x26>
 800fe48:	425b      	negs	r3, r3
 800fe4a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fe4e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fe52:	da04      	bge.n	800fe5e <__ulp+0x2a>
 800fe54:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fe58:	4113      	asrs	r3, r2
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	e008      	b.n	800fe70 <__ulp+0x3c>
 800fe5e:	f1a2 0314 	sub.w	r3, r2, #20
 800fe62:	2b1e      	cmp	r3, #30
 800fe64:	bfda      	itte	le
 800fe66:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fe6a:	40da      	lsrle	r2, r3
 800fe6c:	2201      	movgt	r2, #1
 800fe6e:	2300      	movs	r3, #0
 800fe70:	4619      	mov	r1, r3
 800fe72:	4610      	mov	r0, r2
 800fe74:	ec41 0b10 	vmov	d0, r0, r1
 800fe78:	b002      	add	sp, #8
 800fe7a:	4770      	bx	lr
 800fe7c:	7ff00000 	.word	0x7ff00000

0800fe80 <__b2d>:
 800fe80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe84:	6906      	ldr	r6, [r0, #16]
 800fe86:	f100 0814 	add.w	r8, r0, #20
 800fe8a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fe8e:	1f37      	subs	r7, r6, #4
 800fe90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fe94:	4610      	mov	r0, r2
 800fe96:	f7ff fd4b 	bl	800f930 <__hi0bits>
 800fe9a:	f1c0 0320 	rsb	r3, r0, #32
 800fe9e:	280a      	cmp	r0, #10
 800fea0:	600b      	str	r3, [r1, #0]
 800fea2:	491b      	ldr	r1, [pc, #108]	@ (800ff10 <__b2d+0x90>)
 800fea4:	dc15      	bgt.n	800fed2 <__b2d+0x52>
 800fea6:	f1c0 0c0b 	rsb	ip, r0, #11
 800feaa:	fa22 f30c 	lsr.w	r3, r2, ip
 800feae:	45b8      	cmp	r8, r7
 800feb0:	ea43 0501 	orr.w	r5, r3, r1
 800feb4:	bf34      	ite	cc
 800feb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800feba:	2300      	movcs	r3, #0
 800febc:	3015      	adds	r0, #21
 800febe:	fa02 f000 	lsl.w	r0, r2, r0
 800fec2:	fa23 f30c 	lsr.w	r3, r3, ip
 800fec6:	4303      	orrs	r3, r0
 800fec8:	461c      	mov	r4, r3
 800feca:	ec45 4b10 	vmov	d0, r4, r5
 800fece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed2:	45b8      	cmp	r8, r7
 800fed4:	bf3a      	itte	cc
 800fed6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800feda:	f1a6 0708 	subcc.w	r7, r6, #8
 800fede:	2300      	movcs	r3, #0
 800fee0:	380b      	subs	r0, #11
 800fee2:	d012      	beq.n	800ff0a <__b2d+0x8a>
 800fee4:	f1c0 0120 	rsb	r1, r0, #32
 800fee8:	fa23 f401 	lsr.w	r4, r3, r1
 800feec:	4082      	lsls	r2, r0
 800feee:	4322      	orrs	r2, r4
 800fef0:	4547      	cmp	r7, r8
 800fef2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fef6:	bf8c      	ite	hi
 800fef8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fefc:	2200      	movls	r2, #0
 800fefe:	4083      	lsls	r3, r0
 800ff00:	40ca      	lsrs	r2, r1
 800ff02:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ff06:	4313      	orrs	r3, r2
 800ff08:	e7de      	b.n	800fec8 <__b2d+0x48>
 800ff0a:	ea42 0501 	orr.w	r5, r2, r1
 800ff0e:	e7db      	b.n	800fec8 <__b2d+0x48>
 800ff10:	3ff00000 	.word	0x3ff00000

0800ff14 <__d2b>:
 800ff14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff18:	460f      	mov	r7, r1
 800ff1a:	2101      	movs	r1, #1
 800ff1c:	ec59 8b10 	vmov	r8, r9, d0
 800ff20:	4616      	mov	r6, r2
 800ff22:	f7ff fc13 	bl	800f74c <_Balloc>
 800ff26:	4604      	mov	r4, r0
 800ff28:	b930      	cbnz	r0, 800ff38 <__d2b+0x24>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	4b23      	ldr	r3, [pc, #140]	@ (800ffbc <__d2b+0xa8>)
 800ff2e:	4824      	ldr	r0, [pc, #144]	@ (800ffc0 <__d2b+0xac>)
 800ff30:	f240 310f 	movw	r1, #783	@ 0x30f
 800ff34:	f7fe fa0a 	bl	800e34c <__assert_func>
 800ff38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ff3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff40:	b10d      	cbz	r5, 800ff46 <__d2b+0x32>
 800ff42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff46:	9301      	str	r3, [sp, #4]
 800ff48:	f1b8 0300 	subs.w	r3, r8, #0
 800ff4c:	d023      	beq.n	800ff96 <__d2b+0x82>
 800ff4e:	4668      	mov	r0, sp
 800ff50:	9300      	str	r3, [sp, #0]
 800ff52:	f7ff fd0c 	bl	800f96e <__lo0bits>
 800ff56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ff5a:	b1d0      	cbz	r0, 800ff92 <__d2b+0x7e>
 800ff5c:	f1c0 0320 	rsb	r3, r0, #32
 800ff60:	fa02 f303 	lsl.w	r3, r2, r3
 800ff64:	430b      	orrs	r3, r1
 800ff66:	40c2      	lsrs	r2, r0
 800ff68:	6163      	str	r3, [r4, #20]
 800ff6a:	9201      	str	r2, [sp, #4]
 800ff6c:	9b01      	ldr	r3, [sp, #4]
 800ff6e:	61a3      	str	r3, [r4, #24]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	bf0c      	ite	eq
 800ff74:	2201      	moveq	r2, #1
 800ff76:	2202      	movne	r2, #2
 800ff78:	6122      	str	r2, [r4, #16]
 800ff7a:	b1a5      	cbz	r5, 800ffa6 <__d2b+0x92>
 800ff7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ff80:	4405      	add	r5, r0
 800ff82:	603d      	str	r5, [r7, #0]
 800ff84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ff88:	6030      	str	r0, [r6, #0]
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	b003      	add	sp, #12
 800ff8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff92:	6161      	str	r1, [r4, #20]
 800ff94:	e7ea      	b.n	800ff6c <__d2b+0x58>
 800ff96:	a801      	add	r0, sp, #4
 800ff98:	f7ff fce9 	bl	800f96e <__lo0bits>
 800ff9c:	9b01      	ldr	r3, [sp, #4]
 800ff9e:	6163      	str	r3, [r4, #20]
 800ffa0:	3020      	adds	r0, #32
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	e7e8      	b.n	800ff78 <__d2b+0x64>
 800ffa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ffaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ffae:	6038      	str	r0, [r7, #0]
 800ffb0:	6918      	ldr	r0, [r3, #16]
 800ffb2:	f7ff fcbd 	bl	800f930 <__hi0bits>
 800ffb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ffba:	e7e5      	b.n	800ff88 <__d2b+0x74>
 800ffbc:	080116aa 	.word	0x080116aa
 800ffc0:	0801171b 	.word	0x0801171b

0800ffc4 <__ratio>:
 800ffc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc8:	b085      	sub	sp, #20
 800ffca:	e9cd 1000 	strd	r1, r0, [sp]
 800ffce:	a902      	add	r1, sp, #8
 800ffd0:	f7ff ff56 	bl	800fe80 <__b2d>
 800ffd4:	9800      	ldr	r0, [sp, #0]
 800ffd6:	a903      	add	r1, sp, #12
 800ffd8:	ec55 4b10 	vmov	r4, r5, d0
 800ffdc:	f7ff ff50 	bl	800fe80 <__b2d>
 800ffe0:	9b01      	ldr	r3, [sp, #4]
 800ffe2:	6919      	ldr	r1, [r3, #16]
 800ffe4:	9b00      	ldr	r3, [sp, #0]
 800ffe6:	691b      	ldr	r3, [r3, #16]
 800ffe8:	1ac9      	subs	r1, r1, r3
 800ffea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ffee:	1a9b      	subs	r3, r3, r2
 800fff0:	ec5b ab10 	vmov	sl, fp, d0
 800fff4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	bfce      	itee	gt
 800fffc:	462a      	movgt	r2, r5
 800fffe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010002:	465a      	movle	r2, fp
 8010004:	462f      	mov	r7, r5
 8010006:	46d9      	mov	r9, fp
 8010008:	bfcc      	ite	gt
 801000a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801000e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010012:	464b      	mov	r3, r9
 8010014:	4652      	mov	r2, sl
 8010016:	4620      	mov	r0, r4
 8010018:	4639      	mov	r1, r7
 801001a:	f7f0 fc27 	bl	800086c <__aeabi_ddiv>
 801001e:	ec41 0b10 	vmov	d0, r0, r1
 8010022:	b005      	add	sp, #20
 8010024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010028 <__copybits>:
 8010028:	3901      	subs	r1, #1
 801002a:	b570      	push	{r4, r5, r6, lr}
 801002c:	1149      	asrs	r1, r1, #5
 801002e:	6914      	ldr	r4, [r2, #16]
 8010030:	3101      	adds	r1, #1
 8010032:	f102 0314 	add.w	r3, r2, #20
 8010036:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801003a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801003e:	1f05      	subs	r5, r0, #4
 8010040:	42a3      	cmp	r3, r4
 8010042:	d30c      	bcc.n	801005e <__copybits+0x36>
 8010044:	1aa3      	subs	r3, r4, r2
 8010046:	3b11      	subs	r3, #17
 8010048:	f023 0303 	bic.w	r3, r3, #3
 801004c:	3211      	adds	r2, #17
 801004e:	42a2      	cmp	r2, r4
 8010050:	bf88      	it	hi
 8010052:	2300      	movhi	r3, #0
 8010054:	4418      	add	r0, r3
 8010056:	2300      	movs	r3, #0
 8010058:	4288      	cmp	r0, r1
 801005a:	d305      	bcc.n	8010068 <__copybits+0x40>
 801005c:	bd70      	pop	{r4, r5, r6, pc}
 801005e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010062:	f845 6f04 	str.w	r6, [r5, #4]!
 8010066:	e7eb      	b.n	8010040 <__copybits+0x18>
 8010068:	f840 3b04 	str.w	r3, [r0], #4
 801006c:	e7f4      	b.n	8010058 <__copybits+0x30>

0801006e <__any_on>:
 801006e:	f100 0214 	add.w	r2, r0, #20
 8010072:	6900      	ldr	r0, [r0, #16]
 8010074:	114b      	asrs	r3, r1, #5
 8010076:	4298      	cmp	r0, r3
 8010078:	b510      	push	{r4, lr}
 801007a:	db11      	blt.n	80100a0 <__any_on+0x32>
 801007c:	dd0a      	ble.n	8010094 <__any_on+0x26>
 801007e:	f011 011f 	ands.w	r1, r1, #31
 8010082:	d007      	beq.n	8010094 <__any_on+0x26>
 8010084:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010088:	fa24 f001 	lsr.w	r0, r4, r1
 801008c:	fa00 f101 	lsl.w	r1, r0, r1
 8010090:	428c      	cmp	r4, r1
 8010092:	d10b      	bne.n	80100ac <__any_on+0x3e>
 8010094:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010098:	4293      	cmp	r3, r2
 801009a:	d803      	bhi.n	80100a4 <__any_on+0x36>
 801009c:	2000      	movs	r0, #0
 801009e:	bd10      	pop	{r4, pc}
 80100a0:	4603      	mov	r3, r0
 80100a2:	e7f7      	b.n	8010094 <__any_on+0x26>
 80100a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80100a8:	2900      	cmp	r1, #0
 80100aa:	d0f5      	beq.n	8010098 <__any_on+0x2a>
 80100ac:	2001      	movs	r0, #1
 80100ae:	e7f6      	b.n	801009e <__any_on+0x30>

080100b0 <_malloc_usable_size_r>:
 80100b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100b4:	1f18      	subs	r0, r3, #4
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	bfbc      	itt	lt
 80100ba:	580b      	ldrlt	r3, [r1, r0]
 80100bc:	18c0      	addlt	r0, r0, r3
 80100be:	4770      	bx	lr

080100c0 <__ascii_wctomb>:
 80100c0:	4603      	mov	r3, r0
 80100c2:	4608      	mov	r0, r1
 80100c4:	b141      	cbz	r1, 80100d8 <__ascii_wctomb+0x18>
 80100c6:	2aff      	cmp	r2, #255	@ 0xff
 80100c8:	d904      	bls.n	80100d4 <__ascii_wctomb+0x14>
 80100ca:	228a      	movs	r2, #138	@ 0x8a
 80100cc:	601a      	str	r2, [r3, #0]
 80100ce:	f04f 30ff 	mov.w	r0, #4294967295
 80100d2:	4770      	bx	lr
 80100d4:	700a      	strb	r2, [r1, #0]
 80100d6:	2001      	movs	r0, #1
 80100d8:	4770      	bx	lr

080100da <__ssputs_r>:
 80100da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100de:	688e      	ldr	r6, [r1, #8]
 80100e0:	461f      	mov	r7, r3
 80100e2:	42be      	cmp	r6, r7
 80100e4:	680b      	ldr	r3, [r1, #0]
 80100e6:	4682      	mov	sl, r0
 80100e8:	460c      	mov	r4, r1
 80100ea:	4690      	mov	r8, r2
 80100ec:	d82d      	bhi.n	801014a <__ssputs_r+0x70>
 80100ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100f2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80100f6:	d026      	beq.n	8010146 <__ssputs_r+0x6c>
 80100f8:	6965      	ldr	r5, [r4, #20]
 80100fa:	6909      	ldr	r1, [r1, #16]
 80100fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010100:	eba3 0901 	sub.w	r9, r3, r1
 8010104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010108:	1c7b      	adds	r3, r7, #1
 801010a:	444b      	add	r3, r9
 801010c:	106d      	asrs	r5, r5, #1
 801010e:	429d      	cmp	r5, r3
 8010110:	bf38      	it	cc
 8010112:	461d      	movcc	r5, r3
 8010114:	0553      	lsls	r3, r2, #21
 8010116:	d527      	bpl.n	8010168 <__ssputs_r+0x8e>
 8010118:	4629      	mov	r1, r5
 801011a:	f7fc f8df 	bl	800c2dc <_malloc_r>
 801011e:	4606      	mov	r6, r0
 8010120:	b360      	cbz	r0, 801017c <__ssputs_r+0xa2>
 8010122:	6921      	ldr	r1, [r4, #16]
 8010124:	464a      	mov	r2, r9
 8010126:	f7fe f8f2 	bl	800e30e <memcpy>
 801012a:	89a3      	ldrh	r3, [r4, #12]
 801012c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010134:	81a3      	strh	r3, [r4, #12]
 8010136:	6126      	str	r6, [r4, #16]
 8010138:	6165      	str	r5, [r4, #20]
 801013a:	444e      	add	r6, r9
 801013c:	eba5 0509 	sub.w	r5, r5, r9
 8010140:	6026      	str	r6, [r4, #0]
 8010142:	60a5      	str	r5, [r4, #8]
 8010144:	463e      	mov	r6, r7
 8010146:	42be      	cmp	r6, r7
 8010148:	d900      	bls.n	801014c <__ssputs_r+0x72>
 801014a:	463e      	mov	r6, r7
 801014c:	6820      	ldr	r0, [r4, #0]
 801014e:	4632      	mov	r2, r6
 8010150:	4641      	mov	r1, r8
 8010152:	f000 fd64 	bl	8010c1e <memmove>
 8010156:	68a3      	ldr	r3, [r4, #8]
 8010158:	1b9b      	subs	r3, r3, r6
 801015a:	60a3      	str	r3, [r4, #8]
 801015c:	6823      	ldr	r3, [r4, #0]
 801015e:	4433      	add	r3, r6
 8010160:	6023      	str	r3, [r4, #0]
 8010162:	2000      	movs	r0, #0
 8010164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010168:	462a      	mov	r2, r5
 801016a:	f7fc f94b 	bl	800c404 <_realloc_r>
 801016e:	4606      	mov	r6, r0
 8010170:	2800      	cmp	r0, #0
 8010172:	d1e0      	bne.n	8010136 <__ssputs_r+0x5c>
 8010174:	6921      	ldr	r1, [r4, #16]
 8010176:	4650      	mov	r0, sl
 8010178:	f7fe ff52 	bl	800f020 <_free_r>
 801017c:	230c      	movs	r3, #12
 801017e:	f8ca 3000 	str.w	r3, [sl]
 8010182:	89a3      	ldrh	r3, [r4, #12]
 8010184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010188:	81a3      	strh	r3, [r4, #12]
 801018a:	f04f 30ff 	mov.w	r0, #4294967295
 801018e:	e7e9      	b.n	8010164 <__ssputs_r+0x8a>

08010190 <_svfiprintf_r>:
 8010190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010194:	4698      	mov	r8, r3
 8010196:	898b      	ldrh	r3, [r1, #12]
 8010198:	061b      	lsls	r3, r3, #24
 801019a:	b09d      	sub	sp, #116	@ 0x74
 801019c:	4607      	mov	r7, r0
 801019e:	460d      	mov	r5, r1
 80101a0:	4614      	mov	r4, r2
 80101a2:	d510      	bpl.n	80101c6 <_svfiprintf_r+0x36>
 80101a4:	690b      	ldr	r3, [r1, #16]
 80101a6:	b973      	cbnz	r3, 80101c6 <_svfiprintf_r+0x36>
 80101a8:	2140      	movs	r1, #64	@ 0x40
 80101aa:	f7fc f897 	bl	800c2dc <_malloc_r>
 80101ae:	6028      	str	r0, [r5, #0]
 80101b0:	6128      	str	r0, [r5, #16]
 80101b2:	b930      	cbnz	r0, 80101c2 <_svfiprintf_r+0x32>
 80101b4:	230c      	movs	r3, #12
 80101b6:	603b      	str	r3, [r7, #0]
 80101b8:	f04f 30ff 	mov.w	r0, #4294967295
 80101bc:	b01d      	add	sp, #116	@ 0x74
 80101be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c2:	2340      	movs	r3, #64	@ 0x40
 80101c4:	616b      	str	r3, [r5, #20]
 80101c6:	2300      	movs	r3, #0
 80101c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80101ca:	2320      	movs	r3, #32
 80101cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80101d4:	2330      	movs	r3, #48	@ 0x30
 80101d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010374 <_svfiprintf_r+0x1e4>
 80101da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101de:	f04f 0901 	mov.w	r9, #1
 80101e2:	4623      	mov	r3, r4
 80101e4:	469a      	mov	sl, r3
 80101e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101ea:	b10a      	cbz	r2, 80101f0 <_svfiprintf_r+0x60>
 80101ec:	2a25      	cmp	r2, #37	@ 0x25
 80101ee:	d1f9      	bne.n	80101e4 <_svfiprintf_r+0x54>
 80101f0:	ebba 0b04 	subs.w	fp, sl, r4
 80101f4:	d00b      	beq.n	801020e <_svfiprintf_r+0x7e>
 80101f6:	465b      	mov	r3, fp
 80101f8:	4622      	mov	r2, r4
 80101fa:	4629      	mov	r1, r5
 80101fc:	4638      	mov	r0, r7
 80101fe:	f7ff ff6c 	bl	80100da <__ssputs_r>
 8010202:	3001      	adds	r0, #1
 8010204:	f000 80a7 	beq.w	8010356 <_svfiprintf_r+0x1c6>
 8010208:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801020a:	445a      	add	r2, fp
 801020c:	9209      	str	r2, [sp, #36]	@ 0x24
 801020e:	f89a 3000 	ldrb.w	r3, [sl]
 8010212:	2b00      	cmp	r3, #0
 8010214:	f000 809f 	beq.w	8010356 <_svfiprintf_r+0x1c6>
 8010218:	2300      	movs	r3, #0
 801021a:	f04f 32ff 	mov.w	r2, #4294967295
 801021e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010222:	f10a 0a01 	add.w	sl, sl, #1
 8010226:	9304      	str	r3, [sp, #16]
 8010228:	9307      	str	r3, [sp, #28]
 801022a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801022e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010230:	4654      	mov	r4, sl
 8010232:	2205      	movs	r2, #5
 8010234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010238:	484e      	ldr	r0, [pc, #312]	@ (8010374 <_svfiprintf_r+0x1e4>)
 801023a:	f7ef ffd9 	bl	80001f0 <memchr>
 801023e:	9a04      	ldr	r2, [sp, #16]
 8010240:	b9d8      	cbnz	r0, 801027a <_svfiprintf_r+0xea>
 8010242:	06d0      	lsls	r0, r2, #27
 8010244:	bf44      	itt	mi
 8010246:	2320      	movmi	r3, #32
 8010248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801024c:	0711      	lsls	r1, r2, #28
 801024e:	bf44      	itt	mi
 8010250:	232b      	movmi	r3, #43	@ 0x2b
 8010252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010256:	f89a 3000 	ldrb.w	r3, [sl]
 801025a:	2b2a      	cmp	r3, #42	@ 0x2a
 801025c:	d015      	beq.n	801028a <_svfiprintf_r+0xfa>
 801025e:	9a07      	ldr	r2, [sp, #28]
 8010260:	4654      	mov	r4, sl
 8010262:	2000      	movs	r0, #0
 8010264:	f04f 0c0a 	mov.w	ip, #10
 8010268:	4621      	mov	r1, r4
 801026a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801026e:	3b30      	subs	r3, #48	@ 0x30
 8010270:	2b09      	cmp	r3, #9
 8010272:	d94b      	bls.n	801030c <_svfiprintf_r+0x17c>
 8010274:	b1b0      	cbz	r0, 80102a4 <_svfiprintf_r+0x114>
 8010276:	9207      	str	r2, [sp, #28]
 8010278:	e014      	b.n	80102a4 <_svfiprintf_r+0x114>
 801027a:	eba0 0308 	sub.w	r3, r0, r8
 801027e:	fa09 f303 	lsl.w	r3, r9, r3
 8010282:	4313      	orrs	r3, r2
 8010284:	9304      	str	r3, [sp, #16]
 8010286:	46a2      	mov	sl, r4
 8010288:	e7d2      	b.n	8010230 <_svfiprintf_r+0xa0>
 801028a:	9b03      	ldr	r3, [sp, #12]
 801028c:	1d19      	adds	r1, r3, #4
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	9103      	str	r1, [sp, #12]
 8010292:	2b00      	cmp	r3, #0
 8010294:	bfbb      	ittet	lt
 8010296:	425b      	neglt	r3, r3
 8010298:	f042 0202 	orrlt.w	r2, r2, #2
 801029c:	9307      	strge	r3, [sp, #28]
 801029e:	9307      	strlt	r3, [sp, #28]
 80102a0:	bfb8      	it	lt
 80102a2:	9204      	strlt	r2, [sp, #16]
 80102a4:	7823      	ldrb	r3, [r4, #0]
 80102a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80102a8:	d10a      	bne.n	80102c0 <_svfiprintf_r+0x130>
 80102aa:	7863      	ldrb	r3, [r4, #1]
 80102ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80102ae:	d132      	bne.n	8010316 <_svfiprintf_r+0x186>
 80102b0:	9b03      	ldr	r3, [sp, #12]
 80102b2:	1d1a      	adds	r2, r3, #4
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	9203      	str	r2, [sp, #12]
 80102b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80102bc:	3402      	adds	r4, #2
 80102be:	9305      	str	r3, [sp, #20]
 80102c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010384 <_svfiprintf_r+0x1f4>
 80102c4:	7821      	ldrb	r1, [r4, #0]
 80102c6:	2203      	movs	r2, #3
 80102c8:	4650      	mov	r0, sl
 80102ca:	f7ef ff91 	bl	80001f0 <memchr>
 80102ce:	b138      	cbz	r0, 80102e0 <_svfiprintf_r+0x150>
 80102d0:	9b04      	ldr	r3, [sp, #16]
 80102d2:	eba0 000a 	sub.w	r0, r0, sl
 80102d6:	2240      	movs	r2, #64	@ 0x40
 80102d8:	4082      	lsls	r2, r0
 80102da:	4313      	orrs	r3, r2
 80102dc:	3401      	adds	r4, #1
 80102de:	9304      	str	r3, [sp, #16]
 80102e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102e4:	4824      	ldr	r0, [pc, #144]	@ (8010378 <_svfiprintf_r+0x1e8>)
 80102e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102ea:	2206      	movs	r2, #6
 80102ec:	f7ef ff80 	bl	80001f0 <memchr>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d036      	beq.n	8010362 <_svfiprintf_r+0x1d2>
 80102f4:	4b21      	ldr	r3, [pc, #132]	@ (801037c <_svfiprintf_r+0x1ec>)
 80102f6:	bb1b      	cbnz	r3, 8010340 <_svfiprintf_r+0x1b0>
 80102f8:	9b03      	ldr	r3, [sp, #12]
 80102fa:	3307      	adds	r3, #7
 80102fc:	f023 0307 	bic.w	r3, r3, #7
 8010300:	3308      	adds	r3, #8
 8010302:	9303      	str	r3, [sp, #12]
 8010304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010306:	4433      	add	r3, r6
 8010308:	9309      	str	r3, [sp, #36]	@ 0x24
 801030a:	e76a      	b.n	80101e2 <_svfiprintf_r+0x52>
 801030c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010310:	460c      	mov	r4, r1
 8010312:	2001      	movs	r0, #1
 8010314:	e7a8      	b.n	8010268 <_svfiprintf_r+0xd8>
 8010316:	2300      	movs	r3, #0
 8010318:	3401      	adds	r4, #1
 801031a:	9305      	str	r3, [sp, #20]
 801031c:	4619      	mov	r1, r3
 801031e:	f04f 0c0a 	mov.w	ip, #10
 8010322:	4620      	mov	r0, r4
 8010324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010328:	3a30      	subs	r2, #48	@ 0x30
 801032a:	2a09      	cmp	r2, #9
 801032c:	d903      	bls.n	8010336 <_svfiprintf_r+0x1a6>
 801032e:	2b00      	cmp	r3, #0
 8010330:	d0c6      	beq.n	80102c0 <_svfiprintf_r+0x130>
 8010332:	9105      	str	r1, [sp, #20]
 8010334:	e7c4      	b.n	80102c0 <_svfiprintf_r+0x130>
 8010336:	fb0c 2101 	mla	r1, ip, r1, r2
 801033a:	4604      	mov	r4, r0
 801033c:	2301      	movs	r3, #1
 801033e:	e7f0      	b.n	8010322 <_svfiprintf_r+0x192>
 8010340:	ab03      	add	r3, sp, #12
 8010342:	9300      	str	r3, [sp, #0]
 8010344:	462a      	mov	r2, r5
 8010346:	4b0e      	ldr	r3, [pc, #56]	@ (8010380 <_svfiprintf_r+0x1f0>)
 8010348:	a904      	add	r1, sp, #16
 801034a:	4638      	mov	r0, r7
 801034c:	f7fc ffc4 	bl	800d2d8 <_printf_float>
 8010350:	1c42      	adds	r2, r0, #1
 8010352:	4606      	mov	r6, r0
 8010354:	d1d6      	bne.n	8010304 <_svfiprintf_r+0x174>
 8010356:	89ab      	ldrh	r3, [r5, #12]
 8010358:	065b      	lsls	r3, r3, #25
 801035a:	f53f af2d 	bmi.w	80101b8 <_svfiprintf_r+0x28>
 801035e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010360:	e72c      	b.n	80101bc <_svfiprintf_r+0x2c>
 8010362:	ab03      	add	r3, sp, #12
 8010364:	9300      	str	r3, [sp, #0]
 8010366:	462a      	mov	r2, r5
 8010368:	4b05      	ldr	r3, [pc, #20]	@ (8010380 <_svfiprintf_r+0x1f0>)
 801036a:	a904      	add	r1, sp, #16
 801036c:	4638      	mov	r0, r7
 801036e:	f7fd fa4b 	bl	800d808 <_printf_i>
 8010372:	e7ed      	b.n	8010350 <_svfiprintf_r+0x1c0>
 8010374:	08011870 	.word	0x08011870
 8010378:	0801187a 	.word	0x0801187a
 801037c:	0800d2d9 	.word	0x0800d2d9
 8010380:	080100db 	.word	0x080100db
 8010384:	08011876 	.word	0x08011876

08010388 <_sungetc_r>:
 8010388:	b538      	push	{r3, r4, r5, lr}
 801038a:	1c4b      	adds	r3, r1, #1
 801038c:	4614      	mov	r4, r2
 801038e:	d103      	bne.n	8010398 <_sungetc_r+0x10>
 8010390:	f04f 35ff 	mov.w	r5, #4294967295
 8010394:	4628      	mov	r0, r5
 8010396:	bd38      	pop	{r3, r4, r5, pc}
 8010398:	8993      	ldrh	r3, [r2, #12]
 801039a:	f023 0320 	bic.w	r3, r3, #32
 801039e:	8193      	strh	r3, [r2, #12]
 80103a0:	6853      	ldr	r3, [r2, #4]
 80103a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80103a4:	b2cd      	uxtb	r5, r1
 80103a6:	b18a      	cbz	r2, 80103cc <_sungetc_r+0x44>
 80103a8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80103aa:	429a      	cmp	r2, r3
 80103ac:	dd08      	ble.n	80103c0 <_sungetc_r+0x38>
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	1e5a      	subs	r2, r3, #1
 80103b2:	6022      	str	r2, [r4, #0]
 80103b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80103b8:	6863      	ldr	r3, [r4, #4]
 80103ba:	3301      	adds	r3, #1
 80103bc:	6063      	str	r3, [r4, #4]
 80103be:	e7e9      	b.n	8010394 <_sungetc_r+0xc>
 80103c0:	4621      	mov	r1, r4
 80103c2:	f000 fbf2 	bl	8010baa <__submore>
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d0f1      	beq.n	80103ae <_sungetc_r+0x26>
 80103ca:	e7e1      	b.n	8010390 <_sungetc_r+0x8>
 80103cc:	6921      	ldr	r1, [r4, #16]
 80103ce:	6822      	ldr	r2, [r4, #0]
 80103d0:	b141      	cbz	r1, 80103e4 <_sungetc_r+0x5c>
 80103d2:	4291      	cmp	r1, r2
 80103d4:	d206      	bcs.n	80103e4 <_sungetc_r+0x5c>
 80103d6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80103da:	42a9      	cmp	r1, r5
 80103dc:	d102      	bne.n	80103e4 <_sungetc_r+0x5c>
 80103de:	3a01      	subs	r2, #1
 80103e0:	6022      	str	r2, [r4, #0]
 80103e2:	e7ea      	b.n	80103ba <_sungetc_r+0x32>
 80103e4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80103e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80103ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80103ee:	2303      	movs	r3, #3
 80103f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80103f2:	4623      	mov	r3, r4
 80103f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	2301      	movs	r3, #1
 80103fc:	e7de      	b.n	80103bc <_sungetc_r+0x34>

080103fe <__ssrefill_r>:
 80103fe:	b510      	push	{r4, lr}
 8010400:	460c      	mov	r4, r1
 8010402:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010404:	b169      	cbz	r1, 8010422 <__ssrefill_r+0x24>
 8010406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801040a:	4299      	cmp	r1, r3
 801040c:	d001      	beq.n	8010412 <__ssrefill_r+0x14>
 801040e:	f7fe fe07 	bl	800f020 <_free_r>
 8010412:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010414:	6063      	str	r3, [r4, #4]
 8010416:	2000      	movs	r0, #0
 8010418:	6360      	str	r0, [r4, #52]	@ 0x34
 801041a:	b113      	cbz	r3, 8010422 <__ssrefill_r+0x24>
 801041c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801041e:	6023      	str	r3, [r4, #0]
 8010420:	bd10      	pop	{r4, pc}
 8010422:	6923      	ldr	r3, [r4, #16]
 8010424:	6023      	str	r3, [r4, #0]
 8010426:	2300      	movs	r3, #0
 8010428:	6063      	str	r3, [r4, #4]
 801042a:	89a3      	ldrh	r3, [r4, #12]
 801042c:	f043 0320 	orr.w	r3, r3, #32
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	f04f 30ff 	mov.w	r0, #4294967295
 8010436:	e7f3      	b.n	8010420 <__ssrefill_r+0x22>

08010438 <__ssvfiscanf_r>:
 8010438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801043c:	460c      	mov	r4, r1
 801043e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010442:	2100      	movs	r1, #0
 8010444:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8010448:	49a5      	ldr	r1, [pc, #660]	@ (80106e0 <__ssvfiscanf_r+0x2a8>)
 801044a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801044c:	f10d 0804 	add.w	r8, sp, #4
 8010450:	49a4      	ldr	r1, [pc, #656]	@ (80106e4 <__ssvfiscanf_r+0x2ac>)
 8010452:	4fa5      	ldr	r7, [pc, #660]	@ (80106e8 <__ssvfiscanf_r+0x2b0>)
 8010454:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8010458:	4606      	mov	r6, r0
 801045a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801045c:	9300      	str	r3, [sp, #0]
 801045e:	7813      	ldrb	r3, [r2, #0]
 8010460:	2b00      	cmp	r3, #0
 8010462:	f000 8158 	beq.w	8010716 <__ssvfiscanf_r+0x2de>
 8010466:	5cf9      	ldrb	r1, [r7, r3]
 8010468:	f011 0108 	ands.w	r1, r1, #8
 801046c:	f102 0501 	add.w	r5, r2, #1
 8010470:	d019      	beq.n	80104a6 <__ssvfiscanf_r+0x6e>
 8010472:	6863      	ldr	r3, [r4, #4]
 8010474:	2b00      	cmp	r3, #0
 8010476:	dd0f      	ble.n	8010498 <__ssvfiscanf_r+0x60>
 8010478:	6823      	ldr	r3, [r4, #0]
 801047a:	781a      	ldrb	r2, [r3, #0]
 801047c:	5cba      	ldrb	r2, [r7, r2]
 801047e:	0712      	lsls	r2, r2, #28
 8010480:	d401      	bmi.n	8010486 <__ssvfiscanf_r+0x4e>
 8010482:	462a      	mov	r2, r5
 8010484:	e7eb      	b.n	801045e <__ssvfiscanf_r+0x26>
 8010486:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010488:	3201      	adds	r2, #1
 801048a:	9245      	str	r2, [sp, #276]	@ 0x114
 801048c:	6862      	ldr	r2, [r4, #4]
 801048e:	3301      	adds	r3, #1
 8010490:	3a01      	subs	r2, #1
 8010492:	6062      	str	r2, [r4, #4]
 8010494:	6023      	str	r3, [r4, #0]
 8010496:	e7ec      	b.n	8010472 <__ssvfiscanf_r+0x3a>
 8010498:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801049a:	4621      	mov	r1, r4
 801049c:	4630      	mov	r0, r6
 801049e:	4798      	blx	r3
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d0e9      	beq.n	8010478 <__ssvfiscanf_r+0x40>
 80104a4:	e7ed      	b.n	8010482 <__ssvfiscanf_r+0x4a>
 80104a6:	2b25      	cmp	r3, #37	@ 0x25
 80104a8:	d012      	beq.n	80104d0 <__ssvfiscanf_r+0x98>
 80104aa:	4699      	mov	r9, r3
 80104ac:	6863      	ldr	r3, [r4, #4]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	f340 8093 	ble.w	80105da <__ssvfiscanf_r+0x1a2>
 80104b4:	6822      	ldr	r2, [r4, #0]
 80104b6:	7813      	ldrb	r3, [r2, #0]
 80104b8:	454b      	cmp	r3, r9
 80104ba:	f040 812c 	bne.w	8010716 <__ssvfiscanf_r+0x2de>
 80104be:	6863      	ldr	r3, [r4, #4]
 80104c0:	3b01      	subs	r3, #1
 80104c2:	6063      	str	r3, [r4, #4]
 80104c4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80104c6:	3201      	adds	r2, #1
 80104c8:	3301      	adds	r3, #1
 80104ca:	6022      	str	r2, [r4, #0]
 80104cc:	9345      	str	r3, [sp, #276]	@ 0x114
 80104ce:	e7d8      	b.n	8010482 <__ssvfiscanf_r+0x4a>
 80104d0:	9141      	str	r1, [sp, #260]	@ 0x104
 80104d2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80104d4:	7853      	ldrb	r3, [r2, #1]
 80104d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80104d8:	bf02      	ittt	eq
 80104da:	2310      	moveq	r3, #16
 80104dc:	1c95      	addeq	r5, r2, #2
 80104de:	9341      	streq	r3, [sp, #260]	@ 0x104
 80104e0:	220a      	movs	r2, #10
 80104e2:	46a9      	mov	r9, r5
 80104e4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80104e8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80104ec:	2b09      	cmp	r3, #9
 80104ee:	d91e      	bls.n	801052e <__ssvfiscanf_r+0xf6>
 80104f0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80106ec <__ssvfiscanf_r+0x2b4>
 80104f4:	2203      	movs	r2, #3
 80104f6:	4650      	mov	r0, sl
 80104f8:	f7ef fe7a 	bl	80001f0 <memchr>
 80104fc:	b138      	cbz	r0, 801050e <__ssvfiscanf_r+0xd6>
 80104fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010500:	eba0 000a 	sub.w	r0, r0, sl
 8010504:	2301      	movs	r3, #1
 8010506:	4083      	lsls	r3, r0
 8010508:	4313      	orrs	r3, r2
 801050a:	9341      	str	r3, [sp, #260]	@ 0x104
 801050c:	464d      	mov	r5, r9
 801050e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010512:	2b78      	cmp	r3, #120	@ 0x78
 8010514:	d806      	bhi.n	8010524 <__ssvfiscanf_r+0xec>
 8010516:	2b57      	cmp	r3, #87	@ 0x57
 8010518:	d810      	bhi.n	801053c <__ssvfiscanf_r+0x104>
 801051a:	2b25      	cmp	r3, #37	@ 0x25
 801051c:	d0c5      	beq.n	80104aa <__ssvfiscanf_r+0x72>
 801051e:	d857      	bhi.n	80105d0 <__ssvfiscanf_r+0x198>
 8010520:	2b00      	cmp	r3, #0
 8010522:	d065      	beq.n	80105f0 <__ssvfiscanf_r+0x1b8>
 8010524:	2303      	movs	r3, #3
 8010526:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010528:	230a      	movs	r3, #10
 801052a:	9342      	str	r3, [sp, #264]	@ 0x108
 801052c:	e078      	b.n	8010620 <__ssvfiscanf_r+0x1e8>
 801052e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010530:	fb02 1103 	mla	r1, r2, r3, r1
 8010534:	3930      	subs	r1, #48	@ 0x30
 8010536:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010538:	464d      	mov	r5, r9
 801053a:	e7d2      	b.n	80104e2 <__ssvfiscanf_r+0xaa>
 801053c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010540:	2a20      	cmp	r2, #32
 8010542:	d8ef      	bhi.n	8010524 <__ssvfiscanf_r+0xec>
 8010544:	a101      	add	r1, pc, #4	@ (adr r1, 801054c <__ssvfiscanf_r+0x114>)
 8010546:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801054a:	bf00      	nop
 801054c:	080105ff 	.word	0x080105ff
 8010550:	08010525 	.word	0x08010525
 8010554:	08010525 	.word	0x08010525
 8010558:	08010659 	.word	0x08010659
 801055c:	08010525 	.word	0x08010525
 8010560:	08010525 	.word	0x08010525
 8010564:	08010525 	.word	0x08010525
 8010568:	08010525 	.word	0x08010525
 801056c:	08010525 	.word	0x08010525
 8010570:	08010525 	.word	0x08010525
 8010574:	08010525 	.word	0x08010525
 8010578:	0801066f 	.word	0x0801066f
 801057c:	08010655 	.word	0x08010655
 8010580:	080105d7 	.word	0x080105d7
 8010584:	080105d7 	.word	0x080105d7
 8010588:	080105d7 	.word	0x080105d7
 801058c:	08010525 	.word	0x08010525
 8010590:	08010611 	.word	0x08010611
 8010594:	08010525 	.word	0x08010525
 8010598:	08010525 	.word	0x08010525
 801059c:	08010525 	.word	0x08010525
 80105a0:	08010525 	.word	0x08010525
 80105a4:	0801067f 	.word	0x0801067f
 80105a8:	08010619 	.word	0x08010619
 80105ac:	080105f7 	.word	0x080105f7
 80105b0:	08010525 	.word	0x08010525
 80105b4:	08010525 	.word	0x08010525
 80105b8:	0801067b 	.word	0x0801067b
 80105bc:	08010525 	.word	0x08010525
 80105c0:	08010655 	.word	0x08010655
 80105c4:	08010525 	.word	0x08010525
 80105c8:	08010525 	.word	0x08010525
 80105cc:	080105ff 	.word	0x080105ff
 80105d0:	3b45      	subs	r3, #69	@ 0x45
 80105d2:	2b02      	cmp	r3, #2
 80105d4:	d8a6      	bhi.n	8010524 <__ssvfiscanf_r+0xec>
 80105d6:	2305      	movs	r3, #5
 80105d8:	e021      	b.n	801061e <__ssvfiscanf_r+0x1e6>
 80105da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80105dc:	4621      	mov	r1, r4
 80105de:	4630      	mov	r0, r6
 80105e0:	4798      	blx	r3
 80105e2:	2800      	cmp	r0, #0
 80105e4:	f43f af66 	beq.w	80104b4 <__ssvfiscanf_r+0x7c>
 80105e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80105ea:	2800      	cmp	r0, #0
 80105ec:	f040 808b 	bne.w	8010706 <__ssvfiscanf_r+0x2ce>
 80105f0:	f04f 30ff 	mov.w	r0, #4294967295
 80105f4:	e08b      	b.n	801070e <__ssvfiscanf_r+0x2d6>
 80105f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80105f8:	f042 0220 	orr.w	r2, r2, #32
 80105fc:	9241      	str	r2, [sp, #260]	@ 0x104
 80105fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010604:	9241      	str	r2, [sp, #260]	@ 0x104
 8010606:	2210      	movs	r2, #16
 8010608:	2b6e      	cmp	r3, #110	@ 0x6e
 801060a:	9242      	str	r2, [sp, #264]	@ 0x108
 801060c:	d902      	bls.n	8010614 <__ssvfiscanf_r+0x1dc>
 801060e:	e005      	b.n	801061c <__ssvfiscanf_r+0x1e4>
 8010610:	2300      	movs	r3, #0
 8010612:	9342      	str	r3, [sp, #264]	@ 0x108
 8010614:	2303      	movs	r3, #3
 8010616:	e002      	b.n	801061e <__ssvfiscanf_r+0x1e6>
 8010618:	2308      	movs	r3, #8
 801061a:	9342      	str	r3, [sp, #264]	@ 0x108
 801061c:	2304      	movs	r3, #4
 801061e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010620:	6863      	ldr	r3, [r4, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	dd39      	ble.n	801069a <__ssvfiscanf_r+0x262>
 8010626:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010628:	0659      	lsls	r1, r3, #25
 801062a:	d404      	bmi.n	8010636 <__ssvfiscanf_r+0x1fe>
 801062c:	6823      	ldr	r3, [r4, #0]
 801062e:	781a      	ldrb	r2, [r3, #0]
 8010630:	5cba      	ldrb	r2, [r7, r2]
 8010632:	0712      	lsls	r2, r2, #28
 8010634:	d438      	bmi.n	80106a8 <__ssvfiscanf_r+0x270>
 8010636:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010638:	2b02      	cmp	r3, #2
 801063a:	dc47      	bgt.n	80106cc <__ssvfiscanf_r+0x294>
 801063c:	466b      	mov	r3, sp
 801063e:	4622      	mov	r2, r4
 8010640:	a941      	add	r1, sp, #260	@ 0x104
 8010642:	4630      	mov	r0, r6
 8010644:	f000 f86c 	bl	8010720 <_scanf_chars>
 8010648:	2801      	cmp	r0, #1
 801064a:	d064      	beq.n	8010716 <__ssvfiscanf_r+0x2de>
 801064c:	2802      	cmp	r0, #2
 801064e:	f47f af18 	bne.w	8010482 <__ssvfiscanf_r+0x4a>
 8010652:	e7c9      	b.n	80105e8 <__ssvfiscanf_r+0x1b0>
 8010654:	220a      	movs	r2, #10
 8010656:	e7d7      	b.n	8010608 <__ssvfiscanf_r+0x1d0>
 8010658:	4629      	mov	r1, r5
 801065a:	4640      	mov	r0, r8
 801065c:	f000 fa6c 	bl	8010b38 <__sccl>
 8010660:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010666:	9341      	str	r3, [sp, #260]	@ 0x104
 8010668:	4605      	mov	r5, r0
 801066a:	2301      	movs	r3, #1
 801066c:	e7d7      	b.n	801061e <__ssvfiscanf_r+0x1e6>
 801066e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010674:	9341      	str	r3, [sp, #260]	@ 0x104
 8010676:	2300      	movs	r3, #0
 8010678:	e7d1      	b.n	801061e <__ssvfiscanf_r+0x1e6>
 801067a:	2302      	movs	r3, #2
 801067c:	e7cf      	b.n	801061e <__ssvfiscanf_r+0x1e6>
 801067e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010680:	06c3      	lsls	r3, r0, #27
 8010682:	f53f aefe 	bmi.w	8010482 <__ssvfiscanf_r+0x4a>
 8010686:	9b00      	ldr	r3, [sp, #0]
 8010688:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801068a:	1d19      	adds	r1, r3, #4
 801068c:	9100      	str	r1, [sp, #0]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	07c0      	lsls	r0, r0, #31
 8010692:	bf4c      	ite	mi
 8010694:	801a      	strhmi	r2, [r3, #0]
 8010696:	601a      	strpl	r2, [r3, #0]
 8010698:	e6f3      	b.n	8010482 <__ssvfiscanf_r+0x4a>
 801069a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801069c:	4621      	mov	r1, r4
 801069e:	4630      	mov	r0, r6
 80106a0:	4798      	blx	r3
 80106a2:	2800      	cmp	r0, #0
 80106a4:	d0bf      	beq.n	8010626 <__ssvfiscanf_r+0x1ee>
 80106a6:	e79f      	b.n	80105e8 <__ssvfiscanf_r+0x1b0>
 80106a8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80106aa:	3201      	adds	r2, #1
 80106ac:	9245      	str	r2, [sp, #276]	@ 0x114
 80106ae:	6862      	ldr	r2, [r4, #4]
 80106b0:	3a01      	subs	r2, #1
 80106b2:	2a00      	cmp	r2, #0
 80106b4:	6062      	str	r2, [r4, #4]
 80106b6:	dd02      	ble.n	80106be <__ssvfiscanf_r+0x286>
 80106b8:	3301      	adds	r3, #1
 80106ba:	6023      	str	r3, [r4, #0]
 80106bc:	e7b6      	b.n	801062c <__ssvfiscanf_r+0x1f4>
 80106be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80106c0:	4621      	mov	r1, r4
 80106c2:	4630      	mov	r0, r6
 80106c4:	4798      	blx	r3
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d0b0      	beq.n	801062c <__ssvfiscanf_r+0x1f4>
 80106ca:	e78d      	b.n	80105e8 <__ssvfiscanf_r+0x1b0>
 80106cc:	2b04      	cmp	r3, #4
 80106ce:	dc0f      	bgt.n	80106f0 <__ssvfiscanf_r+0x2b8>
 80106d0:	466b      	mov	r3, sp
 80106d2:	4622      	mov	r2, r4
 80106d4:	a941      	add	r1, sp, #260	@ 0x104
 80106d6:	4630      	mov	r0, r6
 80106d8:	f000 f87c 	bl	80107d4 <_scanf_i>
 80106dc:	e7b4      	b.n	8010648 <__ssvfiscanf_r+0x210>
 80106de:	bf00      	nop
 80106e0:	08010389 	.word	0x08010389
 80106e4:	080103ff 	.word	0x080103ff
 80106e8:	08011459 	.word	0x08011459
 80106ec:	08011876 	.word	0x08011876
 80106f0:	4b0a      	ldr	r3, [pc, #40]	@ (801071c <__ssvfiscanf_r+0x2e4>)
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	f43f aec5 	beq.w	8010482 <__ssvfiscanf_r+0x4a>
 80106f8:	466b      	mov	r3, sp
 80106fa:	4622      	mov	r2, r4
 80106fc:	a941      	add	r1, sp, #260	@ 0x104
 80106fe:	4630      	mov	r0, r6
 8010700:	f7fd f9a2 	bl	800da48 <_scanf_float>
 8010704:	e7a0      	b.n	8010648 <__ssvfiscanf_r+0x210>
 8010706:	89a3      	ldrh	r3, [r4, #12]
 8010708:	065b      	lsls	r3, r3, #25
 801070a:	f53f af71 	bmi.w	80105f0 <__ssvfiscanf_r+0x1b8>
 801070e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010716:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010718:	e7f9      	b.n	801070e <__ssvfiscanf_r+0x2d6>
 801071a:	bf00      	nop
 801071c:	0800da49 	.word	0x0800da49

08010720 <_scanf_chars>:
 8010720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010724:	4615      	mov	r5, r2
 8010726:	688a      	ldr	r2, [r1, #8]
 8010728:	4680      	mov	r8, r0
 801072a:	460c      	mov	r4, r1
 801072c:	b932      	cbnz	r2, 801073c <_scanf_chars+0x1c>
 801072e:	698a      	ldr	r2, [r1, #24]
 8010730:	2a00      	cmp	r2, #0
 8010732:	bf14      	ite	ne
 8010734:	f04f 32ff 	movne.w	r2, #4294967295
 8010738:	2201      	moveq	r2, #1
 801073a:	608a      	str	r2, [r1, #8]
 801073c:	6822      	ldr	r2, [r4, #0]
 801073e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80107d0 <_scanf_chars+0xb0>
 8010742:	06d1      	lsls	r1, r2, #27
 8010744:	bf5f      	itttt	pl
 8010746:	681a      	ldrpl	r2, [r3, #0]
 8010748:	1d11      	addpl	r1, r2, #4
 801074a:	6019      	strpl	r1, [r3, #0]
 801074c:	6816      	ldrpl	r6, [r2, #0]
 801074e:	2700      	movs	r7, #0
 8010750:	69a0      	ldr	r0, [r4, #24]
 8010752:	b188      	cbz	r0, 8010778 <_scanf_chars+0x58>
 8010754:	2801      	cmp	r0, #1
 8010756:	d107      	bne.n	8010768 <_scanf_chars+0x48>
 8010758:	682b      	ldr	r3, [r5, #0]
 801075a:	781a      	ldrb	r2, [r3, #0]
 801075c:	6963      	ldr	r3, [r4, #20]
 801075e:	5c9b      	ldrb	r3, [r3, r2]
 8010760:	b953      	cbnz	r3, 8010778 <_scanf_chars+0x58>
 8010762:	2f00      	cmp	r7, #0
 8010764:	d031      	beq.n	80107ca <_scanf_chars+0xaa>
 8010766:	e022      	b.n	80107ae <_scanf_chars+0x8e>
 8010768:	2802      	cmp	r0, #2
 801076a:	d120      	bne.n	80107ae <_scanf_chars+0x8e>
 801076c:	682b      	ldr	r3, [r5, #0]
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010774:	071b      	lsls	r3, r3, #28
 8010776:	d41a      	bmi.n	80107ae <_scanf_chars+0x8e>
 8010778:	6823      	ldr	r3, [r4, #0]
 801077a:	06da      	lsls	r2, r3, #27
 801077c:	bf5e      	ittt	pl
 801077e:	682b      	ldrpl	r3, [r5, #0]
 8010780:	781b      	ldrbpl	r3, [r3, #0]
 8010782:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010786:	682a      	ldr	r2, [r5, #0]
 8010788:	686b      	ldr	r3, [r5, #4]
 801078a:	3201      	adds	r2, #1
 801078c:	602a      	str	r2, [r5, #0]
 801078e:	68a2      	ldr	r2, [r4, #8]
 8010790:	3b01      	subs	r3, #1
 8010792:	3a01      	subs	r2, #1
 8010794:	606b      	str	r3, [r5, #4]
 8010796:	3701      	adds	r7, #1
 8010798:	60a2      	str	r2, [r4, #8]
 801079a:	b142      	cbz	r2, 80107ae <_scanf_chars+0x8e>
 801079c:	2b00      	cmp	r3, #0
 801079e:	dcd7      	bgt.n	8010750 <_scanf_chars+0x30>
 80107a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80107a4:	4629      	mov	r1, r5
 80107a6:	4640      	mov	r0, r8
 80107a8:	4798      	blx	r3
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d0d0      	beq.n	8010750 <_scanf_chars+0x30>
 80107ae:	6823      	ldr	r3, [r4, #0]
 80107b0:	f013 0310 	ands.w	r3, r3, #16
 80107b4:	d105      	bne.n	80107c2 <_scanf_chars+0xa2>
 80107b6:	68e2      	ldr	r2, [r4, #12]
 80107b8:	3201      	adds	r2, #1
 80107ba:	60e2      	str	r2, [r4, #12]
 80107bc:	69a2      	ldr	r2, [r4, #24]
 80107be:	b102      	cbz	r2, 80107c2 <_scanf_chars+0xa2>
 80107c0:	7033      	strb	r3, [r6, #0]
 80107c2:	6923      	ldr	r3, [r4, #16]
 80107c4:	443b      	add	r3, r7
 80107c6:	6123      	str	r3, [r4, #16]
 80107c8:	2000      	movs	r0, #0
 80107ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107ce:	bf00      	nop
 80107d0:	08011459 	.word	0x08011459

080107d4 <_scanf_i>:
 80107d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d8:	4698      	mov	r8, r3
 80107da:	4b74      	ldr	r3, [pc, #464]	@ (80109ac <_scanf_i+0x1d8>)
 80107dc:	460c      	mov	r4, r1
 80107de:	4682      	mov	sl, r0
 80107e0:	4616      	mov	r6, r2
 80107e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80107e6:	b087      	sub	sp, #28
 80107e8:	ab03      	add	r3, sp, #12
 80107ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80107ee:	4b70      	ldr	r3, [pc, #448]	@ (80109b0 <_scanf_i+0x1dc>)
 80107f0:	69a1      	ldr	r1, [r4, #24]
 80107f2:	4a70      	ldr	r2, [pc, #448]	@ (80109b4 <_scanf_i+0x1e0>)
 80107f4:	2903      	cmp	r1, #3
 80107f6:	bf08      	it	eq
 80107f8:	461a      	moveq	r2, r3
 80107fa:	68a3      	ldr	r3, [r4, #8]
 80107fc:	9201      	str	r2, [sp, #4]
 80107fe:	1e5a      	subs	r2, r3, #1
 8010800:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010804:	bf88      	it	hi
 8010806:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801080a:	4627      	mov	r7, r4
 801080c:	bf82      	ittt	hi
 801080e:	eb03 0905 	addhi.w	r9, r3, r5
 8010812:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010816:	60a3      	strhi	r3, [r4, #8]
 8010818:	f857 3b1c 	ldr.w	r3, [r7], #28
 801081c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8010820:	bf98      	it	ls
 8010822:	f04f 0900 	movls.w	r9, #0
 8010826:	6023      	str	r3, [r4, #0]
 8010828:	463d      	mov	r5, r7
 801082a:	f04f 0b00 	mov.w	fp, #0
 801082e:	6831      	ldr	r1, [r6, #0]
 8010830:	ab03      	add	r3, sp, #12
 8010832:	7809      	ldrb	r1, [r1, #0]
 8010834:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010838:	2202      	movs	r2, #2
 801083a:	f7ef fcd9 	bl	80001f0 <memchr>
 801083e:	b328      	cbz	r0, 801088c <_scanf_i+0xb8>
 8010840:	f1bb 0f01 	cmp.w	fp, #1
 8010844:	d159      	bne.n	80108fa <_scanf_i+0x126>
 8010846:	6862      	ldr	r2, [r4, #4]
 8010848:	b92a      	cbnz	r2, 8010856 <_scanf_i+0x82>
 801084a:	6822      	ldr	r2, [r4, #0]
 801084c:	2108      	movs	r1, #8
 801084e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010852:	6061      	str	r1, [r4, #4]
 8010854:	6022      	str	r2, [r4, #0]
 8010856:	6822      	ldr	r2, [r4, #0]
 8010858:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801085c:	6022      	str	r2, [r4, #0]
 801085e:	68a2      	ldr	r2, [r4, #8]
 8010860:	1e51      	subs	r1, r2, #1
 8010862:	60a1      	str	r1, [r4, #8]
 8010864:	b192      	cbz	r2, 801088c <_scanf_i+0xb8>
 8010866:	6832      	ldr	r2, [r6, #0]
 8010868:	1c51      	adds	r1, r2, #1
 801086a:	6031      	str	r1, [r6, #0]
 801086c:	7812      	ldrb	r2, [r2, #0]
 801086e:	f805 2b01 	strb.w	r2, [r5], #1
 8010872:	6872      	ldr	r2, [r6, #4]
 8010874:	3a01      	subs	r2, #1
 8010876:	2a00      	cmp	r2, #0
 8010878:	6072      	str	r2, [r6, #4]
 801087a:	dc07      	bgt.n	801088c <_scanf_i+0xb8>
 801087c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8010880:	4631      	mov	r1, r6
 8010882:	4650      	mov	r0, sl
 8010884:	4790      	blx	r2
 8010886:	2800      	cmp	r0, #0
 8010888:	f040 8085 	bne.w	8010996 <_scanf_i+0x1c2>
 801088c:	f10b 0b01 	add.w	fp, fp, #1
 8010890:	f1bb 0f03 	cmp.w	fp, #3
 8010894:	d1cb      	bne.n	801082e <_scanf_i+0x5a>
 8010896:	6863      	ldr	r3, [r4, #4]
 8010898:	b90b      	cbnz	r3, 801089e <_scanf_i+0xca>
 801089a:	230a      	movs	r3, #10
 801089c:	6063      	str	r3, [r4, #4]
 801089e:	6863      	ldr	r3, [r4, #4]
 80108a0:	4945      	ldr	r1, [pc, #276]	@ (80109b8 <_scanf_i+0x1e4>)
 80108a2:	6960      	ldr	r0, [r4, #20]
 80108a4:	1ac9      	subs	r1, r1, r3
 80108a6:	f000 f947 	bl	8010b38 <__sccl>
 80108aa:	f04f 0b00 	mov.w	fp, #0
 80108ae:	68a3      	ldr	r3, [r4, #8]
 80108b0:	6822      	ldr	r2, [r4, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d03d      	beq.n	8010932 <_scanf_i+0x15e>
 80108b6:	6831      	ldr	r1, [r6, #0]
 80108b8:	6960      	ldr	r0, [r4, #20]
 80108ba:	f891 c000 	ldrb.w	ip, [r1]
 80108be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d035      	beq.n	8010932 <_scanf_i+0x15e>
 80108c6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80108ca:	d124      	bne.n	8010916 <_scanf_i+0x142>
 80108cc:	0510      	lsls	r0, r2, #20
 80108ce:	d522      	bpl.n	8010916 <_scanf_i+0x142>
 80108d0:	f10b 0b01 	add.w	fp, fp, #1
 80108d4:	f1b9 0f00 	cmp.w	r9, #0
 80108d8:	d003      	beq.n	80108e2 <_scanf_i+0x10e>
 80108da:	3301      	adds	r3, #1
 80108dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80108e0:	60a3      	str	r3, [r4, #8]
 80108e2:	6873      	ldr	r3, [r6, #4]
 80108e4:	3b01      	subs	r3, #1
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	6073      	str	r3, [r6, #4]
 80108ea:	dd1b      	ble.n	8010924 <_scanf_i+0x150>
 80108ec:	6833      	ldr	r3, [r6, #0]
 80108ee:	3301      	adds	r3, #1
 80108f0:	6033      	str	r3, [r6, #0]
 80108f2:	68a3      	ldr	r3, [r4, #8]
 80108f4:	3b01      	subs	r3, #1
 80108f6:	60a3      	str	r3, [r4, #8]
 80108f8:	e7d9      	b.n	80108ae <_scanf_i+0xda>
 80108fa:	f1bb 0f02 	cmp.w	fp, #2
 80108fe:	d1ae      	bne.n	801085e <_scanf_i+0x8a>
 8010900:	6822      	ldr	r2, [r4, #0]
 8010902:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8010906:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801090a:	d1bf      	bne.n	801088c <_scanf_i+0xb8>
 801090c:	2110      	movs	r1, #16
 801090e:	6061      	str	r1, [r4, #4]
 8010910:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010914:	e7a2      	b.n	801085c <_scanf_i+0x88>
 8010916:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801091a:	6022      	str	r2, [r4, #0]
 801091c:	780b      	ldrb	r3, [r1, #0]
 801091e:	f805 3b01 	strb.w	r3, [r5], #1
 8010922:	e7de      	b.n	80108e2 <_scanf_i+0x10e>
 8010924:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010928:	4631      	mov	r1, r6
 801092a:	4650      	mov	r0, sl
 801092c:	4798      	blx	r3
 801092e:	2800      	cmp	r0, #0
 8010930:	d0df      	beq.n	80108f2 <_scanf_i+0x11e>
 8010932:	6823      	ldr	r3, [r4, #0]
 8010934:	05d9      	lsls	r1, r3, #23
 8010936:	d50d      	bpl.n	8010954 <_scanf_i+0x180>
 8010938:	42bd      	cmp	r5, r7
 801093a:	d909      	bls.n	8010950 <_scanf_i+0x17c>
 801093c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010940:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010944:	4632      	mov	r2, r6
 8010946:	4650      	mov	r0, sl
 8010948:	4798      	blx	r3
 801094a:	f105 39ff 	add.w	r9, r5, #4294967295
 801094e:	464d      	mov	r5, r9
 8010950:	42bd      	cmp	r5, r7
 8010952:	d028      	beq.n	80109a6 <_scanf_i+0x1d2>
 8010954:	6822      	ldr	r2, [r4, #0]
 8010956:	f012 0210 	ands.w	r2, r2, #16
 801095a:	d113      	bne.n	8010984 <_scanf_i+0x1b0>
 801095c:	702a      	strb	r2, [r5, #0]
 801095e:	6863      	ldr	r3, [r4, #4]
 8010960:	9e01      	ldr	r6, [sp, #4]
 8010962:	4639      	mov	r1, r7
 8010964:	4650      	mov	r0, sl
 8010966:	47b0      	blx	r6
 8010968:	f8d8 3000 	ldr.w	r3, [r8]
 801096c:	6821      	ldr	r1, [r4, #0]
 801096e:	1d1a      	adds	r2, r3, #4
 8010970:	f8c8 2000 	str.w	r2, [r8]
 8010974:	f011 0f20 	tst.w	r1, #32
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	d00f      	beq.n	801099c <_scanf_i+0x1c8>
 801097c:	6018      	str	r0, [r3, #0]
 801097e:	68e3      	ldr	r3, [r4, #12]
 8010980:	3301      	adds	r3, #1
 8010982:	60e3      	str	r3, [r4, #12]
 8010984:	6923      	ldr	r3, [r4, #16]
 8010986:	1bed      	subs	r5, r5, r7
 8010988:	445d      	add	r5, fp
 801098a:	442b      	add	r3, r5
 801098c:	6123      	str	r3, [r4, #16]
 801098e:	2000      	movs	r0, #0
 8010990:	b007      	add	sp, #28
 8010992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010996:	f04f 0b00 	mov.w	fp, #0
 801099a:	e7ca      	b.n	8010932 <_scanf_i+0x15e>
 801099c:	07ca      	lsls	r2, r1, #31
 801099e:	bf4c      	ite	mi
 80109a0:	8018      	strhmi	r0, [r3, #0]
 80109a2:	6018      	strpl	r0, [r3, #0]
 80109a4:	e7eb      	b.n	801097e <_scanf_i+0x1aa>
 80109a6:	2001      	movs	r0, #1
 80109a8:	e7f2      	b.n	8010990 <_scanf_i+0x1bc>
 80109aa:	bf00      	nop
 80109ac:	080113d8 	.word	0x080113d8
 80109b0:	0800d181 	.word	0x0800d181
 80109b4:	08010d65 	.word	0x08010d65
 80109b8:	08011891 	.word	0x08011891

080109bc <__sflush_r>:
 80109bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c4:	0716      	lsls	r6, r2, #28
 80109c6:	4605      	mov	r5, r0
 80109c8:	460c      	mov	r4, r1
 80109ca:	d454      	bmi.n	8010a76 <__sflush_r+0xba>
 80109cc:	684b      	ldr	r3, [r1, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	dc02      	bgt.n	80109d8 <__sflush_r+0x1c>
 80109d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	dd48      	ble.n	8010a6a <__sflush_r+0xae>
 80109d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109da:	2e00      	cmp	r6, #0
 80109dc:	d045      	beq.n	8010a6a <__sflush_r+0xae>
 80109de:	2300      	movs	r3, #0
 80109e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80109e4:	682f      	ldr	r7, [r5, #0]
 80109e6:	6a21      	ldr	r1, [r4, #32]
 80109e8:	602b      	str	r3, [r5, #0]
 80109ea:	d030      	beq.n	8010a4e <__sflush_r+0x92>
 80109ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80109ee:	89a3      	ldrh	r3, [r4, #12]
 80109f0:	0759      	lsls	r1, r3, #29
 80109f2:	d505      	bpl.n	8010a00 <__sflush_r+0x44>
 80109f4:	6863      	ldr	r3, [r4, #4]
 80109f6:	1ad2      	subs	r2, r2, r3
 80109f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109fa:	b10b      	cbz	r3, 8010a00 <__sflush_r+0x44>
 80109fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80109fe:	1ad2      	subs	r2, r2, r3
 8010a00:	2300      	movs	r3, #0
 8010a02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010a04:	6a21      	ldr	r1, [r4, #32]
 8010a06:	4628      	mov	r0, r5
 8010a08:	47b0      	blx	r6
 8010a0a:	1c43      	adds	r3, r0, #1
 8010a0c:	89a3      	ldrh	r3, [r4, #12]
 8010a0e:	d106      	bne.n	8010a1e <__sflush_r+0x62>
 8010a10:	6829      	ldr	r1, [r5, #0]
 8010a12:	291d      	cmp	r1, #29
 8010a14:	d82b      	bhi.n	8010a6e <__sflush_r+0xb2>
 8010a16:	4a2a      	ldr	r2, [pc, #168]	@ (8010ac0 <__sflush_r+0x104>)
 8010a18:	410a      	asrs	r2, r1
 8010a1a:	07d6      	lsls	r6, r2, #31
 8010a1c:	d427      	bmi.n	8010a6e <__sflush_r+0xb2>
 8010a1e:	2200      	movs	r2, #0
 8010a20:	6062      	str	r2, [r4, #4]
 8010a22:	04d9      	lsls	r1, r3, #19
 8010a24:	6922      	ldr	r2, [r4, #16]
 8010a26:	6022      	str	r2, [r4, #0]
 8010a28:	d504      	bpl.n	8010a34 <__sflush_r+0x78>
 8010a2a:	1c42      	adds	r2, r0, #1
 8010a2c:	d101      	bne.n	8010a32 <__sflush_r+0x76>
 8010a2e:	682b      	ldr	r3, [r5, #0]
 8010a30:	b903      	cbnz	r3, 8010a34 <__sflush_r+0x78>
 8010a32:	6560      	str	r0, [r4, #84]	@ 0x54
 8010a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a36:	602f      	str	r7, [r5, #0]
 8010a38:	b1b9      	cbz	r1, 8010a6a <__sflush_r+0xae>
 8010a3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a3e:	4299      	cmp	r1, r3
 8010a40:	d002      	beq.n	8010a48 <__sflush_r+0x8c>
 8010a42:	4628      	mov	r0, r5
 8010a44:	f7fe faec 	bl	800f020 <_free_r>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a4c:	e00d      	b.n	8010a6a <__sflush_r+0xae>
 8010a4e:	2301      	movs	r3, #1
 8010a50:	4628      	mov	r0, r5
 8010a52:	47b0      	blx	r6
 8010a54:	4602      	mov	r2, r0
 8010a56:	1c50      	adds	r0, r2, #1
 8010a58:	d1c9      	bne.n	80109ee <__sflush_r+0x32>
 8010a5a:	682b      	ldr	r3, [r5, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d0c6      	beq.n	80109ee <__sflush_r+0x32>
 8010a60:	2b1d      	cmp	r3, #29
 8010a62:	d001      	beq.n	8010a68 <__sflush_r+0xac>
 8010a64:	2b16      	cmp	r3, #22
 8010a66:	d11e      	bne.n	8010aa6 <__sflush_r+0xea>
 8010a68:	602f      	str	r7, [r5, #0]
 8010a6a:	2000      	movs	r0, #0
 8010a6c:	e022      	b.n	8010ab4 <__sflush_r+0xf8>
 8010a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a72:	b21b      	sxth	r3, r3
 8010a74:	e01b      	b.n	8010aae <__sflush_r+0xf2>
 8010a76:	690f      	ldr	r7, [r1, #16]
 8010a78:	2f00      	cmp	r7, #0
 8010a7a:	d0f6      	beq.n	8010a6a <__sflush_r+0xae>
 8010a7c:	0793      	lsls	r3, r2, #30
 8010a7e:	680e      	ldr	r6, [r1, #0]
 8010a80:	bf08      	it	eq
 8010a82:	694b      	ldreq	r3, [r1, #20]
 8010a84:	600f      	str	r7, [r1, #0]
 8010a86:	bf18      	it	ne
 8010a88:	2300      	movne	r3, #0
 8010a8a:	eba6 0807 	sub.w	r8, r6, r7
 8010a8e:	608b      	str	r3, [r1, #8]
 8010a90:	f1b8 0f00 	cmp.w	r8, #0
 8010a94:	dde9      	ble.n	8010a6a <__sflush_r+0xae>
 8010a96:	6a21      	ldr	r1, [r4, #32]
 8010a98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a9a:	4643      	mov	r3, r8
 8010a9c:	463a      	mov	r2, r7
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	47b0      	blx	r6
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	dc08      	bgt.n	8010ab8 <__sflush_r+0xfc>
 8010aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010aae:	81a3      	strh	r3, [r4, #12]
 8010ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ab8:	4407      	add	r7, r0
 8010aba:	eba8 0800 	sub.w	r8, r8, r0
 8010abe:	e7e7      	b.n	8010a90 <__sflush_r+0xd4>
 8010ac0:	dfbffffe 	.word	0xdfbffffe

08010ac4 <_fflush_r>:
 8010ac4:	b538      	push	{r3, r4, r5, lr}
 8010ac6:	690b      	ldr	r3, [r1, #16]
 8010ac8:	4605      	mov	r5, r0
 8010aca:	460c      	mov	r4, r1
 8010acc:	b913      	cbnz	r3, 8010ad4 <_fflush_r+0x10>
 8010ace:	2500      	movs	r5, #0
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	bd38      	pop	{r3, r4, r5, pc}
 8010ad4:	b118      	cbz	r0, 8010ade <_fflush_r+0x1a>
 8010ad6:	6a03      	ldr	r3, [r0, #32]
 8010ad8:	b90b      	cbnz	r3, 8010ade <_fflush_r+0x1a>
 8010ada:	f7fd fa55 	bl	800df88 <__sinit>
 8010ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d0f3      	beq.n	8010ace <_fflush_r+0xa>
 8010ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010ae8:	07d0      	lsls	r0, r2, #31
 8010aea:	d404      	bmi.n	8010af6 <_fflush_r+0x32>
 8010aec:	0599      	lsls	r1, r3, #22
 8010aee:	d402      	bmi.n	8010af6 <_fflush_r+0x32>
 8010af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010af2:	f7fd fc0a 	bl	800e30a <__retarget_lock_acquire_recursive>
 8010af6:	4628      	mov	r0, r5
 8010af8:	4621      	mov	r1, r4
 8010afa:	f7ff ff5f 	bl	80109bc <__sflush_r>
 8010afe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b00:	07da      	lsls	r2, r3, #31
 8010b02:	4605      	mov	r5, r0
 8010b04:	d4e4      	bmi.n	8010ad0 <_fflush_r+0xc>
 8010b06:	89a3      	ldrh	r3, [r4, #12]
 8010b08:	059b      	lsls	r3, r3, #22
 8010b0a:	d4e1      	bmi.n	8010ad0 <_fflush_r+0xc>
 8010b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b0e:	f7fd fbfd 	bl	800e30c <__retarget_lock_release_recursive>
 8010b12:	e7dd      	b.n	8010ad0 <_fflush_r+0xc>

08010b14 <fiprintf>:
 8010b14:	b40e      	push	{r1, r2, r3}
 8010b16:	b503      	push	{r0, r1, lr}
 8010b18:	4601      	mov	r1, r0
 8010b1a:	ab03      	add	r3, sp, #12
 8010b1c:	4805      	ldr	r0, [pc, #20]	@ (8010b34 <fiprintf+0x20>)
 8010b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b22:	6800      	ldr	r0, [r0, #0]
 8010b24:	9301      	str	r3, [sp, #4]
 8010b26:	f000 f949 	bl	8010dbc <_vfiprintf_r>
 8010b2a:	b002      	add	sp, #8
 8010b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b30:	b003      	add	sp, #12
 8010b32:	4770      	bx	lr
 8010b34:	2000029c 	.word	0x2000029c

08010b38 <__sccl>:
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	780b      	ldrb	r3, [r1, #0]
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	2b5e      	cmp	r3, #94	@ 0x5e
 8010b40:	bf0b      	itete	eq
 8010b42:	784b      	ldrbeq	r3, [r1, #1]
 8010b44:	1c4a      	addne	r2, r1, #1
 8010b46:	1c8a      	addeq	r2, r1, #2
 8010b48:	2100      	movne	r1, #0
 8010b4a:	bf08      	it	eq
 8010b4c:	2101      	moveq	r1, #1
 8010b4e:	3801      	subs	r0, #1
 8010b50:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8010b54:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010b58:	42a8      	cmp	r0, r5
 8010b5a:	d1fb      	bne.n	8010b54 <__sccl+0x1c>
 8010b5c:	b90b      	cbnz	r3, 8010b62 <__sccl+0x2a>
 8010b5e:	1e50      	subs	r0, r2, #1
 8010b60:	bd70      	pop	{r4, r5, r6, pc}
 8010b62:	f081 0101 	eor.w	r1, r1, #1
 8010b66:	54e1      	strb	r1, [r4, r3]
 8010b68:	4610      	mov	r0, r2
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010b70:	2d2d      	cmp	r5, #45	@ 0x2d
 8010b72:	d005      	beq.n	8010b80 <__sccl+0x48>
 8010b74:	2d5d      	cmp	r5, #93	@ 0x5d
 8010b76:	d016      	beq.n	8010ba6 <__sccl+0x6e>
 8010b78:	2d00      	cmp	r5, #0
 8010b7a:	d0f1      	beq.n	8010b60 <__sccl+0x28>
 8010b7c:	462b      	mov	r3, r5
 8010b7e:	e7f2      	b.n	8010b66 <__sccl+0x2e>
 8010b80:	7846      	ldrb	r6, [r0, #1]
 8010b82:	2e5d      	cmp	r6, #93	@ 0x5d
 8010b84:	d0fa      	beq.n	8010b7c <__sccl+0x44>
 8010b86:	42b3      	cmp	r3, r6
 8010b88:	dcf8      	bgt.n	8010b7c <__sccl+0x44>
 8010b8a:	3002      	adds	r0, #2
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	3201      	adds	r2, #1
 8010b90:	4296      	cmp	r6, r2
 8010b92:	54a1      	strb	r1, [r4, r2]
 8010b94:	dcfb      	bgt.n	8010b8e <__sccl+0x56>
 8010b96:	1af2      	subs	r2, r6, r3
 8010b98:	3a01      	subs	r2, #1
 8010b9a:	1c5d      	adds	r5, r3, #1
 8010b9c:	42b3      	cmp	r3, r6
 8010b9e:	bfa8      	it	ge
 8010ba0:	2200      	movge	r2, #0
 8010ba2:	18ab      	adds	r3, r5, r2
 8010ba4:	e7e1      	b.n	8010b6a <__sccl+0x32>
 8010ba6:	4610      	mov	r0, r2
 8010ba8:	e7da      	b.n	8010b60 <__sccl+0x28>

08010baa <__submore>:
 8010baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bae:	460c      	mov	r4, r1
 8010bb0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010bb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bb6:	4299      	cmp	r1, r3
 8010bb8:	d11d      	bne.n	8010bf6 <__submore+0x4c>
 8010bba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010bbe:	f7fb fb8d 	bl	800c2dc <_malloc_r>
 8010bc2:	b918      	cbnz	r0, 8010bcc <__submore+0x22>
 8010bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010bd0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010bd2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8010bd6:	6360      	str	r0, [r4, #52]	@ 0x34
 8010bd8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8010bdc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010be0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8010be4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010be8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8010bec:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010bf0:	6020      	str	r0, [r4, #0]
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	e7e8      	b.n	8010bc8 <__submore+0x1e>
 8010bf6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010bf8:	0077      	lsls	r7, r6, #1
 8010bfa:	463a      	mov	r2, r7
 8010bfc:	f7fb fc02 	bl	800c404 <_realloc_r>
 8010c00:	4605      	mov	r5, r0
 8010c02:	2800      	cmp	r0, #0
 8010c04:	d0de      	beq.n	8010bc4 <__submore+0x1a>
 8010c06:	eb00 0806 	add.w	r8, r0, r6
 8010c0a:	4601      	mov	r1, r0
 8010c0c:	4632      	mov	r2, r6
 8010c0e:	4640      	mov	r0, r8
 8010c10:	f7fd fb7d 	bl	800e30e <memcpy>
 8010c14:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010c18:	f8c4 8000 	str.w	r8, [r4]
 8010c1c:	e7e9      	b.n	8010bf2 <__submore+0x48>

08010c1e <memmove>:
 8010c1e:	4288      	cmp	r0, r1
 8010c20:	b510      	push	{r4, lr}
 8010c22:	eb01 0402 	add.w	r4, r1, r2
 8010c26:	d902      	bls.n	8010c2e <memmove+0x10>
 8010c28:	4284      	cmp	r4, r0
 8010c2a:	4623      	mov	r3, r4
 8010c2c:	d807      	bhi.n	8010c3e <memmove+0x20>
 8010c2e:	1e43      	subs	r3, r0, #1
 8010c30:	42a1      	cmp	r1, r4
 8010c32:	d008      	beq.n	8010c46 <memmove+0x28>
 8010c34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c38:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c3c:	e7f8      	b.n	8010c30 <memmove+0x12>
 8010c3e:	4402      	add	r2, r0
 8010c40:	4601      	mov	r1, r0
 8010c42:	428a      	cmp	r2, r1
 8010c44:	d100      	bne.n	8010c48 <memmove+0x2a>
 8010c46:	bd10      	pop	{r4, pc}
 8010c48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c50:	e7f7      	b.n	8010c42 <memmove+0x24>

08010c52 <abort>:
 8010c52:	b508      	push	{r3, lr}
 8010c54:	2006      	movs	r0, #6
 8010c56:	f000 fa85 	bl	8011164 <raise>
 8010c5a:	2001      	movs	r0, #1
 8010c5c:	f7f3 fd62 	bl	8004724 <_exit>

08010c60 <_calloc_r>:
 8010c60:	b570      	push	{r4, r5, r6, lr}
 8010c62:	fba1 5402 	umull	r5, r4, r1, r2
 8010c66:	b93c      	cbnz	r4, 8010c78 <_calloc_r+0x18>
 8010c68:	4629      	mov	r1, r5
 8010c6a:	f7fb fb37 	bl	800c2dc <_malloc_r>
 8010c6e:	4606      	mov	r6, r0
 8010c70:	b928      	cbnz	r0, 8010c7e <_calloc_r+0x1e>
 8010c72:	2600      	movs	r6, #0
 8010c74:	4630      	mov	r0, r6
 8010c76:	bd70      	pop	{r4, r5, r6, pc}
 8010c78:	220c      	movs	r2, #12
 8010c7a:	6002      	str	r2, [r0, #0]
 8010c7c:	e7f9      	b.n	8010c72 <_calloc_r+0x12>
 8010c7e:	462a      	mov	r2, r5
 8010c80:	4621      	mov	r1, r4
 8010c82:	f7fd fa46 	bl	800e112 <memset>
 8010c86:	e7f5      	b.n	8010c74 <_calloc_r+0x14>

08010c88 <_strtoul_l.constprop.0>:
 8010c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c8c:	4e34      	ldr	r6, [pc, #208]	@ (8010d60 <_strtoul_l.constprop.0+0xd8>)
 8010c8e:	4686      	mov	lr, r0
 8010c90:	460d      	mov	r5, r1
 8010c92:	4628      	mov	r0, r5
 8010c94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c98:	5d37      	ldrb	r7, [r6, r4]
 8010c9a:	f017 0708 	ands.w	r7, r7, #8
 8010c9e:	d1f8      	bne.n	8010c92 <_strtoul_l.constprop.0+0xa>
 8010ca0:	2c2d      	cmp	r4, #45	@ 0x2d
 8010ca2:	d12f      	bne.n	8010d04 <_strtoul_l.constprop.0+0x7c>
 8010ca4:	782c      	ldrb	r4, [r5, #0]
 8010ca6:	2701      	movs	r7, #1
 8010ca8:	1c85      	adds	r5, r0, #2
 8010caa:	f033 0010 	bics.w	r0, r3, #16
 8010cae:	d109      	bne.n	8010cc4 <_strtoul_l.constprop.0+0x3c>
 8010cb0:	2c30      	cmp	r4, #48	@ 0x30
 8010cb2:	d12c      	bne.n	8010d0e <_strtoul_l.constprop.0+0x86>
 8010cb4:	7828      	ldrb	r0, [r5, #0]
 8010cb6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010cba:	2858      	cmp	r0, #88	@ 0x58
 8010cbc:	d127      	bne.n	8010d0e <_strtoul_l.constprop.0+0x86>
 8010cbe:	786c      	ldrb	r4, [r5, #1]
 8010cc0:	2310      	movs	r3, #16
 8010cc2:	3502      	adds	r5, #2
 8010cc4:	f04f 38ff 	mov.w	r8, #4294967295
 8010cc8:	2600      	movs	r6, #0
 8010cca:	fbb8 f8f3 	udiv	r8, r8, r3
 8010cce:	fb03 f908 	mul.w	r9, r3, r8
 8010cd2:	ea6f 0909 	mvn.w	r9, r9
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010cdc:	f1bc 0f09 	cmp.w	ip, #9
 8010ce0:	d81c      	bhi.n	8010d1c <_strtoul_l.constprop.0+0x94>
 8010ce2:	4664      	mov	r4, ip
 8010ce4:	42a3      	cmp	r3, r4
 8010ce6:	dd2a      	ble.n	8010d3e <_strtoul_l.constprop.0+0xb6>
 8010ce8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8010cec:	d007      	beq.n	8010cfe <_strtoul_l.constprop.0+0x76>
 8010cee:	4580      	cmp	r8, r0
 8010cf0:	d322      	bcc.n	8010d38 <_strtoul_l.constprop.0+0xb0>
 8010cf2:	d101      	bne.n	8010cf8 <_strtoul_l.constprop.0+0x70>
 8010cf4:	45a1      	cmp	r9, r4
 8010cf6:	db1f      	blt.n	8010d38 <_strtoul_l.constprop.0+0xb0>
 8010cf8:	fb00 4003 	mla	r0, r0, r3, r4
 8010cfc:	2601      	movs	r6, #1
 8010cfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d02:	e7e9      	b.n	8010cd8 <_strtoul_l.constprop.0+0x50>
 8010d04:	2c2b      	cmp	r4, #43	@ 0x2b
 8010d06:	bf04      	itt	eq
 8010d08:	782c      	ldrbeq	r4, [r5, #0]
 8010d0a:	1c85      	addeq	r5, r0, #2
 8010d0c:	e7cd      	b.n	8010caa <_strtoul_l.constprop.0+0x22>
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d1d8      	bne.n	8010cc4 <_strtoul_l.constprop.0+0x3c>
 8010d12:	2c30      	cmp	r4, #48	@ 0x30
 8010d14:	bf0c      	ite	eq
 8010d16:	2308      	moveq	r3, #8
 8010d18:	230a      	movne	r3, #10
 8010d1a:	e7d3      	b.n	8010cc4 <_strtoul_l.constprop.0+0x3c>
 8010d1c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010d20:	f1bc 0f19 	cmp.w	ip, #25
 8010d24:	d801      	bhi.n	8010d2a <_strtoul_l.constprop.0+0xa2>
 8010d26:	3c37      	subs	r4, #55	@ 0x37
 8010d28:	e7dc      	b.n	8010ce4 <_strtoul_l.constprop.0+0x5c>
 8010d2a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010d2e:	f1bc 0f19 	cmp.w	ip, #25
 8010d32:	d804      	bhi.n	8010d3e <_strtoul_l.constprop.0+0xb6>
 8010d34:	3c57      	subs	r4, #87	@ 0x57
 8010d36:	e7d5      	b.n	8010ce4 <_strtoul_l.constprop.0+0x5c>
 8010d38:	f04f 36ff 	mov.w	r6, #4294967295
 8010d3c:	e7df      	b.n	8010cfe <_strtoul_l.constprop.0+0x76>
 8010d3e:	1c73      	adds	r3, r6, #1
 8010d40:	d106      	bne.n	8010d50 <_strtoul_l.constprop.0+0xc8>
 8010d42:	2322      	movs	r3, #34	@ 0x22
 8010d44:	f8ce 3000 	str.w	r3, [lr]
 8010d48:	4630      	mov	r0, r6
 8010d4a:	b932      	cbnz	r2, 8010d5a <_strtoul_l.constprop.0+0xd2>
 8010d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d50:	b107      	cbz	r7, 8010d54 <_strtoul_l.constprop.0+0xcc>
 8010d52:	4240      	negs	r0, r0
 8010d54:	2a00      	cmp	r2, #0
 8010d56:	d0f9      	beq.n	8010d4c <_strtoul_l.constprop.0+0xc4>
 8010d58:	b106      	cbz	r6, 8010d5c <_strtoul_l.constprop.0+0xd4>
 8010d5a:	1e69      	subs	r1, r5, #1
 8010d5c:	6011      	str	r1, [r2, #0]
 8010d5e:	e7f5      	b.n	8010d4c <_strtoul_l.constprop.0+0xc4>
 8010d60:	08011459 	.word	0x08011459

08010d64 <_strtoul_r>:
 8010d64:	f7ff bf90 	b.w	8010c88 <_strtoul_l.constprop.0>

08010d68 <__sfputc_r>:
 8010d68:	6893      	ldr	r3, [r2, #8]
 8010d6a:	3b01      	subs	r3, #1
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	b410      	push	{r4}
 8010d70:	6093      	str	r3, [r2, #8]
 8010d72:	da08      	bge.n	8010d86 <__sfputc_r+0x1e>
 8010d74:	6994      	ldr	r4, [r2, #24]
 8010d76:	42a3      	cmp	r3, r4
 8010d78:	db01      	blt.n	8010d7e <__sfputc_r+0x16>
 8010d7a:	290a      	cmp	r1, #10
 8010d7c:	d103      	bne.n	8010d86 <__sfputc_r+0x1e>
 8010d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d82:	f000 b933 	b.w	8010fec <__swbuf_r>
 8010d86:	6813      	ldr	r3, [r2, #0]
 8010d88:	1c58      	adds	r0, r3, #1
 8010d8a:	6010      	str	r0, [r2, #0]
 8010d8c:	7019      	strb	r1, [r3, #0]
 8010d8e:	4608      	mov	r0, r1
 8010d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d94:	4770      	bx	lr

08010d96 <__sfputs_r>:
 8010d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d98:	4606      	mov	r6, r0
 8010d9a:	460f      	mov	r7, r1
 8010d9c:	4614      	mov	r4, r2
 8010d9e:	18d5      	adds	r5, r2, r3
 8010da0:	42ac      	cmp	r4, r5
 8010da2:	d101      	bne.n	8010da8 <__sfputs_r+0x12>
 8010da4:	2000      	movs	r0, #0
 8010da6:	e007      	b.n	8010db8 <__sfputs_r+0x22>
 8010da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dac:	463a      	mov	r2, r7
 8010dae:	4630      	mov	r0, r6
 8010db0:	f7ff ffda 	bl	8010d68 <__sfputc_r>
 8010db4:	1c43      	adds	r3, r0, #1
 8010db6:	d1f3      	bne.n	8010da0 <__sfputs_r+0xa>
 8010db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010dbc <_vfiprintf_r>:
 8010dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc0:	460d      	mov	r5, r1
 8010dc2:	b09d      	sub	sp, #116	@ 0x74
 8010dc4:	4614      	mov	r4, r2
 8010dc6:	4698      	mov	r8, r3
 8010dc8:	4606      	mov	r6, r0
 8010dca:	b118      	cbz	r0, 8010dd4 <_vfiprintf_r+0x18>
 8010dcc:	6a03      	ldr	r3, [r0, #32]
 8010dce:	b90b      	cbnz	r3, 8010dd4 <_vfiprintf_r+0x18>
 8010dd0:	f7fd f8da 	bl	800df88 <__sinit>
 8010dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dd6:	07d9      	lsls	r1, r3, #31
 8010dd8:	d405      	bmi.n	8010de6 <_vfiprintf_r+0x2a>
 8010dda:	89ab      	ldrh	r3, [r5, #12]
 8010ddc:	059a      	lsls	r2, r3, #22
 8010dde:	d402      	bmi.n	8010de6 <_vfiprintf_r+0x2a>
 8010de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010de2:	f7fd fa92 	bl	800e30a <__retarget_lock_acquire_recursive>
 8010de6:	89ab      	ldrh	r3, [r5, #12]
 8010de8:	071b      	lsls	r3, r3, #28
 8010dea:	d501      	bpl.n	8010df0 <_vfiprintf_r+0x34>
 8010dec:	692b      	ldr	r3, [r5, #16]
 8010dee:	b99b      	cbnz	r3, 8010e18 <_vfiprintf_r+0x5c>
 8010df0:	4629      	mov	r1, r5
 8010df2:	4630      	mov	r0, r6
 8010df4:	f000 f938 	bl	8011068 <__swsetup_r>
 8010df8:	b170      	cbz	r0, 8010e18 <_vfiprintf_r+0x5c>
 8010dfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dfc:	07dc      	lsls	r4, r3, #31
 8010dfe:	d504      	bpl.n	8010e0a <_vfiprintf_r+0x4e>
 8010e00:	f04f 30ff 	mov.w	r0, #4294967295
 8010e04:	b01d      	add	sp, #116	@ 0x74
 8010e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0a:	89ab      	ldrh	r3, [r5, #12]
 8010e0c:	0598      	lsls	r0, r3, #22
 8010e0e:	d4f7      	bmi.n	8010e00 <_vfiprintf_r+0x44>
 8010e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e12:	f7fd fa7b 	bl	800e30c <__retarget_lock_release_recursive>
 8010e16:	e7f3      	b.n	8010e00 <_vfiprintf_r+0x44>
 8010e18:	2300      	movs	r3, #0
 8010e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e1c:	2320      	movs	r3, #32
 8010e1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e26:	2330      	movs	r3, #48	@ 0x30
 8010e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010fd8 <_vfiprintf_r+0x21c>
 8010e2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e30:	f04f 0901 	mov.w	r9, #1
 8010e34:	4623      	mov	r3, r4
 8010e36:	469a      	mov	sl, r3
 8010e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e3c:	b10a      	cbz	r2, 8010e42 <_vfiprintf_r+0x86>
 8010e3e:	2a25      	cmp	r2, #37	@ 0x25
 8010e40:	d1f9      	bne.n	8010e36 <_vfiprintf_r+0x7a>
 8010e42:	ebba 0b04 	subs.w	fp, sl, r4
 8010e46:	d00b      	beq.n	8010e60 <_vfiprintf_r+0xa4>
 8010e48:	465b      	mov	r3, fp
 8010e4a:	4622      	mov	r2, r4
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f7ff ffa1 	bl	8010d96 <__sfputs_r>
 8010e54:	3001      	adds	r0, #1
 8010e56:	f000 80a7 	beq.w	8010fa8 <_vfiprintf_r+0x1ec>
 8010e5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e5c:	445a      	add	r2, fp
 8010e5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e60:	f89a 3000 	ldrb.w	r3, [sl]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	f000 809f 	beq.w	8010fa8 <_vfiprintf_r+0x1ec>
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8010e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e74:	f10a 0a01 	add.w	sl, sl, #1
 8010e78:	9304      	str	r3, [sp, #16]
 8010e7a:	9307      	str	r3, [sp, #28]
 8010e7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e80:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e82:	4654      	mov	r4, sl
 8010e84:	2205      	movs	r2, #5
 8010e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e8a:	4853      	ldr	r0, [pc, #332]	@ (8010fd8 <_vfiprintf_r+0x21c>)
 8010e8c:	f7ef f9b0 	bl	80001f0 <memchr>
 8010e90:	9a04      	ldr	r2, [sp, #16]
 8010e92:	b9d8      	cbnz	r0, 8010ecc <_vfiprintf_r+0x110>
 8010e94:	06d1      	lsls	r1, r2, #27
 8010e96:	bf44      	itt	mi
 8010e98:	2320      	movmi	r3, #32
 8010e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e9e:	0713      	lsls	r3, r2, #28
 8010ea0:	bf44      	itt	mi
 8010ea2:	232b      	movmi	r3, #43	@ 0x2b
 8010ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8010eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8010eae:	d015      	beq.n	8010edc <_vfiprintf_r+0x120>
 8010eb0:	9a07      	ldr	r2, [sp, #28]
 8010eb2:	4654      	mov	r4, sl
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	f04f 0c0a 	mov.w	ip, #10
 8010eba:	4621      	mov	r1, r4
 8010ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ec0:	3b30      	subs	r3, #48	@ 0x30
 8010ec2:	2b09      	cmp	r3, #9
 8010ec4:	d94b      	bls.n	8010f5e <_vfiprintf_r+0x1a2>
 8010ec6:	b1b0      	cbz	r0, 8010ef6 <_vfiprintf_r+0x13a>
 8010ec8:	9207      	str	r2, [sp, #28]
 8010eca:	e014      	b.n	8010ef6 <_vfiprintf_r+0x13a>
 8010ecc:	eba0 0308 	sub.w	r3, r0, r8
 8010ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8010ed4:	4313      	orrs	r3, r2
 8010ed6:	9304      	str	r3, [sp, #16]
 8010ed8:	46a2      	mov	sl, r4
 8010eda:	e7d2      	b.n	8010e82 <_vfiprintf_r+0xc6>
 8010edc:	9b03      	ldr	r3, [sp, #12]
 8010ede:	1d19      	adds	r1, r3, #4
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	9103      	str	r1, [sp, #12]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	bfbb      	ittet	lt
 8010ee8:	425b      	neglt	r3, r3
 8010eea:	f042 0202 	orrlt.w	r2, r2, #2
 8010eee:	9307      	strge	r3, [sp, #28]
 8010ef0:	9307      	strlt	r3, [sp, #28]
 8010ef2:	bfb8      	it	lt
 8010ef4:	9204      	strlt	r2, [sp, #16]
 8010ef6:	7823      	ldrb	r3, [r4, #0]
 8010ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8010efa:	d10a      	bne.n	8010f12 <_vfiprintf_r+0x156>
 8010efc:	7863      	ldrb	r3, [r4, #1]
 8010efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f00:	d132      	bne.n	8010f68 <_vfiprintf_r+0x1ac>
 8010f02:	9b03      	ldr	r3, [sp, #12]
 8010f04:	1d1a      	adds	r2, r3, #4
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	9203      	str	r2, [sp, #12]
 8010f0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f0e:	3402      	adds	r4, #2
 8010f10:	9305      	str	r3, [sp, #20]
 8010f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010fe8 <_vfiprintf_r+0x22c>
 8010f16:	7821      	ldrb	r1, [r4, #0]
 8010f18:	2203      	movs	r2, #3
 8010f1a:	4650      	mov	r0, sl
 8010f1c:	f7ef f968 	bl	80001f0 <memchr>
 8010f20:	b138      	cbz	r0, 8010f32 <_vfiprintf_r+0x176>
 8010f22:	9b04      	ldr	r3, [sp, #16]
 8010f24:	eba0 000a 	sub.w	r0, r0, sl
 8010f28:	2240      	movs	r2, #64	@ 0x40
 8010f2a:	4082      	lsls	r2, r0
 8010f2c:	4313      	orrs	r3, r2
 8010f2e:	3401      	adds	r4, #1
 8010f30:	9304      	str	r3, [sp, #16]
 8010f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f36:	4829      	ldr	r0, [pc, #164]	@ (8010fdc <_vfiprintf_r+0x220>)
 8010f38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f3c:	2206      	movs	r2, #6
 8010f3e:	f7ef f957 	bl	80001f0 <memchr>
 8010f42:	2800      	cmp	r0, #0
 8010f44:	d03f      	beq.n	8010fc6 <_vfiprintf_r+0x20a>
 8010f46:	4b26      	ldr	r3, [pc, #152]	@ (8010fe0 <_vfiprintf_r+0x224>)
 8010f48:	bb1b      	cbnz	r3, 8010f92 <_vfiprintf_r+0x1d6>
 8010f4a:	9b03      	ldr	r3, [sp, #12]
 8010f4c:	3307      	adds	r3, #7
 8010f4e:	f023 0307 	bic.w	r3, r3, #7
 8010f52:	3308      	adds	r3, #8
 8010f54:	9303      	str	r3, [sp, #12]
 8010f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f58:	443b      	add	r3, r7
 8010f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f5c:	e76a      	b.n	8010e34 <_vfiprintf_r+0x78>
 8010f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f62:	460c      	mov	r4, r1
 8010f64:	2001      	movs	r0, #1
 8010f66:	e7a8      	b.n	8010eba <_vfiprintf_r+0xfe>
 8010f68:	2300      	movs	r3, #0
 8010f6a:	3401      	adds	r4, #1
 8010f6c:	9305      	str	r3, [sp, #20]
 8010f6e:	4619      	mov	r1, r3
 8010f70:	f04f 0c0a 	mov.w	ip, #10
 8010f74:	4620      	mov	r0, r4
 8010f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f7a:	3a30      	subs	r2, #48	@ 0x30
 8010f7c:	2a09      	cmp	r2, #9
 8010f7e:	d903      	bls.n	8010f88 <_vfiprintf_r+0x1cc>
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d0c6      	beq.n	8010f12 <_vfiprintf_r+0x156>
 8010f84:	9105      	str	r1, [sp, #20]
 8010f86:	e7c4      	b.n	8010f12 <_vfiprintf_r+0x156>
 8010f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f8c:	4604      	mov	r4, r0
 8010f8e:	2301      	movs	r3, #1
 8010f90:	e7f0      	b.n	8010f74 <_vfiprintf_r+0x1b8>
 8010f92:	ab03      	add	r3, sp, #12
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	462a      	mov	r2, r5
 8010f98:	4b12      	ldr	r3, [pc, #72]	@ (8010fe4 <_vfiprintf_r+0x228>)
 8010f9a:	a904      	add	r1, sp, #16
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	f7fc f99b 	bl	800d2d8 <_printf_float>
 8010fa2:	4607      	mov	r7, r0
 8010fa4:	1c78      	adds	r0, r7, #1
 8010fa6:	d1d6      	bne.n	8010f56 <_vfiprintf_r+0x19a>
 8010fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010faa:	07d9      	lsls	r1, r3, #31
 8010fac:	d405      	bmi.n	8010fba <_vfiprintf_r+0x1fe>
 8010fae:	89ab      	ldrh	r3, [r5, #12]
 8010fb0:	059a      	lsls	r2, r3, #22
 8010fb2:	d402      	bmi.n	8010fba <_vfiprintf_r+0x1fe>
 8010fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010fb6:	f7fd f9a9 	bl	800e30c <__retarget_lock_release_recursive>
 8010fba:	89ab      	ldrh	r3, [r5, #12]
 8010fbc:	065b      	lsls	r3, r3, #25
 8010fbe:	f53f af1f 	bmi.w	8010e00 <_vfiprintf_r+0x44>
 8010fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010fc4:	e71e      	b.n	8010e04 <_vfiprintf_r+0x48>
 8010fc6:	ab03      	add	r3, sp, #12
 8010fc8:	9300      	str	r3, [sp, #0]
 8010fca:	462a      	mov	r2, r5
 8010fcc:	4b05      	ldr	r3, [pc, #20]	@ (8010fe4 <_vfiprintf_r+0x228>)
 8010fce:	a904      	add	r1, sp, #16
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	f7fc fc19 	bl	800d808 <_printf_i>
 8010fd6:	e7e4      	b.n	8010fa2 <_vfiprintf_r+0x1e6>
 8010fd8:	08011870 	.word	0x08011870
 8010fdc:	0801187a 	.word	0x0801187a
 8010fe0:	0800d2d9 	.word	0x0800d2d9
 8010fe4:	08010d97 	.word	0x08010d97
 8010fe8:	08011876 	.word	0x08011876

08010fec <__swbuf_r>:
 8010fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fee:	460e      	mov	r6, r1
 8010ff0:	4614      	mov	r4, r2
 8010ff2:	4605      	mov	r5, r0
 8010ff4:	b118      	cbz	r0, 8010ffe <__swbuf_r+0x12>
 8010ff6:	6a03      	ldr	r3, [r0, #32]
 8010ff8:	b90b      	cbnz	r3, 8010ffe <__swbuf_r+0x12>
 8010ffa:	f7fc ffc5 	bl	800df88 <__sinit>
 8010ffe:	69a3      	ldr	r3, [r4, #24]
 8011000:	60a3      	str	r3, [r4, #8]
 8011002:	89a3      	ldrh	r3, [r4, #12]
 8011004:	071a      	lsls	r2, r3, #28
 8011006:	d501      	bpl.n	801100c <__swbuf_r+0x20>
 8011008:	6923      	ldr	r3, [r4, #16]
 801100a:	b943      	cbnz	r3, 801101e <__swbuf_r+0x32>
 801100c:	4621      	mov	r1, r4
 801100e:	4628      	mov	r0, r5
 8011010:	f000 f82a 	bl	8011068 <__swsetup_r>
 8011014:	b118      	cbz	r0, 801101e <__swbuf_r+0x32>
 8011016:	f04f 37ff 	mov.w	r7, #4294967295
 801101a:	4638      	mov	r0, r7
 801101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801101e:	6823      	ldr	r3, [r4, #0]
 8011020:	6922      	ldr	r2, [r4, #16]
 8011022:	1a98      	subs	r0, r3, r2
 8011024:	6963      	ldr	r3, [r4, #20]
 8011026:	b2f6      	uxtb	r6, r6
 8011028:	4283      	cmp	r3, r0
 801102a:	4637      	mov	r7, r6
 801102c:	dc05      	bgt.n	801103a <__swbuf_r+0x4e>
 801102e:	4621      	mov	r1, r4
 8011030:	4628      	mov	r0, r5
 8011032:	f7ff fd47 	bl	8010ac4 <_fflush_r>
 8011036:	2800      	cmp	r0, #0
 8011038:	d1ed      	bne.n	8011016 <__swbuf_r+0x2a>
 801103a:	68a3      	ldr	r3, [r4, #8]
 801103c:	3b01      	subs	r3, #1
 801103e:	60a3      	str	r3, [r4, #8]
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	1c5a      	adds	r2, r3, #1
 8011044:	6022      	str	r2, [r4, #0]
 8011046:	701e      	strb	r6, [r3, #0]
 8011048:	6962      	ldr	r2, [r4, #20]
 801104a:	1c43      	adds	r3, r0, #1
 801104c:	429a      	cmp	r2, r3
 801104e:	d004      	beq.n	801105a <__swbuf_r+0x6e>
 8011050:	89a3      	ldrh	r3, [r4, #12]
 8011052:	07db      	lsls	r3, r3, #31
 8011054:	d5e1      	bpl.n	801101a <__swbuf_r+0x2e>
 8011056:	2e0a      	cmp	r6, #10
 8011058:	d1df      	bne.n	801101a <__swbuf_r+0x2e>
 801105a:	4621      	mov	r1, r4
 801105c:	4628      	mov	r0, r5
 801105e:	f7ff fd31 	bl	8010ac4 <_fflush_r>
 8011062:	2800      	cmp	r0, #0
 8011064:	d0d9      	beq.n	801101a <__swbuf_r+0x2e>
 8011066:	e7d6      	b.n	8011016 <__swbuf_r+0x2a>

08011068 <__swsetup_r>:
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	4b29      	ldr	r3, [pc, #164]	@ (8011110 <__swsetup_r+0xa8>)
 801106c:	4605      	mov	r5, r0
 801106e:	6818      	ldr	r0, [r3, #0]
 8011070:	460c      	mov	r4, r1
 8011072:	b118      	cbz	r0, 801107c <__swsetup_r+0x14>
 8011074:	6a03      	ldr	r3, [r0, #32]
 8011076:	b90b      	cbnz	r3, 801107c <__swsetup_r+0x14>
 8011078:	f7fc ff86 	bl	800df88 <__sinit>
 801107c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011080:	0719      	lsls	r1, r3, #28
 8011082:	d422      	bmi.n	80110ca <__swsetup_r+0x62>
 8011084:	06da      	lsls	r2, r3, #27
 8011086:	d407      	bmi.n	8011098 <__swsetup_r+0x30>
 8011088:	2209      	movs	r2, #9
 801108a:	602a      	str	r2, [r5, #0]
 801108c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011090:	81a3      	strh	r3, [r4, #12]
 8011092:	f04f 30ff 	mov.w	r0, #4294967295
 8011096:	e033      	b.n	8011100 <__swsetup_r+0x98>
 8011098:	0758      	lsls	r0, r3, #29
 801109a:	d512      	bpl.n	80110c2 <__swsetup_r+0x5a>
 801109c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801109e:	b141      	cbz	r1, 80110b2 <__swsetup_r+0x4a>
 80110a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110a4:	4299      	cmp	r1, r3
 80110a6:	d002      	beq.n	80110ae <__swsetup_r+0x46>
 80110a8:	4628      	mov	r0, r5
 80110aa:	f7fd ffb9 	bl	800f020 <_free_r>
 80110ae:	2300      	movs	r3, #0
 80110b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80110b2:	89a3      	ldrh	r3, [r4, #12]
 80110b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80110b8:	81a3      	strh	r3, [r4, #12]
 80110ba:	2300      	movs	r3, #0
 80110bc:	6063      	str	r3, [r4, #4]
 80110be:	6923      	ldr	r3, [r4, #16]
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	89a3      	ldrh	r3, [r4, #12]
 80110c4:	f043 0308 	orr.w	r3, r3, #8
 80110c8:	81a3      	strh	r3, [r4, #12]
 80110ca:	6923      	ldr	r3, [r4, #16]
 80110cc:	b94b      	cbnz	r3, 80110e2 <__swsetup_r+0x7a>
 80110ce:	89a3      	ldrh	r3, [r4, #12]
 80110d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80110d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110d8:	d003      	beq.n	80110e2 <__swsetup_r+0x7a>
 80110da:	4621      	mov	r1, r4
 80110dc:	4628      	mov	r0, r5
 80110de:	f000 f883 	bl	80111e8 <__smakebuf_r>
 80110e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110e6:	f013 0201 	ands.w	r2, r3, #1
 80110ea:	d00a      	beq.n	8011102 <__swsetup_r+0x9a>
 80110ec:	2200      	movs	r2, #0
 80110ee:	60a2      	str	r2, [r4, #8]
 80110f0:	6962      	ldr	r2, [r4, #20]
 80110f2:	4252      	negs	r2, r2
 80110f4:	61a2      	str	r2, [r4, #24]
 80110f6:	6922      	ldr	r2, [r4, #16]
 80110f8:	b942      	cbnz	r2, 801110c <__swsetup_r+0xa4>
 80110fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80110fe:	d1c5      	bne.n	801108c <__swsetup_r+0x24>
 8011100:	bd38      	pop	{r3, r4, r5, pc}
 8011102:	0799      	lsls	r1, r3, #30
 8011104:	bf58      	it	pl
 8011106:	6962      	ldrpl	r2, [r4, #20]
 8011108:	60a2      	str	r2, [r4, #8]
 801110a:	e7f4      	b.n	80110f6 <__swsetup_r+0x8e>
 801110c:	2000      	movs	r0, #0
 801110e:	e7f7      	b.n	8011100 <__swsetup_r+0x98>
 8011110:	2000029c 	.word	0x2000029c

08011114 <_raise_r>:
 8011114:	291f      	cmp	r1, #31
 8011116:	b538      	push	{r3, r4, r5, lr}
 8011118:	4605      	mov	r5, r0
 801111a:	460c      	mov	r4, r1
 801111c:	d904      	bls.n	8011128 <_raise_r+0x14>
 801111e:	2316      	movs	r3, #22
 8011120:	6003      	str	r3, [r0, #0]
 8011122:	f04f 30ff 	mov.w	r0, #4294967295
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801112a:	b112      	cbz	r2, 8011132 <_raise_r+0x1e>
 801112c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011130:	b94b      	cbnz	r3, 8011146 <_raise_r+0x32>
 8011132:	4628      	mov	r0, r5
 8011134:	f000 f830 	bl	8011198 <_getpid_r>
 8011138:	4622      	mov	r2, r4
 801113a:	4601      	mov	r1, r0
 801113c:	4628      	mov	r0, r5
 801113e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011142:	f000 b817 	b.w	8011174 <_kill_r>
 8011146:	2b01      	cmp	r3, #1
 8011148:	d00a      	beq.n	8011160 <_raise_r+0x4c>
 801114a:	1c59      	adds	r1, r3, #1
 801114c:	d103      	bne.n	8011156 <_raise_r+0x42>
 801114e:	2316      	movs	r3, #22
 8011150:	6003      	str	r3, [r0, #0]
 8011152:	2001      	movs	r0, #1
 8011154:	e7e7      	b.n	8011126 <_raise_r+0x12>
 8011156:	2100      	movs	r1, #0
 8011158:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801115c:	4620      	mov	r0, r4
 801115e:	4798      	blx	r3
 8011160:	2000      	movs	r0, #0
 8011162:	e7e0      	b.n	8011126 <_raise_r+0x12>

08011164 <raise>:
 8011164:	4b02      	ldr	r3, [pc, #8]	@ (8011170 <raise+0xc>)
 8011166:	4601      	mov	r1, r0
 8011168:	6818      	ldr	r0, [r3, #0]
 801116a:	f7ff bfd3 	b.w	8011114 <_raise_r>
 801116e:	bf00      	nop
 8011170:	2000029c 	.word	0x2000029c

08011174 <_kill_r>:
 8011174:	b538      	push	{r3, r4, r5, lr}
 8011176:	4d07      	ldr	r5, [pc, #28]	@ (8011194 <_kill_r+0x20>)
 8011178:	2300      	movs	r3, #0
 801117a:	4604      	mov	r4, r0
 801117c:	4608      	mov	r0, r1
 801117e:	4611      	mov	r1, r2
 8011180:	602b      	str	r3, [r5, #0]
 8011182:	f7f3 fabf 	bl	8004704 <_kill>
 8011186:	1c43      	adds	r3, r0, #1
 8011188:	d102      	bne.n	8011190 <_kill_r+0x1c>
 801118a:	682b      	ldr	r3, [r5, #0]
 801118c:	b103      	cbz	r3, 8011190 <_kill_r+0x1c>
 801118e:	6023      	str	r3, [r4, #0]
 8011190:	bd38      	pop	{r3, r4, r5, pc}
 8011192:	bf00      	nop
 8011194:	20002230 	.word	0x20002230

08011198 <_getpid_r>:
 8011198:	f7f3 baac 	b.w	80046f4 <_getpid>

0801119c <__swhatbuf_r>:
 801119c:	b570      	push	{r4, r5, r6, lr}
 801119e:	460c      	mov	r4, r1
 80111a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111a4:	2900      	cmp	r1, #0
 80111a6:	b096      	sub	sp, #88	@ 0x58
 80111a8:	4615      	mov	r5, r2
 80111aa:	461e      	mov	r6, r3
 80111ac:	da0d      	bge.n	80111ca <__swhatbuf_r+0x2e>
 80111ae:	89a3      	ldrh	r3, [r4, #12]
 80111b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80111b4:	f04f 0100 	mov.w	r1, #0
 80111b8:	bf14      	ite	ne
 80111ba:	2340      	movne	r3, #64	@ 0x40
 80111bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80111c0:	2000      	movs	r0, #0
 80111c2:	6031      	str	r1, [r6, #0]
 80111c4:	602b      	str	r3, [r5, #0]
 80111c6:	b016      	add	sp, #88	@ 0x58
 80111c8:	bd70      	pop	{r4, r5, r6, pc}
 80111ca:	466a      	mov	r2, sp
 80111cc:	f000 f848 	bl	8011260 <_fstat_r>
 80111d0:	2800      	cmp	r0, #0
 80111d2:	dbec      	blt.n	80111ae <__swhatbuf_r+0x12>
 80111d4:	9901      	ldr	r1, [sp, #4]
 80111d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80111da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80111de:	4259      	negs	r1, r3
 80111e0:	4159      	adcs	r1, r3
 80111e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111e6:	e7eb      	b.n	80111c0 <__swhatbuf_r+0x24>

080111e8 <__smakebuf_r>:
 80111e8:	898b      	ldrh	r3, [r1, #12]
 80111ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111ec:	079d      	lsls	r5, r3, #30
 80111ee:	4606      	mov	r6, r0
 80111f0:	460c      	mov	r4, r1
 80111f2:	d507      	bpl.n	8011204 <__smakebuf_r+0x1c>
 80111f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80111f8:	6023      	str	r3, [r4, #0]
 80111fa:	6123      	str	r3, [r4, #16]
 80111fc:	2301      	movs	r3, #1
 80111fe:	6163      	str	r3, [r4, #20]
 8011200:	b003      	add	sp, #12
 8011202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011204:	ab01      	add	r3, sp, #4
 8011206:	466a      	mov	r2, sp
 8011208:	f7ff ffc8 	bl	801119c <__swhatbuf_r>
 801120c:	9f00      	ldr	r7, [sp, #0]
 801120e:	4605      	mov	r5, r0
 8011210:	4639      	mov	r1, r7
 8011212:	4630      	mov	r0, r6
 8011214:	f7fb f862 	bl	800c2dc <_malloc_r>
 8011218:	b948      	cbnz	r0, 801122e <__smakebuf_r+0x46>
 801121a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801121e:	059a      	lsls	r2, r3, #22
 8011220:	d4ee      	bmi.n	8011200 <__smakebuf_r+0x18>
 8011222:	f023 0303 	bic.w	r3, r3, #3
 8011226:	f043 0302 	orr.w	r3, r3, #2
 801122a:	81a3      	strh	r3, [r4, #12]
 801122c:	e7e2      	b.n	80111f4 <__smakebuf_r+0xc>
 801122e:	89a3      	ldrh	r3, [r4, #12]
 8011230:	6020      	str	r0, [r4, #0]
 8011232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011236:	81a3      	strh	r3, [r4, #12]
 8011238:	9b01      	ldr	r3, [sp, #4]
 801123a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801123e:	b15b      	cbz	r3, 8011258 <__smakebuf_r+0x70>
 8011240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011244:	4630      	mov	r0, r6
 8011246:	f000 f81d 	bl	8011284 <_isatty_r>
 801124a:	b128      	cbz	r0, 8011258 <__smakebuf_r+0x70>
 801124c:	89a3      	ldrh	r3, [r4, #12]
 801124e:	f023 0303 	bic.w	r3, r3, #3
 8011252:	f043 0301 	orr.w	r3, r3, #1
 8011256:	81a3      	strh	r3, [r4, #12]
 8011258:	89a3      	ldrh	r3, [r4, #12]
 801125a:	431d      	orrs	r5, r3
 801125c:	81a5      	strh	r5, [r4, #12]
 801125e:	e7cf      	b.n	8011200 <__smakebuf_r+0x18>

08011260 <_fstat_r>:
 8011260:	b538      	push	{r3, r4, r5, lr}
 8011262:	4d07      	ldr	r5, [pc, #28]	@ (8011280 <_fstat_r+0x20>)
 8011264:	2300      	movs	r3, #0
 8011266:	4604      	mov	r4, r0
 8011268:	4608      	mov	r0, r1
 801126a:	4611      	mov	r1, r2
 801126c:	602b      	str	r3, [r5, #0]
 801126e:	f7f3 faa9 	bl	80047c4 <_fstat>
 8011272:	1c43      	adds	r3, r0, #1
 8011274:	d102      	bne.n	801127c <_fstat_r+0x1c>
 8011276:	682b      	ldr	r3, [r5, #0]
 8011278:	b103      	cbz	r3, 801127c <_fstat_r+0x1c>
 801127a:	6023      	str	r3, [r4, #0]
 801127c:	bd38      	pop	{r3, r4, r5, pc}
 801127e:	bf00      	nop
 8011280:	20002230 	.word	0x20002230

08011284 <_isatty_r>:
 8011284:	b538      	push	{r3, r4, r5, lr}
 8011286:	4d06      	ldr	r5, [pc, #24]	@ (80112a0 <_isatty_r+0x1c>)
 8011288:	2300      	movs	r3, #0
 801128a:	4604      	mov	r4, r0
 801128c:	4608      	mov	r0, r1
 801128e:	602b      	str	r3, [r5, #0]
 8011290:	f7f3 faa8 	bl	80047e4 <_isatty>
 8011294:	1c43      	adds	r3, r0, #1
 8011296:	d102      	bne.n	801129e <_isatty_r+0x1a>
 8011298:	682b      	ldr	r3, [r5, #0]
 801129a:	b103      	cbz	r3, 801129e <_isatty_r+0x1a>
 801129c:	6023      	str	r3, [r4, #0]
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	20002230 	.word	0x20002230

080112a4 <_init>:
 80112a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a6:	bf00      	nop
 80112a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112aa:	bc08      	pop	{r3}
 80112ac:	469e      	mov	lr, r3
 80112ae:	4770      	bx	lr

080112b0 <_fini>:
 80112b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112b2:	bf00      	nop
 80112b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112b6:	bc08      	pop	{r3}
 80112b8:	469e      	mov	lr, r3
 80112ba:	4770      	bx	lr
